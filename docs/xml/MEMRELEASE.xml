<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="MEMRELEASE" kind="page">
    <compoundname>MEMRELEASE</compoundname>
    <title>MEMRELEASE Function</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".basic"><codeline><highlight class="normal">MEMRELEASE(integer-expression)</highlight></codeline>
</programlisting></para>
<para>Releases (frees) a block of memory previously obtained via <ref refid="MEMALLOC" kindref="compound">MEMALLOC</ref>.</para>
<para><hruler/>
</para>
<sect3 id="MEMRELEASE_1autotoc_md863">
<title>Examples</title>
<para><programlisting filename=".basic"><codeline><highlight class="normal">buf<sp/>=<sp/>MEMALLOC(65536)</highlight></codeline>
<codeline><highlight class="normal">REM<sp/>...<sp/>use<sp/>buf<sp/>...</highlight></codeline>
<codeline><highlight class="normal">MEMRELEASE<sp/>buf</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
<sect3 id="MEMRELEASE_1autotoc_md865">
<title>Notes</title>
<para><itemizedlist>
<listitem><para>Passing an invalid or already-freed handle raises an error.</para>
</listitem><listitem><para>After releasing, set your variable to <computeroutput>0</computeroutput> if you want to avoid accidental reuse.</para>
</listitem><listitem><para>Your program ending releases all memory it requested using <ref refid="MEMALLOC" kindref="compound">MEMALLOC Function</ref> - be aware of this if you pass reference of this memory to a child program!</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><bold>See also:</bold> <ref refid="MEMALLOC" kindref="compound">MEMALLOC</ref> </para>
</sect3>
    </detaileddescription>
    <location file="docpages/basic-language-reference/keywords/MEMRELEASE.md"/>
  </compounddef>
</doxygen>
