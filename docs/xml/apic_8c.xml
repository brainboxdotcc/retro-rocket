<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="apic_8c" kind="file" language="C++">
    <compoundname>apic.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <includes local="no">cpuid.h</includes>
    <incdepgraph>
      <node id="32">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="20">
        <label>basic.h</label>
        <link refid="basic_8h"/>
      </node>
      <node id="35">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="47">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="59">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>basic_tokenizer.h</label>
        <link refid="basic__tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="23">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="63">
        <label>cpuid.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="41">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="42">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="60">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="55">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="27">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
      </node>
      <node id="40">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="53">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>apic.c</label>
        <link refid="apic_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="30">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="19">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="apic_8c_1a3dac42d568d070ca6f076841c4ef835a" prot="public" static="no">
        <name>IA32_APIC_BASE_MSR</name>
        <initializer>0x1B</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="4" column="9" bodyfile="src/apic.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apic_8c_1a41621e98a2c9aed8650bf47c9b9a8861" prot="public" static="no">
        <name>APIC_BASE_X2APIC_ENABLE</name>
        <initializer>(1ULL &lt;&lt; 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="5" column="9" bodyfile="src/apic.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="apic_8c_1a19b8b3ead84a068bb923f912b3cb6d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t get_lapic_address</definition>
        <argsstring>()</argsstring>
        <name>get_lapic_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the physical address of the Local APIC MMIO region. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only valid when xAPIC mode is active. In x2APIC mode, LAPIC registers are accessed via MSRs instead of MMIO.</para>
<para><simplesect kind="return"><para>uint64_t Physical address of the LAPIC MMIO base. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="7" column="10" bodyfile="src/apic.c" bodystart="7" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1a5c1212d5f2acb0c6b937827a58a4f995" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void wrmsr</definition>
        <argsstring>(uint32_t msr, uint64_t value)</argsstring>
        <name>wrmsr</name>
        <param>
          <type>uint32_t</type>
          <declname>msr</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="19" column="20" bodyfile="src/apic.c" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1a338fb9dae0af159d69fd10623f80efb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apic_write</definition>
        <argsstring>(uint64_t reg, uint32_t val)</argsstring>
        <name>apic_write</name>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
          <defname>val</defname>
        </param>
        <briefdescription>
<para>Write to a Local APIC register. </para>
        </briefdescription>
        <detaileddescription>
<para>Works in both xAPIC and x2APIC modes:<itemizedlist>
<listitem><para>In xAPIC mode, the register is memory‑mapped at the LAPIC base address.</para>
</listitem><listitem><para>In x2APIC mode, registers are written via MSRs at 0x800 + (reg &gt;&gt; 4).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register offset (e.g. APIC_TPR = 0x80). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="28" column="6" bodyfile="src/apic.c" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1a1f511a07dc31003992395be20746b519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t apic_read</definition>
        <argsstring>(uint64_t reg)</argsstring>
        <name>apic_read</name>
        <param>
          <type>uint64_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Read a Local APIC register. </para>
        </briefdescription>
        <detaileddescription>
<para>Works in both xAPIC and x2APIC modes:<itemizedlist>
<listitem><para>In xAPIC mode, the register is memory‑mapped at the LAPIC base address.</para>
</listitem><listitem><para>In x2APIC mode, registers are accessed via MSRs at 0x800 + (reg &gt;&gt; 4).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register offset (e.g. APIC_TPR = 0x80). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Value read from the register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="37" column="10" bodyfile="src/apic.c" bodystart="37" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1ae432e81c207ce0b8e9c880bd3c89eb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t cpu_id</definition>
        <argsstring>(void)</argsstring>
        <name>cpu_id</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the Local APIC ID of the current CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>In xAPIC mode this is an 8-bit value read from the LAPIC ID register. In x2APIC mode this is a 32-bit value read from MSR 0x802.</para>
<para><simplesect kind="return"><para>uint32_t LAPIC ID of the current CPU. </para>
</simplesect>
<simplesect kind="note"><para>LAPIC IDs are assigned by hardware/firmware and may be sparse, non-contiguous, or not zero-based. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="46" column="10" bodyfile="src/apic.c" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1a4b661f6d8fb7bf5b98900736716e6957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t logical_cpu_id</definition>
        <argsstring>(void)</argsstring>
        <name>logical_cpu_id</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the OS-assigned logical CPU ID of the current CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Logical CPU IDs are zero-based, contiguous indices used internally by the kernel. They are mapped to LAPIC IDs via cpu_id_mapping[].</para>
<para><simplesect kind="return"><para>uint8_t Logical CPU ID of the current CPU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="56" column="9" bodyfile="src/apic.c" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1abce401f079aedc55879daff1d981fe74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t rdmsr</definition>
        <argsstring>(uint32_t msr)</argsstring>
        <name>rdmsr</name>
        <param>
          <type>uint32_t</type>
          <declname>msr</declname>
        </param>
        <briefdescription>
<para>Read a 64-bit Model Specific Register (MSR). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msr</parametername>
</parameternamelist>
<parameterdescription>
<para>The MSR address to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t The value read from the MSR. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="60" column="10" bodyfile="src/apic.c" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1a5fd8a52f0de9d5cb7f11abc96af02e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int x2apic_supported</definition>
        <argsstring>(void)</argsstring>
        <name>x2apic_supported</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="68" column="5" bodyfile="src/apic.c" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1abe067e3cf6c101bb76e395bd916e2d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int x2apic_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>x2apic_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Determine if x2APIC mode is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks both CPUID feature flags and the IA32_APIC_BASE MSR to confirm whether x2APIC is active.</para>
<para><simplesect kind="return"><para>int Non-zero if x2APIC mode is enabled, zero otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="78" column="5" bodyfile="src/apic.c" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1a4ed383d44eb512de5ffda7e40b60dd54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apic_send_ipi</definition>
        <argsstring>(uint32_t lapic_id, uint8_t vector)</argsstring>
        <name>apic_send_ipi</name>
        <param>
          <type>uint32_t</type>
          <declname>lapic_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Send an Inter-Processor Interrupt (IPI) to a specific LAPIC ID. </para>
        </briefdescription>
        <detaileddescription>
<para>Supports both xAPIC (ICR registers) and x2APIC (IA32_X2APIC_ICR MSR).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lapic_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination LAPIC ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt vector to deliver. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="87" column="6" bodyfile="src/apic.c" bodystart="87" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1ab9e5a39ff990b4f143ec56a9915f97c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wake_cpu</definition>
        <argsstring>(uint8_t logical_cpu_id)</argsstring>
        <name>wake_cpu</name>
        <param>
          <type>uint8_t</type>
          <declname>logical_cpu_id</declname>
        </param>
        <briefdescription>
<para>Send a wake-up IPI to a target logical CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to wake an Application Processor (AP) from a halted or waiting state. It resolves the kernel-assigned logical CPU ID into the hardware LAPIC ID and then sends a fixed-mode IPI using the predefined wake-up vector (APIC_WAKE_IPI).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logical_cpu_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical CPU ID (zero-based, contiguous index assigned by the kernel).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Local APIC on the target CPU must already be enabled for the wake-up IPI to be accepted. This function assumes that LAPIC initialisation has been performed during CPU bring-up. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="108" column="6" bodyfile="src/apic.c" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="apic_8c_1ad7f4cf430c05d00d25c8c5fb5b030bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apic_setup_ap</definition>
        <argsstring>()</argsstring>
        <name>apic_setup_ap</name>
        <briefdescription>
<para>Initialise the Local APIC on an Application Processor (AP). </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the Local APIC by setting the spurious interrupt vector register&apos;s enable bit, and lowers the Task Priority Register (TPR) to zero so that the AP can receive all interrupts.</para>
<para>It is typically invoked during AP startup after IDT installation, allowing the processor to handle interrupts and inter-processor IPIs.</para>
<para><simplesect kind="note"><para>This does not configure LAPIC timers or IPI handlers; it only ensures that the APIC is enabled and accepting interrupts.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="apic_8h_1a7ba83fbfa8fda429adf009e0bfb6a02a" kindref="member">apic_write</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="lapic__timer_8h_1abad6e91426bdfd1f569bf2cfbe386e49" kindref="member">APIC_SVR</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="apic_8h_1a2545c1ddec7ab80d2de4699ac7f50233" kindref="member">APIC_TPR</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/apic.c" line="112" column="6" bodyfile="src/apic.c" bodystart="112" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/apic.c"/>
  </compounddef>
</doxygen>
