<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="basic_2maths_8c" kind="file" language="C++">
    <compoundname>basic/maths.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <incdepgraph>
      <node id="57">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>basic/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>stdarg.h</label>
      </node>
      <node id="60">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="29">
        <label>basic/validation.h</label>
        <link refid="validation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>basic/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>basic/structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>stdnoreturn.h</label>
      </node>
      <node id="27">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>basic/peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="82">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>basic/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>maths.c</label>
        <link refid="basic_2maths_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="47">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="88">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>basic/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>basic/flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="66">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>basic/builtin_real_functions.h</label>
        <link refid="builtin__real__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="68">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="83">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="85">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>basic/sockets.h</label>
        <link refid="sockets_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>basic/defines.h</label>
        <link refid="defines_8h"/>
      </node>
      <node id="17">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>basic/builtin_integer_functions.h</label>
        <link refid="builtin__integer__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="51">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>basic/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="32">
        <label>basic/builtin_string_functions.h</label>
        <link refid="builtin__string__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>basic/console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>basic/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="33">
        <label>basic/builtin_file_io_functions.h</label>
        <link refid="builtin__file__io__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>scsi.h</label>
        <link refid="scsi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>basic/lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="21">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>basic/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>basic/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="basic_2maths_8c_1aa170566763878c35148ea9f2638e9b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_abs</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_abs</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Calculates the absolute value of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the absolute value of the input number. If the number is negative, it will return the positive equivalent, and if the number is positive, it will return the same value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The absolute value of the number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="7" column="9" bodyfile="src/basic/maths.c" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a61f2356862072ed0b26c976b2e0733b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_sin</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_sin</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the sine of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the sine of the given input (in radians) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard sine function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the sine operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="15" column="6" bodyfile="src/basic/maths.c" bodystart="15" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1ae583990f38cdcad325bb10a589ee00c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_cos</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_cos</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the cosine of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the cosine of the given input (in radians) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard cosine function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the cosine operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="23" column="6" bodyfile="src/basic/maths.c" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a8d25e29c6b8d86342bf578d6e6386f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_realval</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_realval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Converts a value to a real (double) value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the input to a real (double) value and stores the result in the provided <computeroutput>res</computeroutput> pointer. It handles type conversion from integer or string to double.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the conversion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="31" column="6" bodyfile="src/basic/maths.c" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1af7eedc0859b6885bde15748e74f976de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_tan</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_tan</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the tangent of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the tangent of the given input (in radians) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard tangent function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the tangent operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="40" column="6" bodyfile="src/basic/maths.c" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1ac7132232b1580e3e51e1b6aea2d6b556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_pow</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_pow</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the power of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the result of raising the first parameter to the power of the second parameter, and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard power function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the power operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="48" column="6" bodyfile="src/basic/maths.c" bodystart="48" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1ac0b3fe5de59d555eb2668a20a4522593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_sqrt</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_sqrt</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the square root of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the square root of the given input and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard square root function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the square root operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="58" column="6" bodyfile="src/basic/maths.c" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1aab70c7cf93798e7ce936951f77ff9f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_atan</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_atan</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the arctangent of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the arctangent (inverse tangent) of the given input (in radians) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard arctangent function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the arctangent operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="67" column="6" bodyfile="src/basic/maths.c" bodystart="67" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a83866626b0d2fedc0ed86732bae578ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_atan2</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_atan2</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the arctangent of two numbers. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the arctangent of two numbers (y/x) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard two-argument arctangent function in the math library, useful for handling all quadrants of a coordinate system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the arctangent operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="75" column="6" bodyfile="src/basic/maths.c" bodystart="75" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a24897bfbdacceb149cb19a6e555ddea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_ceil</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_ceil</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the ceiling of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the smallest integer greater than or equal to the given input and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard ceiling function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the ceiling operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="86" column="6" bodyfile="src/basic/maths.c" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a6433f720cf8717a2c8760bb41f5b71ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_round</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_round</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Rounds a number to the nearest integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function rounds the given input to the nearest integer and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard round function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the rounding operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="94" column="6" bodyfile="src/basic/maths.c" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a28cf0f4b46614c79b75bb449ee813353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_fmod</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_fmod</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the remainder of a division. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the remainder when dividing the first number by the second, and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard floating-point modulus function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the modulus operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="102" column="6" bodyfile="src/basic/maths.c" bodystart="102" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a8ee3bc48d89dce6438a4567453e16c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_random</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_random</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Generates a random number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates a random number between 0 and 32767 (inclusive). It can be used to introduce randomness into the program.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A random integer between 0 and 32767 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="118" column="9" bodyfile="src/basic/maths.c" bodystart="118" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1ad33e406d64edc962d069ffeecb518e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_asc</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_asc</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Returns the ASCII value of the first character of a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes a string and returns the ASCII value of its first character. If the string is empty, it returns 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ASCII value of the first character of the string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="130" column="9" bodyfile="src/basic/maths.c" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1acec189e89abfedbc1303781f0f708e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_val</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_val</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Converts a string to its numerical value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the provided string representation of a number to its numerical equivalent (either integer or floating point).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The numerical value of the string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="138" column="9" bodyfile="src/basic/maths.c" bodystart="138" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1ab096fbf99da97d870adaaace45f99f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_hexval</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_hexval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Converts a hexadecimal string to its integer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the provided hexadecimal string to its integer equivalent. The string should represent a valid hexadecimal number, optionally prefixed with &quot;&amp;&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer equivalent of the hexadecimal string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="146" column="9" bodyfile="src/basic/maths.c" bodystart="146" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a325120ffce1738ef4a82e8d754d526d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_octval</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_octval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Converts an octal string to its integer value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the provided octal string to its integer equivalent. The string should represent a valid octal number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer equivalent of the octal string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="154" column="9" bodyfile="src/basic/maths.c" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a52632225eca3987ad4aff7a73fceaefe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_atoi</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_atoi</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Converts a string to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the provided string representation of a number to its integer equivalent. It will ignore any leading spaces and handle the conversion from decimal format.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer equivalent of the string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="162" column="9" bodyfile="src/basic/maths.c" bodystart="162" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a30a4d506eac9bb85bb7e80bcad066bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_shl</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_shl</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Shifts a number left by a specified number of bits. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a bitwise left shift operation on an integer by the number of bits specified by the second operand. It is equivalent to multiplying the number by 2 for each bit position shifted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the left shift operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="189" column="9" bodyfile="src/basic/maths.c" bodystart="189" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1af5e91bf7cb23f7c2741bf52afc7cc03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_shr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_shr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Shifts a number right by a specified number of bits. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs a bitwise right shift operation on an integer by the number of bits specified by the second operand. It is equivalent to dividing the number by 2 for each bit position shifted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the right shift operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="200" column="9" bodyfile="src/basic/maths.c" bodystart="200" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a05c1ce1d07b993636317a96f4665c45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_asn</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_asn</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the arcsine of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the arcsine (inverse sine) of the given input (in radians) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard arcsine function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the arcsine operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="211" column="6" bodyfile="src/basic/maths.c" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a9344d8d2343696d240546e2a02659876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_acs</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_acs</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the arccosine of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the arccosine (inverse cosine) of the given input (in radians) and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard arccosine function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the arccosine operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="224" column="6" bodyfile="src/basic/maths.c" bodystart="224" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1afae2ebe74ce61e54c688baca6001a974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_exp</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_exp</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the exponential of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the exponential of the given input, which is the constant <computeroutput>e</computeroutput> raised to the power of the input, and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard exponential function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the exponential operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="237" column="6" bodyfile="src/basic/maths.c" bodystart="237" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a4b3e264a2092d7cc83562d60ff36da5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_log</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_log</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the natural logarithm of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the natural logarithm (base <computeroutput>e</computeroutput>) of the given input and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a wrapper around the standard logarithm function in the math library.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the logarithmic operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="245" column="6" bodyfile="src/basic/maths.c" bodystart="245" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a4945e524c1f5b43ac3974a6b0ebe77a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_deg</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_deg</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Converts a number from radians to degrees. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the given input (in radians) to degrees and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a simple calculation using the formula <computeroutput>degrees = radians * (180 / π)</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the conversion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="258" column="6" bodyfile="src/basic/maths.c" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a285d946013d6a6b13a28820366e0ae70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_rad</definition>
        <argsstring>(struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_rad</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Converts a number from degrees to radians. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the given input (in degrees) to radians and stores the result in the provided <computeroutput>res</computeroutput> pointer. It is a simple calculation using the formula <computeroutput>radians = degrees * (π / 180)</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpreter context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result of the conversion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="266" column="6" bodyfile="src/basic/maths.c" bodystart="266" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a0b282667da9f85ea7db8555a46c7135e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_sgn</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_sgn</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Returns the sign of a number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns 1 if the number is positive, -1 if it is negative, and 0 if it is zero. It can be used to determine whether a number is positive, negative, or zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sign of the number (1, -1, or 0) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="274" column="9" bodyfile="src/basic/maths.c" bodystart="274" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="basic_2maths_8c_1a71e8aa72c0bb2df1c1b105c36026cee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_int</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_int</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Rounds a number to the nearest integer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function rounds the provided number to the nearest integer. If the number is halfway between two integers, it rounds up to the next higher integer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The rounded integer value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/maths.c" line="286" column="9" bodyfile="src/basic/maths.c" bodystart="286" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>BASIC maths functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/basic/maths.c"/>
  </compounddef>
</doxygen>
