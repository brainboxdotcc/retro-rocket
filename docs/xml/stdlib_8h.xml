<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stdlib_8h" kind="file" language="C++">
    <compoundname>stdlib.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="kernel_8h" local="yes">kernel.h</includedby>
    <includedby refid="stb__image_8h" local="no">stb_image.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="123">
        <label>memcpy.c</label>
        <link refid="memcpy_8c"/>
      </node>
      <node id="72">
        <label>console.c</label>
        <link refid="console_8c"/>
      </node>
      <node id="85">
        <label>reflection.c</label>
        <link refid="reflection_8c"/>
      </node>
      <node id="108">
        <label>main.c</label>
        <link refid="fs_2fat32_2main_8c"/>
      </node>
      <node id="104">
        <label>createfile.c</label>
        <link refid="fat32_2createfile_8c"/>
      </node>
      <node id="50">
        <label>helpers.c</label>
        <link refid="helpers_8c"/>
      </node>
      <node id="89">
        <label>tokenizer.c</label>
        <link refid="tokenizer_8c"/>
      </node>
      <node id="96">
        <label>errorhandler.c</label>
        <link refid="errorhandler_8c"/>
      </node>
      <node id="42">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>cluster.c</label>
        <link refid="cluster_8c"/>
      </node>
      <node id="113">
        <label>filesystem.c</label>
        <link refid="filesystem_8c"/>
      </node>
      <node id="90">
        <label>variable.c</label>
        <link refid="variable_8c"/>
      </node>
      <node id="55">
        <label>unlinkdirectory.c</label>
        <link refid="unlinkdirectory_8c"/>
      </node>
      <node id="3">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>random.c</label>
        <link refid="random_8c"/>
      </node>
      <node id="5">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>net.c</label>
        <link refid="net_8c"/>
      </node>
      <node id="17">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>interrupt.c</label>
        <link refid="interrupt_8c"/>
      </node>
      <node id="65">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>printf.c</label>
        <link refid="printf_8c"/>
      </node>
      <node id="78">
        <label>function.c</label>
        <link refid="function_8c"/>
      </node>
      <node id="29">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>taskswitch.c</label>
        <link refid="taskswitch_8c"/>
      </node>
      <node id="21">
        <label>hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="132">
        <label>queue.c</label>
        <link refid="queue_8c"/>
      </node>
      <node id="11">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>fsmap.c</label>
        <link refid="fsmap_8c"/>
      </node>
      <node id="14">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>input.c</label>
        <link refid="input_8c"/>
      </node>
      <node id="47">
        <label>format.c</label>
        <link refid="format_8c"/>
      </node>
      <node id="139">
        <label>stdlib.c</label>
        <link refid="stdlib_8c"/>
      </node>
      <node id="112">
        <label>writefile.c</label>
        <link refid="fat32_2writefile_8c"/>
      </node>
      <node id="83">
        <label>maths.c</label>
        <link refid="basic_2maths_8c"/>
      </node>
      <node id="129">
        <label>icmp.c</label>
        <link refid="icmp_8c"/>
      </node>
      <node id="91">
        <label>buddy_allocator.c</label>
        <link refid="buddy__allocator_8c"/>
      </node>
      <node id="57">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>ip.c</label>
        <link refid="ip_8c"/>
      </node>
      <node id="120">
        <label>keyboard.c</label>
        <link refid="keyboard_8c"/>
      </node>
      <node id="74">
        <label>debugger.c</label>
        <link refid="basic_2debugger_8c"/>
      </node>
      <node id="1">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>createfile.c</label>
        <link refid="retrofs_2createfile_8c"/>
      </node>
      <node id="76">
        <label>file_io.c</label>
        <link refid="file__io_8c"/>
      </node>
      <node id="53">
        <label>truncatefile.c</label>
        <link refid="retrofs_2truncatefile_8c"/>
      </node>
      <node id="93">
        <label>debug_ringbuffer.c</label>
        <link refid="debug__ringbuffer_8c"/>
      </node>
      <node id="102">
        <label>devfs.c</label>
        <link refid="devfs_8c"/>
      </node>
      <node id="101">
        <label>debuglog.c</label>
        <link refid="debuglog_8c"/>
      </node>
      <node id="126">
        <label>descriptor.c</label>
        <link refid="descriptor_8c"/>
      </node>
      <node id="86">
        <label>sockets.c</label>
        <link refid="sockets_8c"/>
      </node>
      <node id="143">
        <label>video.c</label>
        <link refid="video_8c"/>
      </node>
      <node id="54">
        <label>unlink.c</label>
        <link refid="unlink_8c"/>
      </node>
      <node id="66">
        <label>acpi.c</label>
        <link refid="acpi_8c"/>
      </node>
      <node id="79">
        <label>graphics.c</label>
        <link refid="graphics_8c"/>
      </node>
      <node id="122">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="51">
        <label>main.c</label>
        <link refid="fs_2retrofs_2main_8c"/>
      </node>
      <node id="35">
        <label>e1000.c</label>
        <link refid="e1000_8c"/>
      </node>
      <node id="94">
        <label>debugger.c</label>
        <link refid="debugger_8c"/>
      </node>
      <node id="75">
        <label>double_expression.c</label>
        <link refid="double__expression_8c"/>
      </node>
      <node id="142">
        <label>timer.c</label>
        <link refid="timer_8c"/>
      </node>
      <node id="8">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>pci.c</label>
        <link refid="pci_8c"/>
      </node>
      <node id="80">
        <label>int_expression.c</label>
        <link refid="int__expression_8c"/>
      </node>
      <node id="41">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>fb.c</label>
        <link refid="fb_8c"/>
      </node>
      <node id="125">
        <label>debug.c</label>
        <link refid="debug_8c"/>
      </node>
      <node id="71">
        <label>array.c</label>
        <link refid="array_8c"/>
      </node>
      <node id="23">
        <label>initialisation-functions.h</label>
        <link refid="initialisation-functions_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>arp.c</label>
        <link refid="arp_8c"/>
      </node>
      <node id="18">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>lfn.c</label>
        <link refid="lfn_8c"/>
      </node>
      <node id="59">
        <label>serial.c</label>
        <link refid="serial_8c"/>
      </node>
      <node id="58">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>fpu.c</label>
        <link refid="fpu_8c"/>
      </node>
      <node id="119">
        <label>ioapic.c</label>
        <link refid="ioapic_8c"/>
      </node>
      <node id="22">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>kmalloc.c</label>
        <link refid="kmalloc_8c"/>
      </node>
      <node id="116">
        <label>gdt.c</label>
        <link refid="gdt_8c"/>
      </node>
      <node id="36">
        <label>mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="127">
        <label>dhcp.c</label>
        <link refid="dhcp_8c"/>
      </node>
      <node id="34">
        <label>mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>lowlevel.c</label>
        <link refid="lowlevel_8c"/>
      </node>
      <node id="70">
        <label>ata.c</label>
        <link refid="ata_8c"/>
      </node>
      <node id="49">
        <label>getdirectory.c</label>
        <link refid="getdirectory_8c"/>
      </node>
      <node id="88">
        <label>string_expression.c</label>
        <link refid="string__expression_8c"/>
      </node>
      <node id="64">
        <label>tinyalloc.c</label>
        <link refid="tinyalloc_8c"/>
      </node>
      <node id="73">
        <label>datetime.c</label>
        <link refid="datetime_8c"/>
      </node>
      <node id="138">
        <label>rtl8139.c</label>
        <link refid="rtl8139_8c"/>
      </node>
      <node id="77">
        <label>flow_control.c</label>
        <link refid="flow__control_8c"/>
      </node>
      <node id="32">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>idt.c</label>
        <link refid="idt_8c"/>
      </node>
      <node id="115">
        <label>ramdisk.c</label>
        <link refid="ramdisk_8c"/>
      </node>
      <node id="24">
        <label>init.c</label>
        <link refid="init_8c"/>
      </node>
      <node id="62">
        <label>tinyalloc.h</label>
        <link refid="tinyalloc_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>iso9660.c</label>
        <link refid="iso9660_8c"/>
      </node>
      <node id="133">
        <label>tcp.c</label>
        <link refid="tcp_8c"/>
      </node>
      <node id="45">
        <label>createdirectory.c</label>
        <link refid="createdirectory_8c"/>
      </node>
      <node id="134">
        <label>udp.c</label>
        <link refid="udp_8c"/>
      </node>
      <node id="106">
        <label>fat.c</label>
        <link refid="fat_8c"/>
      </node>
      <node id="16">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>flanterm.c</label>
        <link refid="flanterm_8c"/>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>apic.c</label>
        <link refid="apic_8c"/>
      </node>
      <node id="33">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="9">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>ap.c</label>
        <link refid="ap_8c"/>
      </node>
      <node id="20">
        <label>devicename.c</label>
        <link refid="devicename_8c"/>
      </node>
      <node id="114">
        <label>partition.c</label>
        <link refid="partition_8c"/>
      </node>
      <node id="60">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>unlinkfile.c</label>
        <link refid="unlinkfile_8c"/>
      </node>
      <node id="84">
        <label>process.c</label>
        <link refid="process_8c"/>
      </node>
      <node id="87">
        <label>string.c</label>
        <link refid="basic_2string_8c"/>
      </node>
      <node id="19">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>main.c</label>
        <link refid="basic_2main_8c"/>
      </node>
      <node id="105">
        <label>directory.c</label>
        <link refid="directory_8c"/>
      </node>
      <node id="109">
        <label>readfile.c</label>
        <link refid="fat32_2readfile_8c"/>
      </node>
      <node id="26">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>ethernet.c</label>
        <link refid="ethernet_8c"/>
      </node>
      <node id="110">
        <label>truncatefile.c</label>
        <link refid="fat32_2truncatefile_8c"/>
      </node>
      <node id="128">
        <label>dns.c</label>
        <link refid="dns_8c"/>
      </node>
      <node id="6">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="67">
        <label>ahci.c</label>
        <link refid="ahci_8c"/>
      </node>
      <node id="40">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>string.c</label>
        <link refid="string_8c"/>
      </node>
      <node id="121">
        <label>lapic_timer.c</label>
        <link refid="lapic__timer_8c"/>
      </node>
      <node id="144">
        <label>stb_image.h</label>
        <link refid="stb__image_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>installer.c</label>
        <link refid="installer_8c"/>
      </node>
      <node id="95">
        <label>drawing.c</label>
        <link refid="drawing_8c"/>
      </node>
      <node id="44">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>writefile.c</label>
        <link refid="retrofs_2writefile_8c"/>
      </node>
      <node id="52">
        <label>readfile.c</label>
        <link refid="retrofs_2readfile_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structdiv__t" prot="public">div_t</innerclass>
    <innerclass refid="structldiv__t" prot="public">ldiv_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stdlib_8h_1ab5882ff73ce0e6010ad1a26c7b04ac74" prot="public" static="no">
        <type>char</type>
        <definition>typedef char schar_t</definition>
        <argsstring></argsstring>
        <name>schar_t</name>
        <briefdescription>
<para>Alias type for signed char (used in stubs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="35" column="14" bodyfile="include/stdlib.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stdlib_8h_1ab017280f95ea769b9422688105f02653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double strtod</definition>
        <argsstring>(const char *str, char **endptr)</argsstring>
        <name>strtod</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
<para>Convert string to double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store end of parsed string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double Converted value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="44" column="8" bodyfile="src/stdlib.c" bodystart="35" bodyend="45" declfile="include/stdlib.h" declline="44" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a2ce966cd04da3c32320f54c332569e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int strtol</definition>
        <argsstring>(const char *str, char **endptr, int base)</argsstring>
        <name>strtol</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Convert string to long integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store end of parsed string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical base (e.g. 10, 16) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>long int Converted value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="54" column="10" bodyfile="src/stdlib.c" bodystart="47" bodyend="125" declfile="include/stdlib.h" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1aa7d767d03ce3929978c28f64e3a4b222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int strtoul</definition>
        <argsstring>(const char *str, char **endptr, int base)</argsstring>
        <name>strtoul</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Convert string to unsigned long integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store end of parsed string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical base (e.g. 10, 16) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned long int Converted value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="64" column="19" bodyfile="src/stdlib.c" bodystart="127" bodyend="191" declfile="include/stdlib.h" declline="64" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a8dec7c95227ff149687066cf04029191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void abort</definition>
        <argsstring>(void)</argsstring>
        <name>abort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Terminate the program abnormally. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="69" column="6" bodyfile="src/stdlib.c" bodystart="193" bodyend="196" declfile="include/stdlib.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a7fd89c82095df80e5e12d6b2834a2acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int atexit</definition>
        <argsstring>(void(*func)(void))</argsstring>
        <name>atexit</name>
        <param>
          <type>void(*)(void)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Register a function to be called at program exit. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Stub only. Retro Rocket does not have a concept of process termination for C programs, so this function does nothing.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Exit handler (ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Always returns 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="80" column="5" bodyfile="src/stdlib.c" bodystart="198" bodyend="202" declfile="include/stdlib.h" declline="80" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a55e99c539cf7723ec15e856b7e0a8cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void exit</definition>
        <argsstring>(int status)</argsstring>
        <name>exit</name>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Terminate the program with status. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Stub only. Retro Rocket does not execute standalone C programs, so this function does nothing.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Exit code (ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="90" column="6" bodyfile="src/stdlib.c" bodystart="204" bodyend="207" declfile="include/stdlib.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1abc6595dbf6880c71628fecf0dbb23d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* getenv</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getenv</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the value of an environment variable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Stub only. Retro Rocket is a non-POSIX system with no environment variables. Always returns NULL.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the environment variable (ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* Always NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="101" column="6" bodyfile="src/stdlib.c" bodystart="209" bodyend="213" declfile="include/stdlib.h" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a8b0abd498c08f782b325e8532254e962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int system</definition>
        <argsstring>(const char *string)</argsstring>
        <name>system</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Execute a shell command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Stub only. Retro Rocket cannot execute native programs. Always returns -1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>Command string (ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Always -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="112" column="5" bodyfile="src/stdlib.c" bodystart="215" bodyend="219" declfile="include/stdlib.h" declline="112" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1afd5b630e6f7c6e5086faacda3318c6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* bsearch</definition>
        <argsstring>(const void *key, const void *base, size_t nitems, size_t size, int(*compar)(const void *, const void *))</argsstring>
        <name>bsearch</name>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compar</declname>
        </param>
        <briefdescription>
<para>Binary search. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to search for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Array base pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items in array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compar</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* Pointer to found element or NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="125" column="6" bodyfile="src/stdlib.c" bodystart="221" bodyend="225" declfile="include/stdlib.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a79efb4dc28444ab3aced96754d4b69ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void qsort</definition>
        <argsstring>(void *base, size_t nitems, size_t size, int(*compar)(const void *, const void *))</argsstring>
        <name>qsort</name>
        <param>
          <type>void *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compar</declname>
        </param>
        <briefdescription>
<para>Quicksort. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Array base pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compar</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="136" column="6" bodyfile="src/stdlib.c" bodystart="543" bodyend="561" declfile="include/stdlib.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a4476a5dc418924ee3ad18ce699581dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdiv__t" kindref="compound">div_t</ref></type>
        <definition>div_t div</definition>
        <argsstring>(int numer, int denom)</argsstring>
        <name>div</name>
        <param>
          <type>int</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Divide two integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numer</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denom</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdiv__t" kindref="compound">div_t</ref> Quotient and remainder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="146" column="7" bodyfile="src/stdlib.c" bodystart="563" bodyend="569" declfile="include/stdlib.h" declline="146" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1aa7cf95c9fb9326be083259f896acfc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structldiv__t" kindref="compound">ldiv_t</ref></type>
        <definition>ldiv_t ldiv</definition>
        <argsstring>(long int numer, long int denom)</argsstring>
        <name>ldiv</name>
        <param>
          <type>long int</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>long int</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Divide two long integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numer</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denom</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structldiv__t" kindref="compound">ldiv_t</ref> Quotient and remainder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="155" column="8" bodyfile="src/stdlib.c" bodystart="571" bodyend="577" declfile="include/stdlib.h" declline="155" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1ae23144bcbb8e3742b00eb687c36654d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rand</definition>
        <argsstring>(void)</argsstring>
        <name>rand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Generate a pseudo-random number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Pseudo-random number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="162" column="5" bodyfile="src/stdlib.c" bodystart="587" bodyend="591" declfile="include/stdlib.h" declline="162" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a83a727cc697aea22e24cad5f39198dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void srand</definition>
        <argsstring>(unsigned int seed)</argsstring>
        <name>srand</name>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Seed the random number generator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="169" column="6" bodyfile="src/stdlib.c" bodystart="579" bodyend="585" declfile="include/stdlib.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1ad9cf9e32bd0f978d081907297dff8822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mblen</definition>
        <argsstring>(const char *str, size_t n)</argsstring>
        <name>mblen</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Determine the number of bytes in the next multibyte character. </para>
        </briefdescription>
        <detaileddescription>
<para>Minimal implementation: always returns 0 or 1 depending on whether *str is &apos;\0&apos;. Assumes single-byte encoding.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the multibyte string to examine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to inspect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if str is NULL or points to &apos;\0&apos;, otherwise 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="181" column="5" bodyfile="src/stdlib.c" bodystart="595" bodyend="600" declfile="include/stdlib.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a0c01be10218767784680ca9654c25da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mbstowcs</definition>
        <argsstring>(wchar_t *pwcs, const char *str, size_t n)</argsstring>
        <name>mbstowcs</name>
        <param>
          <type>wchar_t *</type>
          <declname>pwcs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert a multibyte string to a wide-character string. </para>
        </briefdescription>
        <detaileddescription>
<para>Minimal implementation: treats each byte as one wide character.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pwcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer for wide characters (may be NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Source multibyte string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of wide characters to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of wide characters written (excluding terminator). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="193" column="8" bodyfile="src/stdlib.c" bodystart="602" bodyend="616" declfile="include/stdlib.h" declline="193" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a3e53443f6f3cee3255cc2b43bddf5627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mbtowc</definition>
        <argsstring>(wchar_t *pwc, const char *str, size_t n)</argsstring>
        <name>mbtowc</name>
        <param>
          <type>wchar_t *</type>
          <declname>pwc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert the next multibyte character to a wide character. </para>
        </briefdescription>
        <detaileddescription>
<para>Minimal implementation: promotes the byte to wchar_t.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pwc</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination wide character (may be NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Source multibyte character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to inspect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes consumed (0 if str is NULL or empty). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="205" column="5" bodyfile="src/stdlib.c" bodystart="618" bodyend="628" declfile="include/stdlib.h" declline="205" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1aa2ef4b7026332a8d40d9340870d7a400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t wcstombs</definition>
        <argsstring>(char *str, const wchar_t *pwcs, size_t n)</argsstring>
        <name>wcstombs</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>pwcs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert a wide-character string to a multibyte string. </para>
        </briefdescription>
        <detaileddescription>
<para>Minimal implementation: truncates each wide character to the low 8 bits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer for multibyte string (may be NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pwcs</parametername>
</parameternamelist>
<parameterdescription>
<para>Source wide-character string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written (excluding terminator). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="217" column="8" bodyfile="src/stdlib.c" bodystart="630" bodyend="644" declfile="include/stdlib.h" declline="217" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="stdlib_8h_1a44f1616f3ea0c21a5c603b68dac56ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wctomb</definition>
        <argsstring>(char *str, wchar_t wchar)</argsstring>
        <name>wctomb</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>wchar</declname>
        </param>
        <briefdescription>
<para>Convert a wide character to a multibyte sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>Minimal implementation: writes the low 8 bits as a single byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer for multibyte sequence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wchar</parametername>
</parameternamelist>
<parameterdescription>
<para>Source wide character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes written (1), or 0 if str is NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/stdlib.h" line="228" column="5" bodyfile="src/stdlib.c" bodystart="646" bodyend="652" declfile="include/stdlib.h" declline="228" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Minimal standard library stubs for Retro Rocket. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Craig Edwards </para>
</simplesect>
<simplesect kind="date"><para>2023-05-27 </para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2023</para>
</simplesect>
Provides a reduced subset of C standard library functions. Many functions are provided only as stubs for compatibility. Multibyte and wide-character conversions are not supported. </para>
    </detaileddescription>
    <location file="include/stdlib.h"/>
  </compounddef>
</doxygen>
