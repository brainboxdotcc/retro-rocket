<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="SOCKWRITE" kind="page">
    <compoundname>SOCKWRITE</compoundname>
    <title>SOCKWRITE Keyword</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".basic"><codeline><highlight class="normal">SOCKWRITE<sp/>integer-variable,<sp/>printable</highlight></codeline>
</programlisting></para>
<para>Writes data to an <bold>open TCP socket</bold>. <linebreak/>
 The first parameter must be an <bold>integer variable</bold> holding a valid socket handle (as created earlier with <computeroutput>CONNECT</computeroutput>). <linebreak/>
 The second parameter, <computeroutput>printable</computeroutput>, follows the <bold>same formatting rules as <computeroutput>PRINT</computeroutput></bold>.</para>
<para><hruler/>
</para>
<sect1 id="SOCKWRITE_1formatting-semantics-same-as-print_1s1"><sect2 id="SOCKWRITE_1formatting-semantics-same-as-print_1s2"><sect3 id="SOCKWRITE_1formatting-semantics-same-as-print">
<title>Formatting semantics (same as <computeroutput>PRINT</computeroutput>)</title><para><itemizedlist>
<listitem><para>You may pass <bold>numbers</bold> or <bold>strings</bold>; numbers are converted to text.</para>
</listitem><listitem><para>Multiple items can be separated by <bold><computeroutput>;</computeroutput></bold> or <bold><computeroutput>,</computeroutput></bold>:<itemizedlist>
<listitem><para><computeroutput>;</computeroutput> writes the next item <bold>immediately</bold> with <bold>no extra spacing</bold>, and if it is the <bold>last</bold> thing on the line, <bold>suppresses the newline</bold>.</para>
</listitem><listitem><para><computeroutput>,</computeroutput> advances to the next <bold>print zone</bold> (tab stop) before writing the next item. This inserts <bold>spaces</bold>, not a literal comma.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>With <bold>no trailing <computeroutput>;</computeroutput> or <computeroutput>,</computeroutput></bold>, a newline is appended automatically (same newline as <computeroutput>PRINT</computeroutput>).</para>
</listitem><listitem><para>If you need protocol-specific line endings (for example <bold>CRLF</bold>), append them explicitly with <computeroutput>CHR$(13) + CHR$(10)</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>A comma in <computeroutput>SOCKWRITE</computeroutput> does <bold>not</bold> send the character <computeroutput>,</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>It inserts spaces to the next print zone. </para>
</simplesect>
<simplesect kind="note"><para>If you need a real comma on the wire, include it in the string: </para>
</simplesect>
<simplesect kind="note"><para><computeroutput>basic @note SOCKWRITE S, &quot;A,B,C&quot; @note </computeroutput></para>
</simplesect>
<hruler/>
</para>
</sect3></sect2></sect1>
<sect1 id="SOCKWRITE_1examples-167_1s1"><sect2 id="SOCKWRITE_1examples-167_1s2"><sect3 id="SOCKWRITE_1examples-167">
<title>Examples</title><para><bold>Build a line without the implicit newline, then add CRLF</bold> <programlisting filename=".basic"><codeline><highlight class="normal">REM<sp/>Assume<sp/>S<sp/>is<sp/>a<sp/>valid<sp/>socket<sp/>handle</highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>&quot;USER<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>&quot;guest&quot;;</highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>CHR$(13)<sp/>+<sp/>CHR$(10)</highlight></codeline>
</programlisting></para>
<para><bold>Send numbers and strings together</bold> <programlisting filename=".basic"><codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>&quot;X=&quot;;<sp/></highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>42;<sp/></highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>&quot;<sp/>Y=&quot;;<sp/></highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>99;<sp/></highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>CHR$(10)</highlight></codeline>
</programlisting></para>
<para><bold>Avoid print zones; send a literal CSV</bold> <programlisting filename=".basic"><codeline><highlight class="normal">REM<sp/>not:<sp/>SOCKWRITE<sp/>S,<sp/>&quot;alpha&quot;,<sp/>&quot;beta&quot;,<sp/>&quot;gamma&quot;</highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>&quot;alpha,beta,gamma&quot;</highlight></codeline>
</programlisting></para>
<para><bold>Error handling around a write</bold> <programlisting filename=".basic"><codeline><highlight class="normal">ON<sp/>ERROR<sp/>PROCnet_err</highlight></codeline>
<codeline><highlight class="normal">SOCKWRITE<sp/>S,<sp/>&quot;PING&quot;<sp/>+<sp/>CHR$(10)</highlight></codeline>
<codeline><highlight class="normal">ON<sp/>ERROR<sp/>OFF</highlight></codeline>
<codeline><highlight class="normal">END</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">DEF<sp/>PROCnet_err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Write<sp/>failed:<sp/>&quot;;<sp/>ERR$</highlight></codeline>
<codeline><highlight class="normal">ENDPROC</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3></sect2></sect1>
<sect1 id="SOCKWRITE_1notes-172_1s1"><sect2 id="SOCKWRITE_1notes-172_1s2"><sect3 id="SOCKWRITE_1notes-172">
<title>Notes</title><para><itemizedlist>
<listitem><para>Do <bold>not</bold> pass a literal or expression as the handle; use an integer <bold>variable</bold> that contains the handle.</para>
</listitem><listitem><para>After you close the socket with <computeroutput>SOCKCLOSE</computeroutput>, the handle is invalid for further <computeroutput>SOCKWRITE</computeroutput> calls.</para>
</listitem><listitem><para><computeroutput>SOCKWRITE</computeroutput> sends exactly what <computeroutput>PRINT</computeroutput> would have produced for the same arguments; use <computeroutput>CHR$</computeroutput> to embed control characters when needed.</para>
</listitem></itemizedlist>
</para>
<para><bold>See also:</bold> <linebreak/>
 <ref refid="PRINT" kindref="compound">PRINT</ref> · <ref refid="SOCKREAD" kindref="compound">SOCKREAD</ref> · <ref refid="SOCKCLOSE" kindref="compound">SOCKCLOSE</ref> · <ref refid="CONNECT" kindref="compound">CONNECT</ref> </para>
</sect3></sect2></sect1>
    </detaileddescription>
    <location file="docpages/basic-language-reference/keywords/SOCKWRITE.md"/>
  </compounddef>
</doxygen>
