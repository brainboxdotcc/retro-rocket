<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="map_8c" kind="file" language="C++">
    <compoundname>map.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <incdepgraph>
      <node id="57">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>basic/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>stdarg.h</label>
      </node>
      <node id="60">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="29">
        <label>basic/validation.h</label>
        <link refid="validation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>basic/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>basic/structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>stdnoreturn.h</label>
      </node>
      <node id="27">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>basic/peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="84">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>basic/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="47">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="90">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>basic/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>basic/flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="66">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>basic/builtin_real_functions.h</label>
        <link refid="builtin__real__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="68">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="85">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="87">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>basic/sockets.h</label>
        <link refid="sockets_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>basic/defines.h</label>
        <link refid="defines_8h"/>
      </node>
      <node id="17">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>basic/builtin_integer_functions.h</label>
        <link refid="builtin__integer__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="51">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>basic/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="32">
        <label>basic/builtin_string_functions.h</label>
        <link refid="builtin__string__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>basic/console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>basic/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="33">
        <label>basic/builtin_file_io_functions.h</label>
        <link refid="builtin__file__io__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>scsi.h</label>
        <link refid="scsi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>basic/lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/containers/map.c</label>
        <link refid="map_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="21">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>basic/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>basic/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structmap__soa" prot="public">map_soa</innerclass>
    <innerclass refid="structmap" prot="public">map</innerclass>
    <innerclass refid="structmap__iter" prot="public">map_iter</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="map_8c_1a97d0f0d47cc93e1de4119bf1173abf99" prot="public" static="no" strong="no">
        <type></type>
        <name>rb_colour</name>
        <enumvalue id="map_8c_1a97d0f0d47cc93e1de4119bf1173abf99a4c2b066fa67c57701ab221e9469145de" prot="public">
          <name>RB_RED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="map_8c_1a97d0f0d47cc93e1de4119bf1173abf99a01e52e8a460dcfe9e7f37354ef1d1f0f" prot="public">
          <name>RB_BLACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="3" column="1" bodyfile="src/containers/map.c" bodystart="3" bodyend="6"/>
      </memberdef>
      <memberdef kind="enum" id="map_8c_1a691d8b62aab93aba0712e3db11d98d71" prot="public" static="no" strong="no">
        <type></type>
        <name>iter_state</name>
        <enumvalue id="map_8c_1a691d8b62aab93aba0712e3db11d98d71a521501f736f91d4bbc7efd7031166959" prot="public">
          <name>ITER_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="map_8c_1a691d8b62aab93aba0712e3db11d98d71a1856f0cf45da00073eb694f0e855658a" prot="public">
          <name>ITER_END</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="map_8c_1a691d8b62aab93aba0712e3db11d98d71a446a02e68efd7a178a1775eeafeaeaa9" prot="public">
          <name>ITER_BEFORE_BEGIN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="26" column="1" bodyfile="src/containers/map.c" bodystart="26" bodyend="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="map_8c_1a7f452c50f965e05ee6be257042ed96f6" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t NIL</definition>
        <argsstring></argsstring>
        <name>NIL</name>
        <initializer>= (size_t)-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="38" column="21" bodyfile="src/containers/map.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="map_8c_1a8a7359c00670a1dede154e4e4938f21a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int rd_colour</definition>
        <argsstring>(const vector *v, size_t i)</argsstring>
        <name>rd_colour</name>
        <param>
          <type>const <ref refid="structvector" kindref="compound">vector</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="40" column="12" bodyfile="src/containers/map.c" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a0cb345f75ac7fcec4faa53f5a4d3dc24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wr_colour</definition>
        <argsstring>(vector *v, size_t i, int colour)</argsstring>
        <name>wr_colour</name>
        <param>
          <type><ref refid="structvector" kindref="compound">vector</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="44" column="13" bodyfile="src/containers/map.c" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a7fe6b4c88e90bd1c8e94314d79eb9902" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t rd_idx</definition>
        <argsstring>(const vector *v, size_t i)</argsstring>
        <name>rd_idx</name>
        <param>
          <type>const <ref refid="structvector" kindref="compound">vector</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="48" column="15" bodyfile="src/containers/map.c" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a1a77b28c04400cd1f8ae9d007806a264" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wr_idx</definition>
        <argsstring>(vector *v, size_t i, size_t value)</argsstring>
        <name>wr_idx</name>
        <param>
          <type><ref refid="structvector" kindref="compound">vector</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="52" column="13" bodyfile="src/containers/map.c" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a379031ce0e76bec86dbb89ef8bf4e403" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>static uintptr_t rd_up</definition>
        <argsstring>(const vector *v, size_t i)</argsstring>
        <name>rd_up</name>
        <param>
          <type>const <ref refid="structvector" kindref="compound">vector</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="56" column="18" bodyfile="src/containers/map.c" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ae709b1df0a108ef5d5bd2600df4f16cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void wr_up</definition>
        <argsstring>(vector *v, size_t i, uintptr_t value)</argsstring>
        <name>wr_up</name>
        <param>
          <type><ref refid="structvector" kindref="compound">vector</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="60" column="13" bodyfile="src/containers/map.c" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ae3ac89f05238174149ddf1062ee6739e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int soa_push_blank</definition>
        <argsstring>(map_soa *a)</argsstring>
        <name>soa_push_blank</name>
        <param>
          <type><ref refid="structmap__soa" kindref="compound">map_soa</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="66" column="12" bodyfile="src/containers/map.c" bodystart="66" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a76e3623e2a8af95c9cf052e4dde77fb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t soa_size</definition>
        <argsstring>(const map_soa *a)</argsstring>
        <name>soa_size</name>
        <param>
          <type>const <ref refid="structmap__soa" kindref="compound">map_soa</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="88" column="15" bodyfile="src/containers/map.c" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a798a31f6093d65cc9ae3b215ed0c195f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap" kindref="compound">map</ref> *</type>
        <definition>map* map_create</definition>
        <argsstring>(map_keycmp cmp, void *opaque)</argsstring>
        <name>map_create</name>
        <param>
          <type><ref refid="map_8h_1a94d6b9025eb5d49e30f2c502d28e7ef0" kindref="member">map_keycmp</ref></type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Create a map with the given key comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparator function (must not be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>User pointer passed to cmp on every compare (may be NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a new map, or NULL on allocation failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="92" column="5" bodyfile="src/containers/map.c" bodystart="92" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ad278337533565479efb94cf7a1cb715b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void soa_free</definition>
        <argsstring>(map_soa *a)</argsstring>
        <name>soa_free</name>
        <param>
          <type><ref refid="structmap__soa" kindref="compound">map_soa</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="118" column="13" bodyfile="src/containers/map.c" bodystart="118" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a0bc189c02ac87873aeab3dfa96fc24a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void map_destroy</definition>
        <argsstring>(map *m)</argsstring>
        <name>map_destroy</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Destroy a map and free all nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to destroy (NULL is ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="127" column="6" bodyfile="src/containers/map.c" bodystart="127" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1aaf121473f731c15f97bc4f257d0c3ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void map_clear</definition>
        <argsstring>(map *m)</argsstring>
        <name>map_clear</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Remove all entries, leaving the map empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="136" column="6" bodyfile="src/containers/map.c" bodystart="136" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1aafc3315934617b8b80091ac841b6394a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t map_size</definition>
        <argsstring>(const map *m)</argsstring>
        <name>map_size</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Number of key→value pairs currently stored. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Count of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="151" column="8" bodyfile="src/containers/map.c" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1aa70810b0673349ba60da26d303216551" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int node_new</definition>
        <argsstring>(map *m, uintptr_t key, uintptr_t val, size_t parent, size_t *out_i)</argsstring>
        <name>node_new</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>out_i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="158" column="12" bodyfile="src/containers/map.c" bodystart="158" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a86a486db20f8e72f0d42f61b3e2a167b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void node_recycle</definition>
        <argsstring>(map *m, size_t i)</argsstring>
        <name>node_recycle</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="186" column="13" bodyfile="src/containers/map.c" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ad4b34654c77770adae41bafb87e87dfe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int colour_of</definition>
        <argsstring>(const map *m, size_t i)</argsstring>
        <name>colour_of</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="190" column="12" bodyfile="src/containers/map.c" bodystart="190" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a96ca9c9dcff5550b414b9188c84067eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t minimum_node</definition>
        <argsstring>(const map *m, size_t i)</argsstring>
        <name>minimum_node</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="197" column="15" bodyfile="src/containers/map.c" bodystart="197" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ae4dcaaa28ca0fe5fde932e813322b732" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t maximum_node</definition>
        <argsstring>(const map *m, size_t i)</argsstring>
        <name>maximum_node</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="209" column="15" bodyfile="src/containers/map.c" bodystart="209" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ad3b041021da007d4a083ce973ca9dde2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t successor</definition>
        <argsstring>(const map *m, size_t i)</argsstring>
        <name>successor</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="221" column="15" bodyfile="src/containers/map.c" bodystart="221" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1af35a4ebdec5d86b59bf56688c7ba2fe5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t predecessor</definition>
        <argsstring>(const map *m, size_t i)</argsstring>
        <name>predecessor</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="238" column="15" bodyfile="src/containers/map.c" bodystart="238" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a27dfe1546eea5dc21a67c8c8c6e94671" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rotate_left</definition>
        <argsstring>(map *m, size_t x)</argsstring>
        <name>rotate_left</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="255" column="13" bodyfile="src/containers/map.c" bodystart="255" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a054b10e9ff53e54e8ca1b9d565d57eba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rotate_right</definition>
        <argsstring>(map *m, size_t x)</argsstring>
        <name>rotate_right</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="276" column="13" bodyfile="src/containers/map.c" bodystart="276" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a49b57ceb59651eed4264d50cc3f43e0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void insert_fixup</definition>
        <argsstring>(map *m, size_t z)</argsstring>
        <name>insert_fixup</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="297" column="13" bodyfile="src/containers/map.c" bodystart="297" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a3d69a939ff8dc2e3b4395d31d5bd7d26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void transplant</definition>
        <argsstring>(map *m, size_t u, size_t v)</argsstring>
        <name>transplant</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>u</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="340" column="13" bodyfile="src/containers/map.c" bodystart="340" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a289b1192aa84b20acbd16e6ca36e77b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void erase_fixup</definition>
        <argsstring>(map *m, size_t x, size_t x_parent)</argsstring>
        <name>erase_fixup</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>x_parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="354" column="13" bodyfile="src/containers/map.c" bodystart="354" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a8ad66505e8e8b42e35ddc287d58f4ea3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t find_index</definition>
        <argsstring>(const map *m, uintptr_t key)</argsstring>
        <name>find_index</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="447" column="15" bodyfile="src/containers/map.c" bodystart="447" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ab6d1eb0abc637a43dc8d2ec6ac97bbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_insert</definition>
        <argsstring>(map *m, uintptr_t key, uintptr_t value)</argsstring>
        <name>map_insert</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert a key→value pair if the key is not present. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if inserted, 0 if key already existed (value unchanged), -1 on OOM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="463" column="5" bodyfile="src/containers/map.c" bodystart="463" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a26b4bd5d7b6f3a54901bf42fc6259895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_insert_or_assign</definition>
        <argsstring>(map *m, uintptr_t key, uintptr_t value)</argsstring>
        <name>map_insert_or_assign</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert or assign: set value whether the key exists or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if inserted, 0 if updated existing, -1 on OOM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="498" column="5" bodyfile="src/containers/map.c" bodystart="498" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a8f8f3dc14d0ee889a876f54cf01c1995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_find</definition>
        <argsstring>(const map *m, uintptr_t key, uintptr_t *out_value)</argsstring>
        <name>map_find</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t *</type>
          <declname>out_value</declname>
        </param>
        <briefdescription>
<para>Find a value by key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to look up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional; if non-NULL, receives the found value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if found (out_value set), 0 if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="534" column="5" bodyfile="src/containers/map.c" bodystart="534" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a21cc8043d5f1b885f9ece873e5ff3508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t *</type>
        <definition>uintptr_t* map_find_ref</definition>
        <argsstring>(map *m, uintptr_t key)</argsstring>
        <name>map_find_ref</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the stored value for an existing key. Useful for in-place updates without a second lookup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to look up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value if found, NULL otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="545" column="11" bodyfile="src/containers/map.c" bodystart="545" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1aa1e7e0e7b938516874e198633b37c542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_erase</definition>
        <argsstring>(map *m, uintptr_t key)</argsstring>
        <name>map_erase</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Erase an entry by key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to erase </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if erased, 0 if key not present </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="554" column="5" bodyfile="src/containers/map.c" bodystart="554" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a33d8751da6741c5ffbd15389c2f69dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_lower_bound</definition>
        <argsstring>(const map *m, uintptr_t key, map_iter *it_out)</argsstring>
        <name>map_lower_bound</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>Lower bound: first key &gt;= query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Query key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator positioned at lower bound on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a bound exists (iterator valid), 0 if all keys &lt; query (no bound) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="603" column="5" bodyfile="src/containers/map.c" bodystart="603" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a60d2540eef14f07c363aaa21cdb98349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_upper_bound</definition>
        <argsstring>(const map *m, uintptr_t key, map_iter *it_out)</argsstring>
        <name>map_upper_bound</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>Upper bound: first key &gt; query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Query key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator positioned at upper bound on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a bound exists, 0 if all keys &lt;= query </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="624" column="5" bodyfile="src/containers/map.c" bodystart="624" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a40b29c55374b2d38fe5186c2e343cd3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_begin</definition>
        <argsstring>(const map *m, map_iter *it_out)</argsstring>
        <name>map_begin</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>Begin iterator (smallest key). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to iterate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives iterator; becomes invalid if map is modified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if non-empty and iterator valid, 0 if empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="645" column="5" bodyfile="src/containers/map.c" bodystart="645" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a7ba83188bccdf2d233d24737469a54b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void map_end</definition>
        <argsstring>(const map *m, map_iter *it_out)</argsstring>
        <name>map_end</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>End iterator (one past largest). Mostly for symmetry; rarely needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to iterate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives a sentinel end iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="660" column="6" bodyfile="src/containers/map.c" bodystart="660" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ab8ec606b0bd228134879f7f28d620a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_next</definition>
        <argsstring>(map_iter *it)</argsstring>
        <name>map_next</name>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Advance iterator to next in-order key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to advance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if moved to a valid element, 0 if now at end </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="669" column="5" bodyfile="src/containers/map.c" bodystart="669" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a50ecedeb7b27069f96844f13e0f0947e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_prev</definition>
        <argsstring>(map_iter *it)</argsstring>
        <name>map_prev</name>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Move iterator to previous in-order key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to retreat </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if moved to a valid element, 0 if now before begin </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="697" column="5" bodyfile="src/containers/map.c" bodystart="697" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1ac779d6345f9bd476df22caedc791ba0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t map_iter_key</definition>
        <argsstring>(const map_iter *it)</argsstring>
        <name>map_iter_key</name>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Access the key at an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator (must be valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="723" column="11" bodyfile="src/containers/map.c" bodystart="723" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a0ad21c9194c6e8fa9f8c61fa0836aa68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t map_iter_value</definition>
        <argsstring>(const map_iter *it)</argsstring>
        <name>map_iter_value</name>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Access the value at an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator (must be valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="727" column="11" bodyfile="src/containers/map.c" bodystart="727" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a05d350e26c79059c19674e757b68bb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t *</type>
        <definition>uintptr_t* map_iter_value_ref</definition>
        <argsstring>(map_iter *it)</argsstring>
        <name>map_iter_value_ref</name>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Access a mutable reference to the value at an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator (must be valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="731" column="11" bodyfile="src/containers/map.c" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a15914e06fa39b75099f8ddcbe82c53b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_iter_equal</definition>
        <argsstring>(const map_iter *a, const map_iter *b)</argsstring>
        <name>map_iter_equal</name>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check whether two iterators are equal (same position). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First iterator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if equal, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="736" column="5" bodyfile="src/containers/map.c" bodystart="736" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a3823698afd3e06ae76f6eb8475598715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_cmp_u64</definition>
        <argsstring>(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_cmp_u64</name>
        <param>
          <type>uintptr_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Default numeric comparator: a&lt;b ? -1 : a&gt;b ? +1 : 0. Interprets keys as unsigned 64-bit (via uintptr_t). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="752" column="5" bodyfile="src/containers/map.c" bodystart="752" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a4ea8ccd03f282ef788e0e01fc90d683e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_cmp_cstr</definition>
        <argsstring>(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_cmp_cstr</name>
        <param>
          <type>uintptr_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Default string comparator for const char* keys (strcmp). Keys must be NUL-terminated C strings (stored as pointers in uintptr_t). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="765" column="5" bodyfile="src/containers/map.c" bodystart="765" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="map_8c_1a4fe01316c4f8383ec4a31bad2062dbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_cmp_cstr_nocase</definition>
        <argsstring>(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_cmp_cstr_nocase</name>
        <param>
          <type>uintptr_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Case-insensitive string comparator for const char* (ASCII). Keys must be NUL-terminated C strings (stored as pointers in uintptr_t). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/containers/map.c" line="780" column="5" bodyfile="src/containers/map.c" bodystart="780" bodyend="793"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/containers/map.c"/>
  </compounddef>
</doxygen>
