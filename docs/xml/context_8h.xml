<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="context_8h" kind="file" language="C++">
    <compoundname>context.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="buddy__allocator_8h" local="yes">buddy_allocator.h</includes>
    <includedby refid="basic_8h" local="yes">basic.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="124">
        <label>memcpy.c</label>
        <link refid="memcpy_8c"/>
      </node>
      <node id="73">
        <label>console.c</label>
        <link refid="console_8c"/>
      </node>
      <node id="86">
        <label>reflection.c</label>
        <link refid="reflection_8c"/>
      </node>
      <node id="109">
        <label>main.c</label>
        <link refid="fs_2fat32_2main_8c"/>
      </node>
      <node id="105">
        <label>createfile.c</label>
        <link refid="fat32_2createfile_8c"/>
      </node>
      <node id="51">
        <label>helpers.c</label>
        <link refid="helpers_8c"/>
      </node>
      <node id="2">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>tokenizer.c</label>
        <link refid="tokenizer_8c"/>
      </node>
      <node id="1">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>errorhandler.c</label>
        <link refid="errorhandler_8c"/>
      </node>
      <node id="43">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>cluster.c</label>
        <link refid="cluster_8c"/>
      </node>
      <node id="114">
        <label>filesystem.c</label>
        <link refid="filesystem_8c"/>
      </node>
      <node id="91">
        <label>variable.c</label>
        <link refid="variable_8c"/>
      </node>
      <node id="56">
        <label>unlinkdirectory.c</label>
        <link refid="unlinkdirectory_8c"/>
      </node>
      <node id="4">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>random.c</label>
        <link refid="random_8c"/>
      </node>
      <node id="6">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>net.c</label>
        <link refid="net_8c"/>
      </node>
      <node id="18">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>interrupt.c</label>
        <link refid="interrupt_8c"/>
      </node>
      <node id="66">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>printf.c</label>
        <link refid="printf_8c"/>
      </node>
      <node id="79">
        <label>function.c</label>
        <link refid="function_8c"/>
      </node>
      <node id="30">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>taskswitch.c</label>
        <link refid="taskswitch_8c"/>
      </node>
      <node id="22">
        <label>hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="133">
        <label>queue.c</label>
        <link refid="queue_8c"/>
      </node>
      <node id="12">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>fsmap.c</label>
        <link refid="fsmap_8c"/>
      </node>
      <node id="15">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="119">
        <label>input.c</label>
        <link refid="input_8c"/>
      </node>
      <node id="48">
        <label>format.c</label>
        <link refid="format_8c"/>
      </node>
      <node id="140">
        <label>stdlib.c</label>
        <link refid="stdlib_8c"/>
      </node>
      <node id="113">
        <label>writefile.c</label>
        <link refid="fat32_2writefile_8c"/>
      </node>
      <node id="84">
        <label>maths.c</label>
        <link refid="basic_2maths_8c"/>
      </node>
      <node id="130">
        <label>icmp.c</label>
        <link refid="icmp_8c"/>
      </node>
      <node id="92">
        <label>buddy_allocator.c</label>
        <link refid="buddy__allocator_8c"/>
      </node>
      <node id="58">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>ip.c</label>
        <link refid="ip_8c"/>
      </node>
      <node id="121">
        <label>keyboard.c</label>
        <link refid="keyboard_8c"/>
      </node>
      <node id="75">
        <label>debugger.c</label>
        <link refid="basic_2debugger_8c"/>
      </node>
      <node id="47">
        <label>createfile.c</label>
        <link refid="retrofs_2createfile_8c"/>
      </node>
      <node id="77">
        <label>file_io.c</label>
        <link refid="file__io_8c"/>
      </node>
      <node id="54">
        <label>truncatefile.c</label>
        <link refid="retrofs_2truncatefile_8c"/>
      </node>
      <node id="94">
        <label>debug_ringbuffer.c</label>
        <link refid="debug__ringbuffer_8c"/>
      </node>
      <node id="103">
        <label>devfs.c</label>
        <link refid="devfs_8c"/>
      </node>
      <node id="102">
        <label>debuglog.c</label>
        <link refid="debuglog_8c"/>
      </node>
      <node id="127">
        <label>descriptor.c</label>
        <link refid="descriptor_8c"/>
      </node>
      <node id="87">
        <label>sockets.c</label>
        <link refid="sockets_8c"/>
      </node>
      <node id="144">
        <label>video.c</label>
        <link refid="video_8c"/>
      </node>
      <node id="55">
        <label>unlink.c</label>
        <link refid="unlink_8c"/>
      </node>
      <node id="67">
        <label>acpi.c</label>
        <link refid="acpi_8c"/>
      </node>
      <node id="80">
        <label>graphics.c</label>
        <link refid="graphics_8c"/>
      </node>
      <node id="123">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="52">
        <label>main.c</label>
        <link refid="fs_2retrofs_2main_8c"/>
      </node>
      <node id="36">
        <label>e1000.c</label>
        <link refid="e1000_8c"/>
      </node>
      <node id="95">
        <label>debugger.c</label>
        <link refid="debugger_8c"/>
      </node>
      <node id="76">
        <label>double_expression.c</label>
        <link refid="double__expression_8c"/>
      </node>
      <node id="143">
        <label>timer.c</label>
        <link refid="timer_8c"/>
      </node>
      <node id="9">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>pci.c</label>
        <link refid="pci_8c"/>
      </node>
      <node id="81">
        <label>int_expression.c</label>
        <link refid="int__expression_8c"/>
      </node>
      <node id="42">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>fb.c</label>
        <link refid="fb_8c"/>
      </node>
      <node id="126">
        <label>debug.c</label>
        <link refid="debug_8c"/>
      </node>
      <node id="72">
        <label>array.c</label>
        <link refid="array_8c"/>
      </node>
      <node id="24">
        <label>initialisation-functions.h</label>
        <link refid="initialisation-functions_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>arp.c</label>
        <link refid="arp_8c"/>
      </node>
      <node id="19">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>lfn.c</label>
        <link refid="lfn_8c"/>
      </node>
      <node id="60">
        <label>serial.c</label>
        <link refid="serial_8c"/>
      </node>
      <node id="59">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>fpu.c</label>
        <link refid="fpu_8c"/>
      </node>
      <node id="120">
        <label>ioapic.c</label>
        <link refid="ioapic_8c"/>
      </node>
      <node id="23">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>kmalloc.c</label>
        <link refid="kmalloc_8c"/>
      </node>
      <node id="117">
        <label>gdt.c</label>
        <link refid="gdt_8c"/>
      </node>
      <node id="37">
        <label>mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="128">
        <label>dhcp.c</label>
        <link refid="dhcp_8c"/>
      </node>
      <node id="35">
        <label>mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>lowlevel.c</label>
        <link refid="lowlevel_8c"/>
      </node>
      <node id="71">
        <label>ata.c</label>
        <link refid="ata_8c"/>
      </node>
      <node id="50">
        <label>getdirectory.c</label>
        <link refid="getdirectory_8c"/>
      </node>
      <node id="89">
        <label>string_expression.c</label>
        <link refid="string__expression_8c"/>
      </node>
      <node id="65">
        <label>tinyalloc.c</label>
        <link refid="tinyalloc_8c"/>
      </node>
      <node id="74">
        <label>datetime.c</label>
        <link refid="datetime_8c"/>
      </node>
      <node id="139">
        <label>rtl8139.c</label>
        <link refid="rtl8139_8c"/>
      </node>
      <node id="78">
        <label>flow_control.c</label>
        <link refid="flow__control_8c"/>
      </node>
      <node id="33">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>idt.c</label>
        <link refid="idt_8c"/>
      </node>
      <node id="116">
        <label>ramdisk.c</label>
        <link refid="ramdisk_8c"/>
      </node>
      <node id="25">
        <label>init.c</label>
        <link refid="init_8c"/>
      </node>
      <node id="63">
        <label>tinyalloc.h</label>
        <link refid="tinyalloc_8h"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>iso9660.c</label>
        <link refid="iso9660_8c"/>
      </node>
      <node id="134">
        <label>tcp.c</label>
        <link refid="tcp_8c"/>
      </node>
      <node id="46">
        <label>createdirectory.c</label>
        <link refid="createdirectory_8c"/>
      </node>
      <node id="135">
        <label>udp.c</label>
        <link refid="udp_8c"/>
      </node>
      <node id="107">
        <label>fat.c</label>
        <link refid="fat_8c"/>
      </node>
      <node id="17">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>flanterm.c</label>
        <link refid="flanterm_8c"/>
      </node>
      <node id="3">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>apic.c</label>
        <link refid="apic_8c"/>
      </node>
      <node id="34">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="10">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>ap.c</label>
        <link refid="ap_8c"/>
      </node>
      <node id="21">
        <label>devicename.c</label>
        <link refid="devicename_8c"/>
      </node>
      <node id="115">
        <label>partition.c</label>
        <link refid="partition_8c"/>
      </node>
      <node id="61">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>unlinkfile.c</label>
        <link refid="unlinkfile_8c"/>
      </node>
      <node id="85">
        <label>process.c</label>
        <link refid="process_8c"/>
      </node>
      <node id="88">
        <label>string.c</label>
        <link refid="basic_2string_8c"/>
      </node>
      <node id="20">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>main.c</label>
        <link refid="basic_2main_8c"/>
      </node>
      <node id="106">
        <label>directory.c</label>
        <link refid="directory_8c"/>
      </node>
      <node id="110">
        <label>readfile.c</label>
        <link refid="fat32_2readfile_8c"/>
      </node>
      <node id="27">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>ethernet.c</label>
        <link refid="ethernet_8c"/>
      </node>
      <node id="111">
        <label>truncatefile.c</label>
        <link refid="fat32_2truncatefile_8c"/>
      </node>
      <node id="129">
        <label>dns.c</label>
        <link refid="dns_8c"/>
      </node>
      <node id="7">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="68">
        <label>ahci.c</label>
        <link refid="ahci_8c"/>
      </node>
      <node id="41">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>string.c</label>
        <link refid="string_8c"/>
      </node>
      <node id="122">
        <label>lapic_timer.c</label>
        <link refid="lapic__timer_8c"/>
      </node>
      <node id="40">
        <label>installer.c</label>
        <link refid="installer_8c"/>
      </node>
      <node id="96">
        <label>drawing.c</label>
        <link refid="drawing_8c"/>
      </node>
      <node id="45">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>writefile.c</label>
        <link refid="retrofs_2writefile_8c"/>
      </node>
      <node id="53">
        <label>readfile.c</label>
        <link refid="retrofs_2readfile_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structbasic__ctx" prot="public">basic_ctx</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="context_8h_1aab15b37afdb180943e1fd31c41caa981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
        <definition>struct basic_ctx* basic_init</definition>
        <argsstring>(const char *program, console *cons, uint32_t pid, const char *file, char **error)</argsstring>
        <name>basic_init</name>
        <param>
          <type>const char *</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="structconsole" kindref="compound">console</ref> *</type>
          <declname>cons</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Initialize the BASIC context with the provided program, console, process ID, and file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program code to execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cons</parametername>
</parameternamelist>
<parameterdescription>
<para>The console to use for input/output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file containing the program. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store any error messages. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the initialized <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="311" column="17" bodyfile="src/basic/main.c" bodystart="182" bodyend="272" declfile="include/basic/context.h" declline="311" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1af018882ffc2e5fc5f888c4dea3ecf17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_destroy</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_destroy</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Destroy the BASIC context and free associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="318" column="6" bodyfile="src/basic/main.c" bodystart="465" bodyend="481" declfile="include/basic/context.h" declline="318" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a56b04c55856eb16c14cb74068a770ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_run</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_run</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Run the BASIC program by executing the next statement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="325" column="6" bodyfile="src/basic/main.c" bodystart="831" bodyend="848" declfile="include/basic/context.h" declline="325" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1ab8aa7186bd4407c90642c4aef3288b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_finished</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_finished</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Check if the BASIC program has finished executing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the program has finished, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="333" column="6" bodyfile="src/basic/main.c" bodystart="850" bodyend="853" declfile="include/basic/context.h" declline="333" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1aa2c73bceaa056ea01125ef6fdfce922e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jump_linenum</definition>
        <argsstring>(int64_t linenum, struct basic_ctx *ctx)</argsstring>
        <name>jump_linenum</name>
        <param>
          <type>int64_t</type>
          <declname>linenum</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Jump to a specific line number in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linenum</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number to jump to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the jump was successful, false if the line doesn&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="342" column="6" bodyfile="src/basic/main.c" bodystart="494" bodyend="504" declfile="include/basic/context.h" declline="342" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a2b822df8abb6e9bec6bd0033f1a60e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void line_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>line_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Parse and execute a line in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="349" column="6" bodyfile="src/basic/main.c" bodystart="820" bodyend="829" declfile="include/basic/context.h" declline="349" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a4af325fda4cf09dde88a6f61d3f11b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Parse and execute a statement in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="356" column="6" bodyfile="src/basic/main.c" bodystart="669" bodyend="818" declfile="include/basic/context.h" declline="356" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1ad9ce2b562c925c1acc36a9d05208a478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool accept</definition>
        <argsstring>(int token, struct basic_ctx *ctx)</argsstring>
        <name>accept</name>
        <param>
          <type>int</type>
          <declname>token</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Check if the expected token is the current token in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token to check for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the token matches, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="365" column="6" bodyfile="src/basic/main.c" bodystart="483" bodyend="492" declfile="include/basic/context.h" declline="365" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a4c1e9351254f2acdf056b70fb6683f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_parse_fn</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_parse_fn</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Parse function definitions in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the function definitions were parsed successfully, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="373" column="6" bodyfile="src/basic/function.c" bodystart="365" bodyend="478" declfile="include/basic/context.h" declline="373" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a6b1deaef88f7495c4c736cd527d350f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
        <definition>struct basic_ctx* basic_clone</definition>
        <argsstring>(struct basic_ctx *old)</argsstring>
        <name>basic_clone</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>old</declname>
        </param>
        <briefdescription>
<para>Clone an existing BASIC context to create a new one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>The original BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> that is a clone of the original. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="381" column="17" bodyfile="src/basic/main.c" bodystart="410" bodyend="462" declfile="include/basic/context.h" declline="381" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1ab4a551ec8e1d5bbf9fab39fb206ea0fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_system_variables</definition>
        <argsstring>(struct basic_ctx *ctx, uint32_t pid)</argsstring>
        <name>set_system_variables</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
<para>Set system variables in the BASIC context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="389" column="6" bodyfile="src/basic/variable.c" bodystart="40" bodyend="59" declfile="include/basic/context.h" declline="389" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1ab2e3f135cc94d8d1fd6ea171cf0274ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char basic_builtin_str_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, char **res)</argsstring>
        <name>basic_builtin_str_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Check if a function name corresponds to a built-in string function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the result of the function if found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the function is found and executed, 0 otherwise.</para>
</simplesect>
Check if a function name corresponds to a built-in string function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>function name to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>interpreter context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to return value of function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t true/false return </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="399" column="6" bodyfile="src/basic/function.c" bodystart="275" bodyend="284" declfile="include/basic/context.h" declline="399" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a18a7475dc2375b336b77a16072ab671e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_eval_int_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx)</argsstring>
        <name>basic_eval_int_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluate an integer function in the context of BASIC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The evaluated integer result of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="408" column="9" bodyfile="src/basic/function.c" bodystart="287" bodyend="325" declfile="include/basic/context.h" declline="408" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a0c16defca496eb524d314acda0d90cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_eval_double_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_eval_double_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Evaluate a double (floating-point) function in the context of BASIC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the evaluated result of the function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="417" column="6" bodyfile="src/basic/function.c" bodystart="327" bodyend="363" declfile="include/basic/context.h" declline="417" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a9717f394c3cd17edb3244faced02ce20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* basic_eval_str_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx)</argsstring>
        <name>basic_eval_str_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluate a string function in the context of BASIC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The evaluated string result of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="426" column="12" bodyfile="src/basic/function.c" bodystart="197" bodyend="233" declfile="include/basic/context.h" declline="426" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a788080c9c038e4ad8b9c5f3dbd7ac808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char basic_builtin_double_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_builtin_double_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Check if a function name corresponds to a built-in double (floating-point) function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the result of the function if found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the function is found and executed, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="436" column="6" bodyfile="src/basic/function.c" bodystart="255" bodyend="264" declfile="include/basic/context.h" declline="436" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1ae70ef13e23858d5c0b0ea830e546b60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char basic_builtin_int_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, int64_t *res)</argsstring>
        <name>basic_builtin_int_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Check if a function name corresponds to a built-in integer function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the result of the function if found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the function is found and executed, 0 otherwise.</para>
</simplesect>
Check if a function name corresponds to a built-in integer function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>function name to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>interpreter context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to return value of function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t true/false return </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="446" column="6" bodyfile="src/basic/function.c" bodystart="244" bodyend="253" declfile="include/basic/context.h" declline="446" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1afbcb040352042a6a451104022f4c33c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
        <definition>struct ub_proc_fn_def* basic_find_fn</definition>
        <argsstring>(const char *name, struct basic_ctx *ctx)</argsstring>
        <name>basic_find_fn</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Find a function definition by name in the BASIC context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function definition if found, NULL otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="455" column="22" bodyfile="src/basic/function.c" bodystart="480" bodyend="489" declfile="include/basic/context.h" declline="455" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a98b976193c080a9fea36c2368f929c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_local_heap</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>init_local_heap</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialize the local call stack for the current function or procedure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Initialize the local call stack for the current function or procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="462" column="6" bodyfile="src/basic/main.c" bodystart="548" bodyend="553" declfile="include/basic/context.h" declline="462" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a2b23683b3c4532cc9a489e857aba8ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_local_heap</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>free_local_heap</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free the local call stack and associated variables for the current function or procedure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Free the local call stack and associated variables for the current function or procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="469" column="6" bodyfile="src/basic/main.c" bodystart="517" bodyend="541" declfile="include/basic/context.h" declline="469" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1a18b719731b4f7ffbad27ebf12e1ec348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_builtin_double_fn</definition>
        <argsstring>(const char *fn_name)</argsstring>
        <name>is_builtin_double_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <briefdescription>
<para>Check if a function name corresponds to a built-in double (floating-point) function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the function is a built-in double function, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="477" column="6" bodyfile="src/basic/function.c" bodystart="508" bodyend="515" declfile="include/basic/context.h" declline="477" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1af0412313c94342985b8a8c2cb7e8808f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_free_defs</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_free_defs</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free function definitions and associated resources in the BASIC context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="484" column="6" bodyfile="src/basic/function.c" bodystart="491" bodyend="506" declfile="include/basic/context.h" declline="484" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1abe611781260b7e77b7926597565b2f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* printable_syntax</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>printable_syntax</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the printable syntax of an expression in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The printable syntax as a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="492" column="6" bodyfile="src/basic/console.c" bodystart="173" bodyend="247" declfile="include/basic/context.h" declline="492" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="context_8h_1ad4bc068a37938522b9addf519de12756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void library_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>library_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handle the LIBRARY statement, which loads a library into the program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Handle the LIBRARY statement, which loads a library into the program.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="499" column="6" bodyfile="src/basic/main.c" bodystart="289" bodyend="408" declfile="include/basic/context.h" declline="499" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions related to BASIC context management, program execution, and function handling. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/basic/context.h"/>
  </compounddef>
</doxygen>
