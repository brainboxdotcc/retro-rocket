<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structblock__cache__t" kind="struct" language="C++" prot="public">
    <compoundname>block_cache_t</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structblock__cache__t_1a01377641aa24257ab77bdda1a331a7ce" prot="public" static="no" mutable="no">
        <type><ref refid="structstorage__device__t" kindref="compound">storage_device_t</ref> *</type>
        <definition>storage_device_t* block_cache_t::dev</definition>
        <argsstring></argsstring>
        <name>dev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Backing storage device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="86" column="18" bodyfile="src/fs/block_cache.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1a82417be2c15076b3b1a8e6ebb482588f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t block_cache_t::sector_size</definition>
        <argsstring></argsstring>
        <name>sector_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sector size in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="87" column="10" bodyfile="src/fs/block_cache.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1a8f8c0bf3288272f05e19892f199f41d1" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t block_cache_t::cap</definition>
        <argsstring></argsstring>
        <name>cap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum cache size in sectors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="88" column="10" bodyfile="src/fs/block_cache.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1acbb53f7307b34b50403abaf0b10e4f71" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* block_cache_t::map</definition>
        <argsstring></argsstring>
        <name>map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maps LBA -&gt; entry pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="89" column="14" bodyfile="src/fs/block_cache.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1a62e83648b3fd476188959d062e5ed3a2" prot="public" static="no" mutable="no">
        <type><ref refid="structlru__node__t" kindref="compound">lru_node_t</ref> *</type>
        <definition>lru_node_t* block_cache_t::lru_head</definition>
        <argsstring></argsstring>
        <name>lru_head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Oldest entry (eviction candidate). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="92" column="12" bodyfile="src/fs/block_cache.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1a90ab837cafd2db6e33c16d4133c4a812" prot="public" static="no" mutable="no">
        <type><ref refid="structlru__node__t" kindref="compound">lru_node_t</ref> *</type>
        <definition>lru_node_t* block_cache_t::lru_tail</definition>
        <argsstring></argsstring>
        <name>lru_tail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Most recently used entry. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="93" column="12" bodyfile="src/fs/block_cache.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1ab8e22dbe585b642a9e7a42793593872f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t block_cache_t::lru_count</definition>
        <argsstring></argsstring>
        <name>lru_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current number of nodes in the LRU list. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="94" column="13" bodyfile="src/fs/block_cache.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1a8d0823fa40fcb0ea846da681a7c89ef9" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t block_cache_t::tick</definition>
        <argsstring></argsstring>
        <name>tick</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Monotonic counter for recency stamps. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="96" column="10" bodyfile="src/fs/block_cache.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structblock__cache__t_1a74a8b1dc00e3adeae4679ab2a003c32f" prot="public" static="no" mutable="no">
        <type><ref refid="spinlock_8h_1af82eed01f0304d83276dda764b213779" kindref="member">spinlock_t</ref></type>
        <definition>spinlock_t block_cache_t::lock</definition>
        <argsstring></argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spinlock protecting cache state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fs/block_cache.c" line="97" column="12" bodyfile="src/fs/block_cache.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Per-device block cache. </para>
    </briefdescription>
    <detaileddescription>
<para>A cache instance attached to a storage device. Holds a bounded number of sector entries in a hashmap for O(1) lookup and in an LRU queue for O(1) eviction. Tracks recency using a monotonically increasing tick counter. All access is synchronised by a spinlock. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>size_t</label>
      </node>
      <node id="11">
        <label>void *</label>
      </node>
      <node id="5">
        <label>hashmap</label>
        <link refid="structhashmap"/>
        <childnode refid="2" relation="usage">
          <edgelabel>hash</edgelabel>
          <edgelabel>seed0</edgelabel>
          <edgelabel>seed1</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elfree</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>free</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>bucketsz</edgelabel>
          <edgelabel>cap</edgelabel>
          <edgelabel>count</edgelabel>
          <edgelabel>elsize</edgelabel>
          <edgelabel>growat</edgelabel>
          <edgelabel>malloc</edgelabel>
          <edgelabel>mask</edgelabel>
          <edgelabel>nbuckets</edgelabel>
          <edgelabel>realloc</edgelabel>
          <edgelabel>shrinkat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>compare</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>oom</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>buckets</edgelabel>
          <edgelabel>edata</edgelabel>
          <edgelabel>spare</edgelabel>
          <edgelabel>udata</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>lru_node_t</label>
        <link refid="structlru__node__t"/>
        <childnode refid="2" relation="usage">
          <edgelabel>lba</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>next</edgelabel>
          <edgelabel>prev</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>uint64_t</label>
      </node>
      <node id="6">
        <label>void(*)(const void *item, void *udata)</label>
      </node>
      <node id="12">
        <label>storage_device_t</label>
        <link refid="structstorage__device__t"/>
        <childnode refid="2" relation="usage">
          <edgelabel>opaque1</edgelabel>
          <edgelabel>size</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>cache</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>ui</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>block_size</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>blockread</edgelabel>
          <edgelabel>blockwrite</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>blockclear</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>opaque2</edgelabel>
          <edgelabel>opaque3</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>int</label>
      </node>
      <node id="13">
        <label>struct block_cache *</label>
      </node>
      <node id="16">
        <label>uint32_t</label>
      </node>
      <node id="14">
        <label>storage_device_ui_t</label>
        <link refid="structstorage__device__ui__t"/>
        <childnode refid="15" relation="usage">
          <edgelabel>label</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>is_optical</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>block_cache_t</label>
        <link refid="structblock__cache__t"/>
        <childnode refid="2" relation="usage">
          <edgelabel>tick</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>lru_head</edgelabel>
          <edgelabel>lru_tail</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>map</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>dev</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>cap</edgelabel>
          <edgelabel>lock</edgelabel>
          <edgelabel>lru_count</edgelabel>
          <edgelabel>sector_size</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>void(*)(const void *ptr, void *udata)</label>
      </node>
      <node id="10">
        <label>bool</label>
      </node>
      <node id="4">
        <label>struct lru_node *</label>
      </node>
      <node id="15">
        <label>char</label>
      </node>
    </collaborationgraph>
    <location file="src/fs/block_cache.c" line="85" column="1" bodyfile="src/fs/block_cache.c" bodystart="85" bodyend="98"/>
    <listofallmembers>
      <member refid="structblock__cache__t_1a8f8c0bf3288272f05e19892f199f41d1" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>cap</name></member>
      <member refid="structblock__cache__t_1a01377641aa24257ab77bdda1a331a7ce" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>dev</name></member>
      <member refid="structblock__cache__t_1a74a8b1dc00e3adeae4679ab2a003c32f" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>lock</name></member>
      <member refid="structblock__cache__t_1ab8e22dbe585b642a9e7a42793593872f" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>lru_count</name></member>
      <member refid="structblock__cache__t_1a62e83648b3fd476188959d062e5ed3a2" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>lru_head</name></member>
      <member refid="structblock__cache__t_1a90ab837cafd2db6e33c16d4133c4a812" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>lru_tail</name></member>
      <member refid="structblock__cache__t_1acbb53f7307b34b50403abaf0b10e4f71" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>map</name></member>
      <member refid="structblock__cache__t_1a82417be2c15076b3b1a8e6ebb482588f" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>sector_size</name></member>
      <member refid="structblock__cache__t_1a8d0823fa40fcb0ea846da681a7c89ef9" prot="public" virt="non-virtual"><scope>block_cache_t</scope><name>tick</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
