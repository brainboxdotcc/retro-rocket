<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="SSLSOCKACCEPT" kind="page">
    <compoundname>SSLSOCKACCEPT</compoundname>
    <title>SSLSOCKACCEPT Function</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".basic"><codeline><highlight class="normal">client<sp/>=<sp/>SSLSOCKACCEPT(server,<sp/>cert$,<sp/>key$)</highlight></codeline>
</programlisting></para>
<para>Removes and returns the next <bold>established TLS connection</bold> from the listening socket’s pending queue. The connection is immediately upgraded to SSL/TLS using the supplied certificate and key.</para>
<para>Returns a non-negative file descriptor on success, or <computeroutput>-1</computeroutput> if no connection is ready (or on error).</para>
<para><simplesect kind="note"><para><computeroutput>SOCKACCEPT</computeroutput> is <bold>non-blocking</bold>: it returns immediately. If there are no connections to accept, it will return <computeroutput>-1</computeroutput>.</para>
</simplesect>
<hruler/>
</para>
<sect1 id="SSLSOCKACCEPT_1how-to-use-it-2_1s1"><sect2 id="SSLSOCKACCEPT_1how-to-use-it-2_1s2"><sect3 id="SSLSOCKACCEPT_1how-to-use-it-2">
<title>How to use it</title><para><itemizedlist>
<listitem><para><computeroutput>server</computeroutput> is the file descriptor returned by <computeroutput>SOCKLISTEN(ip$, port, backlog)</computeroutput>.</para>
</listitem><listitem><para><computeroutput>cert$</computeroutput> is the path to the server’s certificate file.</para>
</listitem><listitem><para><computeroutput>key$</computeroutput> is the path to the server’s private key file.</para>
</listitem><listitem><para>Call repeatedly in your main loop to accept clients as they become ready.</para>
</listitem><listitem><para>Use the returned <computeroutput>client</computeroutput> descriptor with <computeroutput>SOCKWRITE</computeroutput>, <computeroutput>SOCKREAD</computeroutput>, <computeroutput>INSOCKET$</computeroutput>, and <computeroutput>SOCKCLOSE</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect3></sect2></sect1>
<sect1 id="SSLSOCKACCEPT_1examples-67_1s1"><sect2 id="SSLSOCKACCEPT_1examples-67_1s2"><sect3 id="SSLSOCKACCEPT_1examples-67">
<title>Examples</title><para><programlisting filename=".basic"><codeline><highlight class="normal">REM<sp/>Secure<sp/>echo<sp/>server</highlight></codeline>
<codeline><highlight class="normal">server<sp/>=<sp/>SOCKLISTEN(NETINFO$(&quot;ip&quot;),<sp/>4433,<sp/>5)</highlight></codeline>
<codeline><highlight class="normal">IF<sp/>server<sp/>&lt;<sp/>0<sp/>THEN<sp/>PRINT<sp/>&quot;Listen<sp/>failed&quot;</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;Listening<sp/>on<sp/>port<sp/>4433<sp/>(TLS)&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REPEAT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>client<sp/>=<sp/>SSLSOCKACCEPT(server,<sp/>&quot;/system/ssl/server.crt&quot;,<sp/>&quot;/system/ssl/server.key&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IF<sp/>client<sp/>&gt;=<sp/>0<sp/>THEN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SOCKREAD<sp/>client,<sp/>REQ$</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Got<sp/>request:<sp/>&quot;;<sp/>REQ$</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SOCKWRITE<sp/>client,<sp/>&quot;Secure<sp/>reply&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SOCKCLOSE<sp/>client</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>END<sp/>IF</highlight></codeline>
<codeline><highlight class="normal">UNTIL<sp/>INKEY$<sp/>&lt;&gt;<sp/>&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SOCKCLOSE<sp/>server</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3></sect2></sect1>
<sect1 id="SSLSOCKACCEPT_1notes-66_1s1"><sect2 id="SSLSOCKACCEPT_1notes-66_1s2"><sect3 id="SSLSOCKACCEPT_1notes-66">
<title>Notes</title><para><itemizedlist>
<listitem><para>The certificate and key must match and be valid, in standard PEM format.</para>
</listitem><listitem><para>Uses standard TLS (commonly referred to as “SSL”) with certificate-based encryption.</para>
</listitem><listitem><para>Returns <computeroutput>-1</computeroutput> when no connection is available; try again later.</para>
</listitem><listitem><para>Each successful call returns a <bold>new</bold> secure client descriptor; the server remains listening.</para>
</listitem></itemizedlist>
</para>
<para><bold>See also:</bold> <ref refid="SOCKLISTEN" kindref="compound">SOCKLISTEN</ref> · <ref refid="SOCKWRITE" kindref="compound">SOCKWRITE</ref> · <ref refid="SOCKREAD" kindref="compound">SOCKREAD</ref> · <ref refid="INSOCKET" kindref="compound">INSOCKET$</ref> · <ref refid="SOCKSTATUS" kindref="compound">SOCKSTATUS</ref> · <ref refid="SOCKCLOSE" kindref="compound">SOCKCLOSE</ref> · <ref refid="SSLCONNECT" kindref="compound">SSLCONNECT</ref> </para>
</sect3></sect2></sect1>
    </detaileddescription>
    <location file="docpages/basic-language-reference/functions/integer/SSLSOCKACCEPT.md"/>
  </compounddef>
</doxygen>
