<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="basic_2main_8c" kind="file" language="C++">
    <compoundname>basic/main.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <includes refid="debugger_8h" local="no">debugger.h</includes>
    <incdepgraph>
      <node id="52">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="20">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>basic/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>stdarg.h</label>
      </node>
      <node id="55">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="26">
        <label>basic/validation.h</label>
        <link refid="validation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>basic/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>basic/structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="79">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>basic/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="43">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="34">
        <label>basic/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>basic/flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="61">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>basic/builtin_real_functions.h</label>
        <link refid="builtin__real__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="62">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="80">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="82">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>basic/sockets.h</label>
        <link refid="sockets_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>basic/defines.h</label>
        <link refid="defines_8h"/>
      </node>
      <node id="72">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>basic/builtin_integer_functions.h</label>
        <link refid="builtin__integer__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="47">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>basic/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="29">
        <label>basic/builtin_string_functions.h</label>
        <link refid="builtin__string__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>basic/console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>basic/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>main.c</label>
        <link refid="basic_2main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="30">
        <label>basic/builtin_file_io_functions.h</label>
        <link refid="builtin__file__io__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>basic/tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>basic/lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="19">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>basic/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>basic/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="basic_2main_8c_1a41d8a3751accd3178a7e15e42f003206" prot="public" static="no">
        <name>NEGATE_STATEMENT</name>
        <param><defname>s</defname></param>
        <param><defname>len</defname></param>
        <initializer>	{ \
	char <ref refid="basic_2main_8c_1a4af325fda4cf09dde88a6f61d3f11b46" kindref="member">statement</ref>[<ref refid="tcp_8h_1a8aed22e2c7b283705ec82e0120515618" kindref="member">len</ref> + 3]; \
	<ref refid="printf_8c_1a27f605c4aa6533029bdc816a4a9d06ff" kindref="member">snprintf</ref>(<ref refid="basic_2main_8c_1a4af325fda4cf09dde88a6f61d3f11b46" kindref="member">statement</ref>, <ref refid="tcp_8h_1a8aed22e2c7b283705ec82e0120515618" kindref="member">len</ref> + 3, &quot;%s -&quot;, s); \
	if (<ref refid="string_8c_1a519d57d33362a8ed067cf5fe6937324e" kindref="member">strncmp</ref>(<ref refid="basic_2main_8c_1a4af325fda4cf09dde88a6f61d3f11b46" kindref="member">statement</ref>, <ref refid="ahci_8h_1a6519522ad9a6f45e7a8d25d31392a977" kindref="member">p</ref>, <ref refid="tcp_8h_1a8aed22e2c7b283705ec82e0120515618" kindref="member">len</ref> + 2) == 0) { \
		<ref refid="memcpy_8c_1a1edf84073dfe83cba6ece272cb42e11d" kindref="member">memcpy</ref>(<ref refid="ahci_8h_1a4cd140aecf7c77a91e1b41afb65cdf4f" kindref="member">d</ref>, <ref refid="ahci_8h_1a6519522ad9a6f45e7a8d25d31392a977" kindref="member">p</ref>, <ref refid="tcp_8h_1a8aed22e2c7b283705ec82e0120515618" kindref="member">len</ref> + 1); \
		<ref refid="ahci_8h_1a4cd140aecf7c77a91e1b41afb65cdf4f" kindref="member">d</ref> += <ref refid="tcp_8h_1a8aed22e2c7b283705ec82e0120515618" kindref="member">len</ref> + 1; \
		<ref refid="ahci_8h_1a6519522ad9a6f45e7a8d25d31392a977" kindref="member">p</ref> += <ref refid="tcp_8h_1a8aed22e2c7b283705ec82e0120515618" kindref="member">len</ref> + 2; \
		<ref refid="memcpy_8c_1a1edf84073dfe83cba6ece272cb42e11d" kindref="member">memcpy</ref>(<ref refid="ahci_8h_1a4cd140aecf7c77a91e1b41afb65cdf4f" kindref="member">d</ref>, &quot;(0-1)*&quot;, 6); \
		<ref refid="ahci_8h_1a4cd140aecf7c77a91e1b41afb65cdf4f" kindref="member">d</ref> += 6; \
	} \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="25" column="9" bodyfile="src/basic/main.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="basic_2main_8c_1adbea79f9655e5767c84d845207e08964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* clean_basic</definition>
        <argsstring>(const char *program, char *output_buffer)</argsstring>
        <name>clean_basic</name>
        <param>
          <type>const char *</type>
          <declname>program</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="37" column="6" bodyfile="src/basic/main.c" bodystart="37" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1abe85e6c3f39d917b9cb89daec8bd49da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* auto_number</definition>
        <argsstring>(const char *program, uint64_t line, uint64_t increment)</argsstring>
        <name>auto_number</name>
        <param>
          <type>const char *</type>
          <declname>program</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>increment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="99" column="12" bodyfile="src/basic/main.c" bodystart="99" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1ab863a74ae2ae042854039be9356b084d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t line_hash</definition>
        <argsstring>(const void *item, uint64_t seed0, uint64_t seed1)</argsstring>
        <name>line_hash</name>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="141" column="10" bodyfile="src/basic/main.c" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1aa5520b91c0ef46358fd0c4bd74050993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int line_compare</definition>
        <argsstring>(const void *a, const void *b, void *udata)</argsstring>
        <name>line_compare</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>udata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="146" column="5" bodyfile="src/basic/main.c" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a44ed64f6ff4e39653e508971cbb313e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_hash_lines</definition>
        <argsstring>(struct basic_ctx *ctx, char **error)</argsstring>
        <name>basic_hash_lines</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="152" column="6" bodyfile="src/basic/main.c" bodystart="152" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1aab15b37afdb180943e1fd31c41caa981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
        <definition>struct basic_ctx* basic_init</definition>
        <argsstring>(const char *program, console *cons, uint32_t pid, const char *file, char **error)</argsstring>
        <name>basic_init</name>
        <param>
          <type>const char *</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="structconsole" kindref="compound">console</ref> *</type>
          <declname>cons</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Initialize the BASIC context with the provided program, console, process ID, and file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program</parametername>
</parameternamelist>
<parameterdescription>
<para>The program code to execute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cons</parametername>
</parameternamelist>
<parameterdescription>
<para>The console to use for input/output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The process ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file containing the program. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store any error messages. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the initialized <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="182" column="17" bodyfile="src/basic/main.c" bodystart="182" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a14e5c07fad2912482b0dc026fadd3c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void yield_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>yield_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="274" column="6" bodyfile="src/basic/main.c" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1ad4bc068a37938522b9addf519de12756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void library_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>library_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Loads a library by appending it to the end of a running program This will cause many pointers in the context to become invalid, so the <ref refid="basic_2main_8c_1ad4bc068a37938522b9addf519de12756" kindref="member">library_statement()</ref> function will regenerate them. Do not rely on copies of any ptrs inside ctx from before this call! </para>
        </briefdescription>
        <detaileddescription>
<para>Handle the LIBRARY statement, which loads a library into the program.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="289" column="6" bodyfile="src/basic/main.c" bodystart="289" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a6b1deaef88f7495c4c736cd527d350f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
        <definition>struct basic_ctx* basic_clone</definition>
        <argsstring>(struct basic_ctx *old)</argsstring>
        <name>basic_clone</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>old</declname>
        </param>
        <briefdescription>
<para>Clone an existing BASIC context to create a new one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>The original BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> that is a clone of the original. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="410" column="17" bodyfile="src/basic/main.c" bodystart="410" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1af018882ffc2e5fc5f888c4dea3ecf17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_destroy</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_destroy</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Destroy the BASIC context and free associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context to destroy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="465" column="6" bodyfile="src/basic/main.c" bodystart="465" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1ad9ce2b562c925c1acc36a9d05208a478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool accept</definition>
        <argsstring>(int token, struct basic_ctx *ctx)</argsstring>
        <name>accept</name>
        <param>
          <type>int</type>
          <declname>token</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Check if the expected token is the current token in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The token to check for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the token matches, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="483" column="6" bodyfile="src/basic/main.c" bodystart="483" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1aa2c73bceaa056ea01125ef6fdfce922e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool jump_linenum</definition>
        <argsstring>(int64_t linenum, struct basic_ctx *ctx)</argsstring>
        <name>jump_linenum</name>
        <param>
          <type>int64_t</type>
          <declname>linenum</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Jump to a specific line number in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>linenum</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number to jump to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the jump was successful, false if the line doesn&apos;t exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="494" column="6" bodyfile="src/basic/main.c" bodystart="494" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a4da7523f6ab0e5355028deb01f27d748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void goto_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>goto_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="506" column="6" bodyfile="src/basic/main.c" bodystart="506" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a2b23683b3c4532cc9a489e857aba8ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_local_heap</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>free_local_heap</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Free variables held on the local call stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Free the local call stack and associated variables for the current function or procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="517" column="6" bodyfile="src/basic/main.c" bodystart="517" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a98b976193c080a9fea36c2368f929c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_local_heap</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>init_local_heap</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Initialise the local call stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialize the local call stack for the current function or procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="548" column="6" bodyfile="src/basic/main.c" bodystart="548" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1aa805a28917e301954771c63ba3713d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void chain_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>chain_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="555" column="6" bodyfile="src/basic/main.c" bodystart="555" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a978cd0a306639177cb02c2f12549916c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_in_eval</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_in_eval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Checks if the program is currently inside an EVAL statement. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the program is inside an EVAL block, which modifies the program at runtime.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if the program is inside an EVAL, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="592" column="6" bodyfile="src/basic/main.c" bodystart="592" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a5e5f1ea2b9be92d6852d00ef01077ee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eval_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>eval_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>An EVAL jumps to the line number at the end of the program (EVAL_LINE) where the evaluation is to take place. Once compeleted, a RETURN statement is executed at EVAL_END_LINE, which returns back to the line where the EVAL statement is.</para>
        </inbodydescription>
        <location file="src/basic/main.c" line="597" column="6" bodyfile="src/basic/main.c" bodystart="597" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a53b019c43274358836f64a396b2b6431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rem_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>rem_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="661" column="6" bodyfile="src/basic/main.c" bodystart="661" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a4af325fda4cf09dde88a6f61d3f11b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Parse and execute a statement in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="669" column="6" bodyfile="src/basic/main.c" bodystart="669" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a2b822df8abb6e9bec6bd0033f1a60e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void line_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>line_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Parse and execute a line in the BASIC program. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="820" column="6" bodyfile="src/basic/main.c" bodystart="820" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1a56b04c55856eb16c14cb74068a770ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_run</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_run</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Run the BASIC program by executing the next statement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="831" column="6" bodyfile="src/basic/main.c" bodystart="831" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="basic_2main_8c_1ab8aa7186bd4407c90642c4aef3288b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_finished</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_finished</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Check if the BASIC program has finished executing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the program has finished, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/main.c" line="850" column="6" bodyfile="src/basic/main.c" bodystart="850" bodyend="853"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Main functions for BASIC interpreter, context creation, destruction and cloning. </para>
    </briefdescription>
    <detaileddescription>
<para>Retro Rocket OS Project (C) Craig Edwards 2012. loosely based on uBASIC (Copyright (c) 2006, Adam Dunkels, All rights reserved).</para>
<para>THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS `<lsquo/>AS IS<rsquo/>&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </para>
    </detaileddescription>
    <location file="src/basic/main.c"/>
  </compounddef>
</doxygen>
