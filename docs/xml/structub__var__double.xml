<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structub__var__double" kind="struct" language="C++" prot="public">
    <compoundname>ub_var_double</compoundname>
    <includes local="no">structs.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structub__var__double_1a8c20a899aea6a9aebd96e6c865ea88f0" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* ub_var_double::varname</definition>
        <argsstring></argsstring>
        <name>varname</name>
        <briefdescription>
<para>Name of the double variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/structs.h" line="44" column="12" bodyfile="include/basic/structs.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structub__var__double_1a0741fc1dcb1e646ac029324ac2e84d43" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t ub_var_double::name_length</definition>
        <argsstring></argsstring>
        <name>name_length</name>
        <briefdescription>
<para>Length of the variable name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/structs.h" line="45" column="8" bodyfile="include/basic/structs.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structub__var__double_1a620aa2ed021098e708df2a898740bcd4" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double ub_var_double::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>The value of the double variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/structs.h" line="46" column="8" bodyfile="include/basic/structs.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structub__var__double_1a4ad7922ffa767eb500f2e010badff955" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ub_var_double::global</definition>
        <argsstring></argsstring>
        <name>global</name>
        <briefdescription>
<para>True if the variable is global, false if local. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/structs.h" line="47" column="6" bodyfile="include/basic/structs.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structub__var__double_1ac4bcaac1541e57fd08d8fd2837bcbc88" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structub__var__double" kindref="compound">ub_var_double</ref> *</type>
        <definition>struct ub_var_double* ub_var_double::next</definition>
        <argsstring></argsstring>
        <name>next</name>
        <briefdescription>
<para>Pointer to the next double variable (for chaining) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/structs.h" line="48" column="21" bodyfile="include/basic/structs.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A real (double) variable. </para>
    </briefdescription>
    <detaileddescription>
<para>This structure represents a real (double) variable in the BASIC interpreter, with its name, value, and whether it is global or local. It also supports chaining for handling multiple variables. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>size_t</label>
      </node>
      <node id="1">
        <label>ub_var_double</label>
        <link refid="structub__var__double"/>
        <childnode refid="2" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>varname</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>name_length</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>global</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>double</label>
      </node>
      <node id="5">
        <label>bool</label>
      </node>
      <node id="3">
        <label>char</label>
      </node>
    </collaborationgraph>
    <location file="include/basic/structs.h" line="43" column="1" bodyfile="include/basic/structs.h" bodystart="43" bodyend="49"/>
    <listofallmembers>
      <member refid="structub__var__double_1a4ad7922ffa767eb500f2e010badff955" prot="public" virt="non-virtual"><scope>ub_var_double</scope><name>global</name></member>
      <member refid="structub__var__double_1a0741fc1dcb1e646ac029324ac2e84d43" prot="public" virt="non-virtual"><scope>ub_var_double</scope><name>name_length</name></member>
      <member refid="structub__var__double_1ac4bcaac1541e57fd08d8fd2837bcbc88" prot="public" virt="non-virtual"><scope>ub_var_double</scope><name>next</name></member>
      <member refid="structub__var__double_1a620aa2ed021098e708df2a898740bcd4" prot="public" virt="non-virtual"><scope>ub_var_double</scope><name>value</name></member>
      <member refid="structub__var__double_1a8c20a899aea6a9aebd96e6c865ea88f0" prot="public" virt="non-virtual"><scope>ub_var_double</scope><name>varname</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
