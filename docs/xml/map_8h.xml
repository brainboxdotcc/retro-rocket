<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="map_8h" kind="file" language="C++">
    <compoundname>map.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="kernel_8h" local="yes">kernel.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="152">
        <label>memcpy.c</label>
        <link refid="memcpy_8c"/>
      </node>
      <node id="14">
        <label>console.c</label>
        <link refid="console_8c"/>
      </node>
      <node id="101">
        <label>reflection.c</label>
        <link refid="reflection_8c"/>
      </node>
      <node id="139">
        <label>main.c</label>
        <link refid="fs_2fat32_2main_8c"/>
      </node>
      <node id="135">
        <label>createfile.c</label>
        <link refid="fat32_2createfile_8c"/>
      </node>
      <node id="71">
        <label>helpers.c</label>
        <link refid="fs_2retrofs_2helpers_8c"/>
      </node>
      <node id="7">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>tokenizer.c</label>
        <link refid="tokenizer_8c"/>
      </node>
      <node id="12">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>errorhandler.c</label>
        <link refid="errorhandler_8c"/>
      </node>
      <node id="63">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>cluster.c</label>
        <link refid="cluster_8c"/>
      </node>
      <node id="21">
        <label>filesystem.c</label>
        <link refid="filesystem_8c"/>
      </node>
      <node id="112">
        <label>main.c</label>
        <link refid="block_2ahci_2main_8c"/>
      </node>
      <node id="106">
        <label>variable.c</label>
        <link refid="variable_8c"/>
      </node>
      <node id="76">
        <label>unlinkdirectory.c</label>
        <link refid="unlinkdirectory_8c"/>
      </node>
      <node id="43">
        <label>helpers.c</label>
        <link refid="installer_2helpers_8c"/>
      </node>
      <node id="3">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>random.c</label>
        <link refid="random_8c"/>
      </node>
      <node id="5">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>net.c</label>
        <link refid="net_8c"/>
      </node>
      <node id="6">
        <label>peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>interrupt.c</label>
        <link refid="interrupt_8c"/>
      </node>
      <node id="85">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>printf.c</label>
        <link refid="printf_8c"/>
      </node>
      <node id="94">
        <label>function.c</label>
        <link refid="function_8c"/>
      </node>
      <node id="50">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>taskswitch.c</label>
        <link refid="taskswitch_8c"/>
      </node>
      <node id="162">
        <label>queue.c</label>
        <link refid="queue_8c"/>
      </node>
      <node id="26">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>block_cache.h</label>
        <link refid="block__cache_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>main.c</label>
        <link refid="installer_2main_8c"/>
      </node>
      <node id="69">
        <label>fsmap.c</label>
        <link refid="fsmap_8c"/>
      </node>
      <node id="29">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>input.c</label>
        <link refid="input_8c"/>
      </node>
      <node id="68">
        <label>format.c</label>
        <link refid="format_8c"/>
      </node>
      <node id="167">
        <label>stdlib.c</label>
        <link refid="stdlib_8c"/>
      </node>
      <node id="175">
        <label>test.c</label>
        <link refid="test_8c"/>
      </node>
      <node id="40">
        <label>installer.h</label>
        <link refid="installer_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>writefile.c</label>
        <link refid="fat32_2writefile_8c"/>
      </node>
      <node id="98">
        <label>maths.c</label>
        <link refid="basic_2maths_8c"/>
      </node>
      <node id="159">
        <label>icmp.c</label>
        <link refid="icmp_8c"/>
      </node>
      <node id="118">
        <label>ramdisk.c</label>
        <link refid="ramdisk_8c"/>
      </node>
      <node id="119">
        <label>buddy_allocator.c</label>
        <link refid="buddy__allocator_8c"/>
      </node>
      <node id="160">
        <label>ip.c</label>
        <link refid="ip_8c"/>
      </node>
      <node id="9">
        <label>tui.c</label>
        <link refid="tui_8c"/>
      </node>
      <node id="149">
        <label>keyboard.c</label>
        <link refid="keyboard_8c"/>
      </node>
      <node id="153">
        <label>module_loader.c</label>
        <link refid="module__loader_8c"/>
      </node>
      <node id="92">
        <label>debugger.c</label>
        <link refid="basic_2debugger_8c"/>
      </node>
      <node id="67">
        <label>createfile.c</label>
        <link refid="retrofs_2createfile_8c"/>
      </node>
      <node id="93">
        <label>file_io.c</label>
        <link refid="file__io_8c"/>
      </node>
      <node id="74">
        <label>truncatefile.c</label>
        <link refid="retrofs_2truncatefile_8c"/>
      </node>
      <node id="123">
        <label>debug_ringbuffer.c</label>
        <link refid="debug__ringbuffer_8c"/>
      </node>
      <node id="133">
        <label>devfs.c</label>
        <link refid="devfs_8c"/>
      </node>
      <node id="132">
        <label>debuglog.c</label>
        <link refid="debuglog_8c"/>
      </node>
      <node id="156">
        <label>descriptor.c</label>
        <link refid="descriptor_8c"/>
      </node>
      <node id="102">
        <label>sockets.c</label>
        <link refid="sockets_8c"/>
      </node>
      <node id="171">
        <label>video.c</label>
        <link refid="video_8c"/>
      </node>
      <node id="58">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>unlink.c</label>
        <link refid="unlink_8c"/>
      </node>
      <node id="86">
        <label>acpi.c</label>
        <link refid="acpi_8c"/>
      </node>
      <node id="42">
        <label>gpt_writer.c</label>
        <link refid="gpt__writer_8c"/>
      </node>
      <node id="95">
        <label>graphics.c</label>
        <link refid="graphics_8c"/>
      </node>
      <node id="115">
        <label>storage_device.c</label>
        <link refid="storage__device_8c"/>
      </node>
      <node id="151">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="72">
        <label>main.c</label>
        <link refid="fs_2retrofs_2main_8c"/>
      </node>
      <node id="124">
        <label>debugger.c</label>
        <link refid="debugger_8c"/>
      </node>
      <node id="15">
        <label>double_expression.c</label>
        <link refid="double__expression_8c"/>
      </node>
      <node id="57">
        <label>e1000.c</label>
        <link refid="e1000_8c"/>
      </node>
      <node id="172">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>timer.c</label>
        <link refid="timer_8c"/>
      </node>
      <node id="114">
        <label>sense.c</label>
        <link refid="sense_8c"/>
      </node>
      <node id="173">
        <label>rtl8139.c</label>
        <link refid="rtl8139_8c"/>
      </node>
      <node id="174">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="173" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>flanterm.c</label>
        <link refid="flanterm_8c"/>
      </node>
      <node id="165">
        <label>pci.c</label>
        <link refid="pci_8c"/>
      </node>
      <node id="99">
        <label>peekpoke.c</label>
        <link refid="peekpoke_8c"/>
      </node>
      <node id="17">
        <label>int_expression.c</label>
        <link refid="int__expression_8c"/>
      </node>
      <node id="109">
        <label>enquiry.c</label>
        <link refid="enquiry_8c"/>
      </node>
      <node id="62">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>debug.c</label>
        <link refid="debug_8c"/>
      </node>
      <node id="90">
        <label>array.c</label>
        <link refid="array_8c"/>
      </node>
      <node id="117">
        <label>write.c</label>
        <link refid="write_8c"/>
      </node>
      <node id="37">
        <label>initialisation-functions.h</label>
        <link refid="initialisation-functions_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>arp.c</label>
        <link refid="arp_8c"/>
      </node>
      <node id="32">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>lfn.c</label>
        <link refid="lfn_8c"/>
      </node>
      <node id="79">
        <label>serial.c</label>
        <link refid="serial_8c"/>
      </node>
      <node id="78">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>fpu.c</label>
        <link refid="fpu_8c"/>
      </node>
      <node id="128">
        <label>fb.c</label>
        <link refid="fb_8c"/>
      </node>
      <node id="103">
        <label>statement.c</label>
        <link refid="statement_8c"/>
      </node>
      <node id="148">
        <label>ioapic.c</label>
        <link refid="ioapic_8c"/>
      </node>
      <node id="36">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>kmalloc.c</label>
        <link refid="kmalloc_8c"/>
      </node>
      <node id="145">
        <label>gdt.c</label>
        <link refid="gdt_8c"/>
      </node>
      <node id="19">
        <label>unified_expression.c</label>
        <link refid="unified__expression_8c"/>
      </node>
      <node id="56">
        <label>mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="157">
        <label>dhcp.c</label>
        <link refid="dhcp_8c"/>
      </node>
      <node id="55">
        <label>mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>vector.c</label>
        <link refid="vector_8c"/>
      </node>
      <node id="96">
        <label>lowlevel.c</label>
        <link refid="lowlevel_8c"/>
      </node>
      <node id="89">
        <label>ata.c</label>
        <link refid="ata_8c"/>
      </node>
      <node id="131">
        <label>block_cache.c</label>
        <link refid="block__cache_8c"/>
      </node>
      <node id="70">
        <label>getdirectory.c</label>
        <link refid="getdirectory_8c"/>
      </node>
      <node id="18">
        <label>string_expression.c</label>
        <link refid="string__expression_8c"/>
      </node>
      <node id="84">
        <label>tinyalloc.c</label>
        <link refid="tinyalloc_8c"/>
      </node>
      <node id="108">
        <label>eject.c</label>
        <link refid="eject_8c"/>
      </node>
      <node id="91">
        <label>datetime.c</label>
        <link refid="datetime_8c"/>
      </node>
      <node id="16">
        <label>flow_control.c</label>
        <link refid="flow__control_8c"/>
      </node>
      <node id="53">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="146">
        <label>idt.c</label>
        <link refid="idt_8c"/>
      </node>
      <node id="45">
        <label>os_detection.c</label>
        <link refid="os__detection_8c"/>
      </node>
      <node id="38">
        <label>init.c</label>
        <link refid="init_8c"/>
      </node>
      <node id="107">
        <label>description.c</label>
        <link refid="description_8c"/>
      </node>
      <node id="82">
        <label>tinyalloc.h</label>
        <link refid="tinyalloc_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>iso9660.c</label>
        <link refid="iso9660_8c"/>
      </node>
      <node id="163">
        <label>tcp.c</label>
        <link refid="tcp_8c"/>
      </node>
      <node id="113">
        <label>read.c</label>
        <link refid="read_8c"/>
      </node>
      <node id="66">
        <label>createdirectory.c</label>
        <link refid="createdirectory_8c"/>
      </node>
      <node id="41">
        <label>crc32.c</label>
        <link refid="crc32_8c"/>
      </node>
      <node id="164">
        <label>udp.c</label>
        <link refid="udp_8c"/>
      </node>
      <node id="137">
        <label>fat.c</label>
        <link refid="fat_8c"/>
      </node>
      <node id="30">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>apic.c</label>
        <link refid="apic_8c"/>
      </node>
      <node id="54">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>error.c</label>
        <link refid="error_8c"/>
      </node>
      <node id="120">
        <label>clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="24">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>ap.c</label>
        <link refid="ap_8c"/>
      </node>
      <node id="35">
        <label>devicename.c</label>
        <link refid="devicename_8c"/>
      </node>
      <node id="144">
        <label>partition.c</label>
        <link refid="partition_8c"/>
      </node>
      <node id="80">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>unlinkfile.c</label>
        <link refid="unlinkfile_8c"/>
      </node>
      <node id="100">
        <label>process.c</label>
        <link refid="process_8c"/>
      </node>
      <node id="104">
        <label>string.c</label>
        <link refid="basic_2string_8c"/>
      </node>
      <node id="33">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>main.c</label>
        <link refid="basic_2main_8c"/>
      </node>
      <node id="136">
        <label>directory.c</label>
        <link refid="directory_8c"/>
      </node>
      <node id="140">
        <label>readfile.c</label>
        <link refid="fat32_2readfile_8c"/>
      </node>
      <node id="111">
        <label>identify.c</label>
        <link refid="identify_8c"/>
      </node>
      <node id="47">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>ethernet.c</label>
        <link refid="ethernet_8c"/>
      </node>
      <node id="141">
        <label>truncatefile.c</label>
        <link refid="fat32_2truncatefile_8c"/>
      </node>
      <node id="158">
        <label>dns.c</label>
        <link refid="dns_8c"/>
      </node>
      <node id="116">
        <label>trim.c</label>
        <link refid="trim_8c"/>
      </node>
      <node id="1">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="121">
        <label>map.c</label>
        <link refid="map_8c"/>
      </node>
      <node id="61">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="27">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>string.c</label>
        <link refid="string_8c"/>
      </node>
      <node id="150">
        <label>lapic_timer.c</label>
        <link refid="lapic__timer_8c"/>
      </node>
      <node id="13">
        <label>unified_expression.h</label>
        <link refid="unified__expression_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>recursive_file_copy.c</label>
        <link refid="recursive__file__copy_8c"/>
      </node>
      <node id="125">
        <label>drawing.c</label>
        <link refid="drawing_8c"/>
      </node>
      <node id="65">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>writefile.c</label>
        <link refid="retrofs_2writefile_8c"/>
      </node>
      <node id="73">
        <label>readfile.c</label>
        <link refid="retrofs_2readfile_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="map_8h_1a2ee54289d382d7476f66e159587409a0" prot="public" static="no">
        <name>map_insert_ptr</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <param><defname>v</defname></param>
        <initializer>    <ref refid="map_8c_1ab6d1eb0abc637a43dc8d2ec6ac97bbdb" kindref="member">map_insert</ref>((m), (uintptr_t)(k), (uintptr_t)(v))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="193" column="9" bodyfile="include/map.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1ac4ae2b9a1a25c11baf46dee1737d52ff" prot="public" static="no">
        <name>map_insert_or_assign_ptr</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <param><defname>v</defname></param>
        <initializer>    <ref refid="map_8c_1a26b4bd5d7b6f3a54901bf42fc6259895" kindref="member">map_insert_or_assign</ref>((m), (uintptr_t)(k), (uintptr_t)(v))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="196" column="9" bodyfile="include/map.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1ae1bc4847a36bdddd6d8252b4bb209b8d" prot="public" static="no">
        <name>map_find_ptr</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <param><defname>outp</defname></param>
        <initializer>    <ref refid="map_8c_1a8f8f3dc14d0ee889a876f54cf01c1995" kindref="member">map_find</ref>((m), (uintptr_t)(k), (uintptr_t *)(outp))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="199" column="9" bodyfile="include/map.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1acadb2ea1ebbaa0efd827c45067a95e61" prot="public" static="no">
        <name>map_erase_ptr</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <initializer>    <ref refid="map_8c_1aa1e7e0e7b938516874e198633b37c542" kindref="member">map_erase</ref>((m), (uintptr_t)(k))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="202" column="9" bodyfile="include/map.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1aa10962f76afc51050fd272690e53137b" prot="public" static="no">
        <name>map_insert_str</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <param><defname>v</defname></param>
        <initializer>    <ref refid="map_8c_1ab6d1eb0abc637a43dc8d2ec6ac97bbdb" kindref="member">map_insert</ref>((m), (uintptr_t)(const char *)(k), (uintptr_t)(v))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="206" column="9" bodyfile="include/map.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1a39d10031e1812715a184b64b90132c49" prot="public" static="no">
        <name>map_insert_or_assign_str</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <param><defname>v</defname></param>
        <initializer>    <ref refid="map_8c_1a26b4bd5d7b6f3a54901bf42fc6259895" kindref="member">map_insert_or_assign</ref>((m), (uintptr_t)(const char *)(k), (uintptr_t)(v))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="209" column="9" bodyfile="include/map.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1aac5fefdc196a5d23400f37521a10b825" prot="public" static="no">
        <name>map_find_str</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <param><defname>outp</defname></param>
        <initializer>    <ref refid="map_8c_1a8f8f3dc14d0ee889a876f54cf01c1995" kindref="member">map_find</ref>((m), (uintptr_t)(const char *)(k), (uintptr_t *)(outp))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="212" column="9" bodyfile="include/map.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="map_8h_1a27e89aea60721881f3c7083102a66ea9" prot="public" static="no">
        <name>map_erase_str</name>
        <param><defname>m</defname></param>
        <param><defname>k</defname></param>
        <initializer>    <ref refid="map_8c_1aa1e7e0e7b938516874e198633b37c542" kindref="member">map_erase</ref>((m), (uintptr_t)(const char *)(k))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="215" column="9" bodyfile="include/map.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="map_8h_1a94d6b9025eb5d49e30f2c502d28e7ef0" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* map_keycmp) (uintptr_t a, uintptr_t b, void *opaque)</definition>
        <argsstring>)(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_keycmp</name>
        <briefdescription>
<para>Comparator function for keys. </para>
        </briefdescription>
        <detaileddescription>
<para>Must return &lt;0 if a &lt; b, 0 if equal, &gt;0 if a &gt; b. The opaque pointer is passed through unchanged to allow custom ordering contexts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="22" column="9" bodyfile="include/map.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="map_8h_1a798a31f6093d65cc9ae3b215ed0c195f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmap" kindref="compound">map</ref> *</type>
        <definition>map* map_create</definition>
        <argsstring>(map_keycmp cmp, void *opaque)</argsstring>
        <name>map_create</name>
        <param>
          <type><ref refid="map_8h_1a94d6b9025eb5d49e30f2c502d28e7ef0" kindref="member">map_keycmp</ref></type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Create a map with the given key comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmp</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparator function (must not be NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opaque</parametername>
</parameternamelist>
<parameterdescription>
<para>User pointer passed to cmp on every compare (may be NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a new map, or NULL on allocation failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="30" column="5" bodyfile="src/containers/map.c" bodystart="92" bodyend="116" declfile="include/map.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a0bc189c02ac87873aeab3dfa96fc24a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void map_destroy</definition>
        <argsstring>(map *m)</argsstring>
        <name>map_destroy</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Destroy a map and free all nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to destroy (NULL is ignored) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="36" column="6" bodyfile="src/containers/map.c" bodystart="127" bodyend="134" declfile="include/map.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1aaf121473f731c15f97bc4f257d0c3ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void map_clear</definition>
        <argsstring>(map *m)</argsstring>
        <name>map_clear</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Remove all entries, leaving the map empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="42" column="6" bodyfile="src/containers/map.c" bodystart="136" bodyend="149" declfile="include/map.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1aafc3315934617b8b80091ac841b6394a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t map_size</definition>
        <argsstring>(const map *m)</argsstring>
        <name>map_size</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Number of key→value pairs currently stored. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Count of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="49" column="8" bodyfile="src/containers/map.c" bodystart="151" bodyend="156" declfile="include/map.h" declline="49" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1ab6d1eb0abc637a43dc8d2ec6ac97bbdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_insert</definition>
        <argsstring>(map *m, uintptr_t key, uintptr_t value)</argsstring>
        <name>map_insert</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert a key→value pair if the key is not present. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to insert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if inserted, 0 if key already existed (value unchanged), -1 on OOM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="58" column="5" bodyfile="src/containers/map.c" bodystart="463" bodyend="496" declfile="include/map.h" declline="58" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a26b4bd5d7b6f3a54901bf42fc6259895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_insert_or_assign</definition>
        <argsstring>(map *m, uintptr_t key, uintptr_t value)</argsstring>
        <name>map_insert_or_assign</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insert or assign: set value whether the key exists or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if inserted, 0 if updated existing, -1 on OOM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="67" column="5" bodyfile="src/containers/map.c" bodystart="498" bodyend="532" declfile="include/map.h" declline="67" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a8f8f3dc14d0ee889a876f54cf01c1995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_find</definition>
        <argsstring>(const map *m, uintptr_t key, uintptr_t *out_value)</argsstring>
        <name>map_find</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uintptr_t *</type>
          <declname>out_value</declname>
        </param>
        <briefdescription>
<para>Find a value by key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to look up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional; if non-NULL, receives the found value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if found (out_value set), 0 if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="76" column="5" bodyfile="src/containers/map.c" bodystart="534" bodyend="543" declfile="include/map.h" declline="76" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a21cc8043d5f1b885f9ece873e5ff3508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t *</type>
        <definition>uintptr_t* map_find_ref</definition>
        <argsstring>(map *m, uintptr_t key)</argsstring>
        <name>map_find_ref</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the stored value for an existing key. Useful for in-place updates without a second lookup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to look up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value if found, NULL otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="85" column="11" bodyfile="src/containers/map.c" bodystart="545" bodyend="552" declfile="include/map.h" declline="85" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1aa1e7e0e7b938516874e198633b37c542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_erase</definition>
        <argsstring>(map *m, uintptr_t key)</argsstring>
        <name>map_erase</name>
        <param>
          <type><ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Erase an entry by key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to erase </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if erased, 0 if key not present </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="93" column="5" bodyfile="src/containers/map.c" bodystart="554" bodyend="601" declfile="include/map.h" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a33d8751da6741c5ffbd15389c2f69dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_lower_bound</definition>
        <argsstring>(const map *m, uintptr_t key, map_iter *it_out)</argsstring>
        <name>map_lower_bound</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>Lower bound: first key &gt;= query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Query key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator positioned at lower bound on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a bound exists (iterator valid), 0 if all keys &lt; query (no bound) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="102" column="5" bodyfile="src/containers/map.c" bodystart="603" bodyend="622" declfile="include/map.h" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a60d2540eef14f07c363aaa21cdb98349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_upper_bound</definition>
        <argsstring>(const map *m, uintptr_t key, map_iter *it_out)</argsstring>
        <name>map_upper_bound</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>Upper bound: first key &gt; query. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Query key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator positioned at upper bound on success </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a bound exists, 0 if all keys &lt;= query </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="111" column="5" bodyfile="src/containers/map.c" bodystart="624" bodyend="643" declfile="include/map.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a40b29c55374b2d38fe5186c2e343cd3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_begin</definition>
        <argsstring>(const map *m, map_iter *it_out)</argsstring>
        <name>map_begin</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>Begin iterator (smallest key). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to iterate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives iterator; becomes invalid if map is modified </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if non-empty and iterator valid, 0 if empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="119" column="5" bodyfile="src/containers/map.c" bodystart="645" bodyend="658" declfile="include/map.h" declline="119" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a7ba83188bccdf2d233d24737469a54b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void map_end</definition>
        <argsstring>(const map *m, map_iter *it_out)</argsstring>
        <name>map_end</name>
        <param>
          <type>const <ref refid="structmap" kindref="compound">map</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it_out</declname>
        </param>
        <briefdescription>
<para>End iterator (one past largest). Mostly for symmetry; rarely needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Map to iterate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>it_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives a sentinel end iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="126" column="6" bodyfile="src/containers/map.c" bodystart="660" bodyend="667" declfile="include/map.h" declline="126" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1ab8ec606b0bd228134879f7f28d620a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_next</definition>
        <argsstring>(map_iter *it)</argsstring>
        <name>map_next</name>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Advance iterator to next in-order key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to advance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if moved to a valid element, 0 if now at end </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="133" column="5" bodyfile="src/containers/map.c" bodystart="669" bodyend="695" declfile="include/map.h" declline="133" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a50ecedeb7b27069f96844f13e0f0947e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_prev</definition>
        <argsstring>(map_iter *it)</argsstring>
        <name>map_prev</name>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Move iterator to previous in-order key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator to retreat </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if moved to a valid element, 0 if now before begin </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="140" column="5" bodyfile="src/containers/map.c" bodystart="697" bodyend="721" declfile="include/map.h" declline="140" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1ac779d6345f9bd476df22caedc791ba0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t map_iter_key</definition>
        <argsstring>(const map_iter *it)</argsstring>
        <name>map_iter_key</name>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Access the key at an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator (must be valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="147" column="11" bodyfile="src/containers/map.c" bodystart="723" bodyend="725" declfile="include/map.h" declline="147" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a0ad21c9194c6e8fa9f8c61fa0836aa68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t map_iter_value</definition>
        <argsstring>(const map_iter *it)</argsstring>
        <name>map_iter_value</name>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Access the value at an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator (must be valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="154" column="11" bodyfile="src/containers/map.c" bodystart="727" bodyend="729" declfile="include/map.h" declline="154" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a05d350e26c79059c19674e757b68bb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t *</type>
        <definition>uintptr_t* map_iter_value_ref</definition>
        <argsstring>(map_iter *it)</argsstring>
        <name>map_iter_value_ref</name>
        <param>
          <type><ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Access a mutable reference to the value at an iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator (must be valid) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="161" column="11" bodyfile="src/containers/map.c" bodystart="731" bodyend="734" declfile="include/map.h" declline="161" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a15914e06fa39b75099f8ddcbe82c53b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_iter_equal</definition>
        <argsstring>(const map_iter *a, const map_iter *b)</argsstring>
        <name>map_iter_equal</name>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structmap__iter" kindref="compound">map_iter</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check whether two iterators are equal (same position). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First iterator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if equal, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="169" column="5" bodyfile="src/containers/map.c" bodystart="736" bodyend="750" declfile="include/map.h" declline="169" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a3823698afd3e06ae76f6eb8475598715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_cmp_u64</definition>
        <argsstring>(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_cmp_u64</name>
        <param>
          <type>uintptr_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Default numeric comparator: a&lt;b ? -1 : a&gt;b ? +1 : 0. Interprets keys as unsigned 64-bit (via uintptr_t). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="175" column="5" bodyfile="src/containers/map.c" bodystart="752" bodyend="763" declfile="include/map.h" declline="175" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a4ea8ccd03f282ef788e0e01fc90d683e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_cmp_cstr</definition>
        <argsstring>(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_cmp_cstr</name>
        <param>
          <type>uintptr_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Default string comparator for const char* keys (strcmp). Keys must be NUL-terminated C strings (stored as pointers in uintptr_t). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="181" column="5" bodyfile="src/containers/map.c" bodystart="765" bodyend="778" declfile="include/map.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="map_8h_1a4fe01316c4f8383ec4a31bad2062dbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int map_cmp_cstr_nocase</definition>
        <argsstring>(uintptr_t a, uintptr_t b, void *opaque)</argsstring>
        <name>map_cmp_cstr_nocase</name>
        <param>
          <type>uintptr_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
<para>Case-insensitive string comparator for const char* (ASCII). Keys must be NUL-terminated C strings (stored as pointers in uintptr_t). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/map.h" line="187" column="5" bodyfile="src/containers/map.c" bodystart="780" bodyend="793" declfile="include/map.h" declline="187" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/map.h"/>
  </compounddef>
</doxygen>
