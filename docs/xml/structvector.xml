<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structvector" kind="struct" language="C++" prot="public">
    <compoundname>vector</compoundname>
    <includes local="no">vector.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structvector_1ad1d21cc5273b756f10daac94922284eb" prot="public" static="no" mutable="no">
        <type>uintptr_t *</type>
        <definition>uintptr_t* vector::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to contiguous storage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vector.h" line="17" column="11" bodyfile="include/vector.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvector_1aa1f049988a4273ca370832985c26653b" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t vector::count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of elements in use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vector.h" line="18" column="8" bodyfile="include/vector.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structvector_1a59f95fbd95d6f3e84e98a722a66e629a" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t vector::capacity</definition>
        <argsstring></argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocated capacity in elements </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/vector.h" line="19" column="8" bodyfile="include/vector.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contiguous dynamic array of uintptr_t. </para>
    </briefdescription>
    <detaileddescription>
<para>Behaves like a simplified C++ std::vector but for scalars (pointers, integers, handles). Elements are stored linearly, cache-friendly. Growth is automatic on push or insert.</para>
<para>Order-preserving erase/insert are the defaults. For O(1) removal without preserving order, use <ref refid="vector_8h_1a65d68d589e4e1198b180d7405f43f174" kindref="member">vector_erase_swap()</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>size_t</label>
      </node>
      <node id="2">
        <label>uintptr_t *</label>
      </node>
      <node id="1">
        <label>vector</label>
        <link refid="structvector"/>
        <childnode refid="2" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>capacity</edgelabel>
          <edgelabel>count</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/vector.h" line="16" column="1" bodyfile="include/vector.h" bodystart="16" bodyend="20"/>
    <listofallmembers>
      <member refid="structvector_1a59f95fbd95d6f3e84e98a722a66e629a" prot="public" virt="non-virtual"><scope>vector</scope><name>capacity</name></member>
      <member refid="structvector_1aa1f049988a4273ca370832985c26653b" prot="public" virt="non-virtual"><scope>vector</scope><name>count</name></member>
      <member refid="structvector_1ad1d21cc5273b756f10daac94922284eb" prot="public" virt="non-virtual"><scope>vector</scope><name>data</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
