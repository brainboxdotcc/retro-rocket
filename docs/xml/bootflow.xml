<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="bootflow" kind="page">
    <compoundname>bootflow</compoundname>
    <title>Retro Rocket Boot Flow</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This document describes the execution path from power-on to a running shell in <bold>Retro Rocket</bold> - a modern-day BBC Microâ€“inspired operating system. It walks through each stage of the boot process, from initial assembly handoff to the multitasking interpreter loop that drives userland programs.</para>
<para><hruler/>
</para>
<sect2 id="bootflow_1autotoc_md1211">
<title>Overview</title>
<para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Stage   </para>
</entry><entry thead="yes"><para>Description    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>boot.asm</computeroutput>   </para>
</entry><entry thead="no"><para>Enables FPU/SSE, calls <computeroutput>kmain()</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kmain()</computeroutput>   </para>
</entry><entry thead="no"><para>Calls <computeroutput>init()</computeroutput> to bring up system subsystems    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>init()</computeroutput>   </para>
</entry><entry thead="no"><para>Sets up memory, devices, filesystems, etc    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>init_process()</computeroutput>   </para>
</entry><entry thead="no"><para>Creates process from <computeroutput>/programs/init</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>/programs/init</computeroutput> (BASIC)   </para>
</entry><entry thead="no"><para>Mounts filesystems, sets globals, chains shell    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>/programs/rocketsh</computeroutput>   </para>
</entry><entry thead="no"><para>Shell process - user interaction begins   </para>
</entry></row>
</table>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="bootflow_1autotoc_md1213">
<title>1. Boot Assembly: &lt;tt&gt;boot.asm&lt;/tt&gt;</title>
<para>The kernel is entered via the symbol <computeroutput>boot_bsp</computeroutput>, defined in NASM assembly.</para>
<para><programlisting><codeline><highlight class="normal">bits<sp/>64</highlight></codeline>
<codeline><highlight class="normal">section<sp/>.text</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>kmain</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>boot_bsp</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>exception_handlers</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>enable_fpu</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>enable_sse</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">boot_bsp:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>call<sp/>enable_fpu</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>call<sp/>enable_sse</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mov<sp/>rax,<sp/>kmain</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>call<sp/>rax</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>jmp<sp/>$<sp/><sp/>;<sp/>park<sp/>the<sp/>CPU</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>FPU and SSE are enabled for floating point support</para>
</listitem><listitem><para><computeroutput>kmain()</computeroutput> is the first C-level entry point</para>
</listitem><listitem><para>Limine has already set up the page tables and higher-half mapping</para>
</listitem><listitem><para>No paging, GDT, or IDT setup is done here - all handled later</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="bootflow_1autotoc_md1215">
<title>2. Kernel Entry Point: &lt;tt&gt;kmain()&lt;/tt&gt;</title>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kmain()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bring<sp/>up<sp/>network<sp/>if<sp/>there<sp/>is<sp/>an<sp/>active<sp/>network<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mount<sp/>root<sp/>filesystem;<sp/>CD<sp/>for<sp/>live<sp/>CD,<sp/>or<sp/>HDD<sp/>for<sp/>installed<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(determined<sp/>by<sp/>boot<sp/>device)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>init_process();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Calls <computeroutput>init()</computeroutput> to bring up subsystems</para>
</listitem><listitem><para>Starts networking drivers</para>
</listitem><listitem><para>Mounts the boot filesystem</para>
</listitem><listitem><para>Enters <computeroutput>init_process()</computeroutput> which boots into userland</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="bootflow_1autotoc_md1217">
<title>3. Core System Initialisation: &lt;tt&gt;init()&lt;/tt&gt;</title>
<para>Each function is executed in sequence with logging.</para>
<sect3 id="bootflow_1autotoc_md1218">
<title>Initialisation Order</title>
<para><table rows="19" cols="3"><row>
<entry thead="yes"><para>Order   </para>
</entry><entry thead="yes"><para>Function   </para>
</entry><entry thead="yes"><para>Purpose    </para>
</entry></row>
<row>
<entry thead="no"><para>1   </para>
</entry><entry thead="no"><para><computeroutput>init_heap</computeroutput>   </para>
</entry><entry thead="no"><para>Memory allocation    </para>
</entry></row>
<row>
<entry thead="no"><para>2   </para>
</entry><entry thead="no"><para><computeroutput>validate_limine_page_tables_and_gdt</computeroutput>   </para>
</entry><entry thead="no"><para>Limine checks    </para>
</entry></row>
<row>
<entry thead="no"><para>3   </para>
</entry><entry thead="no"><para><computeroutput>init_console</computeroutput>   </para>
</entry><entry thead="no"><para>Terminal setup (Flanterm)    </para>
</entry></row>
<row>
<entry thead="no"><para>4   </para>
</entry><entry thead="no"><para><computeroutput>init_cores</computeroutput>   </para>
</entry><entry thead="no"><para>Single-core bring-up, ACPI    </para>
</entry></row>
<row>
<entry thead="no"><para>5   </para>
</entry><entry thead="no"><para><computeroutput>init_idt</computeroutput>   </para>
</entry><entry thead="no"><para>Interrupt Descriptor Table    </para>
</entry></row>
<row>
<entry thead="no"><para>6   </para>
</entry><entry thead="no"><para><computeroutput>init_pci</computeroutput>   </para>
</entry><entry thead="no"><para>PCI bus scan    </para>
</entry></row>
<row>
<entry thead="no"><para>7   </para>
</entry><entry thead="no"><para><computeroutput>init_realtime_clock</computeroutput>   </para>
</entry><entry thead="no"><para>Realtime wall clock    </para>
</entry></row>
<row>
<entry thead="no"><para>8   </para>
</entry><entry thead="no"><para><computeroutput>init_devicenames</computeroutput>   </para>
</entry><entry thead="no"><para>Friendly device names    </para>
</entry></row>
<row>
<entry thead="no"><para>9   </para>
</entry><entry thead="no"><para><computeroutput>init_keyboard</computeroutput>   </para>
</entry><entry thead="no"><para>Keyboard setup    </para>
</entry></row>
<row>
<entry thead="no"><para>10   </para>
</entry><entry thead="no"><para><computeroutput>init_ide</computeroutput>   </para>
</entry><entry thead="no"><para>IDE disk support    </para>
</entry></row>
<row>
<entry thead="no"><para>11   </para>
</entry><entry thead="no"><para><computeroutput>init_ahci</computeroutput>   </para>
</entry><entry thead="no"><para>AHCI disk support    </para>
</entry></row>
<row>
<entry thead="no"><para>12   </para>
</entry><entry thead="no"><para><computeroutput>init_filesystem</computeroutput>   </para>
</entry><entry thead="no"><para>VFS infrastructure    </para>
</entry></row>
<row>
<entry thead="no"><para>13   </para>
</entry><entry thead="no"><para><computeroutput>init_iso9660</computeroutput>   </para>
</entry><entry thead="no"><para>ISO9660 read-only FS    </para>
</entry></row>
<row>
<entry thead="no"><para>14   </para>
</entry><entry thead="no"><para><computeroutput>init_devfs</computeroutput>   </para>
</entry><entry thead="no"><para>/devices virtual filesystem    </para>
</entry></row>
<row>
<entry thead="no"><para>15   </para>
</entry><entry thead="no"><para><computeroutput>init_fat32</computeroutput>   </para>
</entry><entry thead="no"><para>FAT32 support    </para>
</entry></row>
<row>
<entry thead="no"><para>16   </para>
</entry><entry thead="no"><para><computeroutput>init_modules</computeroutput>   </para>
</entry><entry thead="no"><para>Initialise module loader    </para>
</entry></row>
<row>
<entry thead="no"><para>17   </para>
</entry><entry thead="no"><para><computeroutput>init_rtl8139</computeroutput>   </para>
</entry><entry thead="no"><para>Realtek RTL8139 network driver    </para>
</entry></row>
<row>
<entry thead="no"><para>18   </para>
</entry><entry thead="no"><para><computeroutput>init_e1000</computeroutput>   </para>
</entry><entry thead="no"><para>Intel e1000 network driver   </para>
</entry></row>
</table>
</para>
<para><hruler/>
</para>
</sect3>
</sect2>
<sect2 id="bootflow_1autotoc_md1220">
<title>4. Process Management and Shell Launch</title>
<para>After filesystems are ready, <computeroutput>init_process()</computeroutput> loads the first userland BASIC program:</para>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_process()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>other<sp/>initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>process_t*<sp/>init<sp/>=<sp/>proc_load(</highlight><highlight class="stringliteral">&quot;/programs/init&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preboot_fail(</highlight><highlight class="stringliteral">&quot;/programs/init<sp/>missing<sp/>or<sp/>invalid!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>proc_loop();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<sect3 id="bootflow_1autotoc_md1221">
<title>&lt;tt&gt;proc_loop()&lt;/tt&gt;</title>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>proc_loop()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc_timer();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc_run_next();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_idle_tasks();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Every iteration advances the current process</para>
</listitem><listitem><para>Each process runs one line of code</para>
</listitem><listitem><para>Terminated processes are cleaned up</para>
</listitem><listitem><para>System halts if no processes remain</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect3>
</sect2>
<sect2 id="bootflow_1autotoc_md1223">
<title>5. Userland Bootstrap: &lt;tt&gt;/programs/init&lt;/tt&gt;</title>
<para>This BASIC program acts like a boot script (like <computeroutput>AUTOEXEC.BAT</computeroutput> or <computeroutput>!Boot</computeroutput>):</para>
<para><programlisting filename=".basic"><codeline><highlight class="normal">GLOBAL<sp/>LIB$<sp/>=<sp/>&quot;/programs/libraries&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;Mounting<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal">COLOR<sp/>14</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;filesystems&quot;;</highlight></codeline>
<codeline><highlight class="normal">COLOR<sp/>7</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;...&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MOUNT<sp/>&quot;/devices&quot;,<sp/>&quot;&quot;,<sp/>&quot;devfs&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REPEAT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Launching<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>COLOR<sp/>14</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;shell&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>COLOR<sp/>7</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;...&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CHAIN<sp/>&quot;/programs/rocketsh&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Shell<sp/>process<sp/>ended.&quot;</highlight></codeline>
<codeline><highlight class="normal">UNTIL<sp/>FALSE</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Sets globals</para>
</listitem><listitem><para>Mounts extra filesystems</para>
</listitem><listitem><para>Launches <computeroutput>rocketsh</computeroutput></para>
</listitem><listitem><para>Loops forever, reloading the shell</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="bootflow_1autotoc_md1225">
<title>ðŸ”š Full Boot Timeline</title>
<para><programlisting><codeline><highlight class="normal">boot.asm</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">enable_fpu<sp/>/<sp/>enable_sse</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">kmain()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">init()<sp/>â†’<sp/>subsystems<sp/>(heap,<sp/>IDT,<sp/>PCI,<sp/>FS,<sp/>etc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">filesystem_mount(&quot;/&quot;,<sp/>&quot;cd0&quot;,<sp/>&quot;iso9660&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">init_process()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">proc_load(&quot;/programs/init&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">/programs/init<sp/>(BASIC):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>MOUNT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>CHAIN<sp/>&quot;/programs/rocketsh&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>â†“</highlight></codeline>
<codeline><highlight class="normal">/programs/rocketsh<sp/>(shell)</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
<sect2 id="bootflow_1autotoc_md1227">
<title>âœ¨ Why This Design Works</title>
<para>Retro Rocket&apos;s boot process is:</para>
<para><itemizedlist>
<listitem><para><bold>Transparent</bold>: Fully traceable from boot to shell</para>
</listitem><listitem><para><bold>Modular</bold>: Replace shell or init without kernel changes</para>
</listitem><listitem><para><bold>Learnable</bold>: Great for teaching systems programming</para>
</listitem><listitem><para><bold>Retro-powered</bold>: BASIC everywhere - even <computeroutput>init</computeroutput> </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <location file="docpages/kernel-dev/BOOTFLOW.md"/>
  </compounddef>
</doxygen>
