<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="GETVAR" kind="page">
    <compoundname>GETVAR</compoundname>
    <title>GETVAR$ Function</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".basic"><codeline><highlight class="normal">GETVAR$(string-expression)</highlight></codeline>
</programlisting></para>
<para>Retrieves the value of a <bold>string variable</bold> by its <bold>name</bold>. If the variable does not exist, an error is thrown. Use EXISTSVARS to check for existence without triggering an error.</para>
<para><hruler/>
</para>
<sect3 id="GETVAR_1autotoc_md587">
<title>Examples</title>
<para><programlisting filename=".basic"><codeline><highlight class="normal">REM<sp/>Define<sp/>a<sp/>string<sp/>variable</highlight></codeline>
<codeline><highlight class="normal">username$<sp/>=<sp/>&quot;Alice&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">REM<sp/>Retrieve<sp/>it<sp/>by<sp/>name</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>GETVAR$(&quot;username$&quot;)</highlight></codeline>
</programlisting></para>
<para>Produces <computeroutput>Alice</computeroutput>.</para>
<para><programlisting filename=".basic"><codeline><highlight class="normal">REM<sp/>Attempting<sp/>to<sp/>get<sp/>a<sp/>missing<sp/>variable</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>GETVAR$(&quot;doesnotexist$&quot;)</highlight></codeline>
</programlisting></para>
<para>Raises an error.</para>
<para><programlisting filename=".basic"><codeline><highlight class="normal">REM<sp/>Safe<sp/>access<sp/>with<sp/>EXISTSVARS</highlight></codeline>
<codeline><highlight class="normal">IF<sp/>EXISTSVARS(&quot;config$&quot;)<sp/>THEN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Config<sp/>=<sp/>&quot;;<sp/>GETVAR$(&quot;config$&quot;)</highlight></codeline>
<codeline><highlight class="normal">ELSE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Config<sp/>variable<sp/>not<sp/>set&quot;</highlight></codeline>
<codeline><highlight class="normal">ENDIF</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
<sect3 id="GETVAR_1autotoc_md589">
<title>Notes</title>
<para><itemizedlist>
<listitem><para>The string must exactly match the variable name, including the <computeroutput>$</computeroutput> suffix for string variables.</para>
</listitem><listitem><para>If the name refers to a variable of a different type (integer or real), an error is raised.</para>
</listitem><listitem><para>Returns a null-terminated string.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><bold>See also:</bold> <ref refid="GETVARI" kindref="compound">GETVARI</ref> · <ref refid="GETVARR" kindref="compound">GETVARR</ref> · EXISTSVARS </para>
</sect3>
    </detaileddescription>
    <location file="docpages/basic-language-reference/functions/string/GETVARSTRING.md"/>
  </compounddef>
</doxygen>
