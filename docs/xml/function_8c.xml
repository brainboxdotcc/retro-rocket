<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="function_8c" kind="file" language="C++">
    <compoundname>function.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <incdepgraph>
      <node id="32">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="20">
        <label>basic.h</label>
        <link refid="basic_8h"/>
      </node>
      <node id="35">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="47">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>function.c</label>
        <link refid="function_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="59">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>basic_tokenizer.h</label>
        <link refid="basic__tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="23">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="41">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="42">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="60">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="55">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="27">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
      </node>
      <node id="40">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="53">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="30">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="19">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="function_8c_1a5198f82952aefc05784e4e66600f5eec" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbasic__int__fn" kindref="compound">basic_int_fn</ref></type>
        <definition>struct basic_int_fn builtin_int[]</definition>
        <argsstring>[]</argsstring>
        <name>builtin_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="1" column="0" bodyfile="src/basic/function.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="function_8c_1a5262339566585d7334a75318cad5d55d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbasic__double__fn" kindref="compound">basic_double_fn</ref></type>
        <definition>struct basic_double_fn builtin_double[]</definition>
        <argsstring>[]</argsstring>
        <name>builtin_double</name>
        <initializer>= {
	{ <ref refid="basic_2maths_8c_1ae583990f38cdcad325bb10a589ee00c7" kindref="member">basic_cos</ref>,         &quot;COS&quot;     },
	{ basic_getvar_real, &quot;GETVARR&quot; },
	{ basic_pow,         &quot;POW&quot;     },
	{ basic_realval,     &quot;REALVAL&quot; },
	{ basic_sin,         &quot;SIN&quot;     },
	{ basic_tan,         &quot;TAN&quot;     },
	{ basic_sqrt,        &quot;SQRT&quot;    },
	{ basic_sqrt,        &quot;SQR&quot;     },
	{ basic_atan,        &quot;ATAN&quot;    },
	{ basic_atan2,       &quot;ATAN2&quot;   },
	{ basic_ceil,        &quot;CEIL&quot;    },
	{ basic_round,       &quot;ROUND&quot;   },
	{ basic_fmod,        &quot;FMOD&quot;    },
	{ basic_asn,         &quot;ASN&quot;     },
	{ basic_acs,         &quot;ACS&quot;     },
	{ basic_exp,         &quot;EXP&quot;     },
	{ basic_log,         &quot;LOG&quot;     },
	{ basic_deg,         &quot;DEG&quot;     },
	{ basic_rad,         &quot;RAD&quot;     },
	{ NULL,              NULL      },
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="1" column="0" bodyfile="src/basic/function.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="function_8c_1ae2564f0b96c872eff897483d8b856609" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structbasic__str__fn" kindref="compound">basic_str_fn</ref></type>
        <definition>struct basic_str_fn builtin_str[]</definition>
        <argsstring>[]</argsstring>
        <name>builtin_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="1" column="0" bodyfile="src/basic/function.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="function_8c_1ae64f409fce646c35026a2f3c376601fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void begin_comma_list</definition>
        <argsstring>(struct ub_proc_fn_def *def, struct basic_ctx *ctx)</argsstring>
        <name>begin_comma_list</name>
        <param>
          <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="116" column="6" bodyfile="src/basic/function.c" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a98495ca274489e72135a13df2a16caca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t extract_comma_list</definition>
        <argsstring>(struct ub_proc_fn_def *def, struct basic_ctx *ctx)</argsstring>
        <name>extract_comma_list</name>
        <param>
          <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="123" column="9" bodyfile="src/basic/function.c" bodystart="123" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a9717f394c3cd17edb3244faced02ce20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* basic_eval_str_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx)</argsstring>
        <name>basic_eval_str_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="185" column="12" bodyfile="src/basic/function.c" bodystart="185" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1ae70ef13e23858d5c0b0ea830e546b60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char basic_builtin_int_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, int64_t *res)</argsstring>
        <name>basic_builtin_int_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Check if a function name is a builtin function returning an integer value, if it is, call its handler and set its return value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>function name to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>interpreter context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to return value of function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t true/false return </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="232" column="6" bodyfile="src/basic/function.c" bodystart="232" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a788080c9c038e4ad8b9c5f3dbd7ac808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char basic_builtin_double_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_builtin_double_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="243" column="6" bodyfile="src/basic/function.c" bodystart="243" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1ab2e3f135cc94d8d1fd6ea171cf0274ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char basic_builtin_str_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, char **res)</argsstring>
        <name>basic_builtin_str_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Check if a function name is a builtin function returning a string, if it is, call its handler and set its return value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn_name</parametername>
</parameternamelist>
<parameterdescription>
<para>function name to look for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>interpreter context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to return value of function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t true/false return </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="263" column="6" bodyfile="src/basic/function.c" bodystart="263" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a18a7475dc2375b336b77a16072ab671e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_eval_int_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx)</argsstring>
        <name>basic_eval_int_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="275" column="9" bodyfile="src/basic/function.c" bodystart="275" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a0c16defca496eb524d314acda0d90cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_eval_double_fn</definition>
        <argsstring>(const char *fn_name, struct basic_ctx *ctx, double *res)</argsstring>
        <name>basic_eval_double_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="315" column="6" bodyfile="src/basic/function.c" bodystart="315" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a4c1e9351254f2acdf056b70fb6683f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_parse_fn</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_parse_fn</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="353" column="6" bodyfile="src/basic/function.c" bodystart="353" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1afbcb040352042a6a451104022f4c33c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
        <definition>struct ub_proc_fn_def* basic_find_fn</definition>
        <argsstring>(const char *name, struct basic_ctx *ctx)</argsstring>
        <name>basic_find_fn</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="468" column="22" bodyfile="src/basic/function.c" bodystart="468" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1af0412313c94342985b8a8c2cb7e8808f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void basic_free_defs</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_free_defs</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="479" column="6" bodyfile="src/basic/function.c" bodystart="479" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a18b719731b4f7ffbad27ebf12e1ec348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_builtin_double_fn</definition>
        <argsstring>(const char *fn_name)</argsstring>
        <name>is_builtin_double_fn</name>
        <param>
          <type>const char *</type>
          <declname>fn_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="496" column="6" bodyfile="src/basic/function.c" bodystart="496" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1adeda5bab28da3cd45cffea5d21407903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>proc_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="505" column="6" bodyfile="src/basic/function.c" bodystart="505" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a5c11e3d5030f995bd246a57cc0ab5cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void def_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>def_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="551" column="6" bodyfile="src/basic/function.c" bodystart="551" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a1066dbd361fdf3e3ee94c502348abb87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eq_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>eq_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="563" column="6" bodyfile="src/basic/function.c" bodystart="563" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="function_8c_1a33e9e1f737477f45cac071d8959bae12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void retproc_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>retproc_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/function.c" line="584" column="6" bodyfile="src/basic/function.c" bodystart="584" bodyend="600"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>BASIC function/procedure functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/basic/function.c"/>
  </compounddef>
</doxygen>
