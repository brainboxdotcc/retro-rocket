<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="WHILE" kind="page">
    <compoundname>WHILE</compoundname>
    <title>WHILE Keyword</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".basic"><codeline><highlight class="normal">WHILE<sp/>expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>statements</highlight></codeline>
<codeline><highlight class="normal">ENDWHILE</highlight></codeline>
</programlisting></para>
<para>Executes the block while <computeroutput>expression</computeroutput> evaluates to <bold>true</bold>. <linebreak/>
 The test happens <bold>before</bold> each iteration, so the body may execute <bold>zero times</bold>.</para>
<para><simplesect kind="remark"><para><computeroutput>WHILE</computeroutput> must be closed with <computeroutput>ENDWHILE</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>The spaced form <computeroutput>END WHILE</computeroutput> is <bold>not</bold> recognised.</para>
</simplesect>
<hruler/>
</para>
<sect3 id="WHILE_1autotoc_md1136">
<title>Behaviour</title>
<para><itemizedlist>
<listitem><para><computeroutput>ENDWHILE</computeroutput> matches the <bold>nearest unmatched</bold> <computeroutput>WHILE</computeroutput>.</para>
</listitem><listitem><para>Loops may be <bold>nested</bold> freely.</para>
</listitem><listitem><para>The condition <computeroutput>expression</computeroutput> is <bold>re-evaluated every iteration</bold>.</para>
</listitem><listitem><para>If the condition never becomes <bold>false</bold>, the loop will run <bold>forever</bold> (until an error or external break).</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Make sure something inside the loop <bold>changes</bold> the values used by <computeroutput>expression</computeroutput>, or the loop will never terminate.</para>
</simplesect>
<hruler/>
</para>
</sect3>
<sect3 id="WHILE_1autotoc_md1138">
<title>Examples</title>
<para><bold>Simple count</bold> <programlisting filename=".basic"><codeline><highlight class="normal">N<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">WHILE<sp/>N<sp/>&lt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;N<sp/>=<sp/>&quot;;<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>N<sp/>=<sp/>N<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal">ENDWHILE</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;Done&quot;</highlight></codeline>
</programlisting></para>
<para><bold>Zero-iteration case (condition false at start)</bold> <programlisting filename=".basic"><codeline><highlight class="normal">X<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal">WHILE<sp/>X<sp/>&lt;<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;This<sp/>never<sp/>prints&quot;</highlight></codeline>
<codeline><highlight class="normal">ENDWHILE</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;X<sp/>was<sp/>not<sp/>less<sp/>than<sp/>0&quot;</highlight></codeline>
</programlisting></para>
<para><bold>Nested loops</bold> <programlisting filename=".basic"><codeline><highlight class="normal">PRINT<sp/>&quot;START&quot;</highlight></codeline>
<codeline><highlight class="normal">N<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">WHILE<sp/>N<sp/>&lt;<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;OUTER<sp/>N<sp/>=<sp/>&quot;;<sp/>N</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>O<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>WHILE<sp/>O<sp/>&lt;<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;INNER<sp/>O<sp/>=<sp/>&quot;;<sp/>O</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O<sp/>=<sp/>O<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENDWHILE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>N<sp/>=<sp/>N<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal">ENDWHILE</highlight></codeline>
<codeline><highlight class="normal">PRINT<sp/>&quot;LOOPS<sp/>DONE&quot;</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
<sect3 id="WHILE_1autotoc_md1140">
<title>Notes</title>
<para><itemizedlist>
<listitem><para>Use <computeroutput>REPEAT ... UNTIL</computeroutput> if you need a <bold>post-test</bold> loop that runs the body at least once.</para>
</listitem><listitem><para>The condition is a normal boolean <bold>expression</bold>; use comparisons like <computeroutput>=</computeroutput>, <computeroutput>&lt;&gt;</computeroutput>, <computeroutput>&lt;</computeroutput>, <computeroutput>&gt;</computeroutput>, <computeroutput>&lt;=</computeroutput>, <computeroutput>&gt;=</computeroutput> and combine them with your available operators.</para>
</listitem></itemizedlist>
</para>
<para><bold>See also:</bold> <linebreak/>
 <ref refid="REPEAT" kindref="compound">REPEAT</ref> Â· <ref refid="ENDIF" kindref="compound">ENDIF</ref> </para>
</sect3>
    </detaileddescription>
    <location file="docpages/basic-language-reference/keywords/WHILE.md"/>
  </compounddef>
</doxygen>
