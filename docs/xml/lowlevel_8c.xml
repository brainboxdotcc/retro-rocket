<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lowlevel_8c" kind="file" language="C++">
    <compoundname>lowlevel.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <includes local="no">cpuid.h</includes>
    <incdepgraph>
      <node id="57">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>basic/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>stdarg.h</label>
      </node>
      <node id="60">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="29">
        <label>basic/validation.h</label>
        <link refid="validation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>basic/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>basic/structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>stdnoreturn.h</label>
      </node>
      <node id="27">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>basic/peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="82">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>basic/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="47">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="88">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>basic/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>basic/flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>cpuid.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="66">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>basic/builtin_real_functions.h</label>
        <link refid="builtin__real__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="68">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="83">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="85">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>basic/sockets.h</label>
        <link refid="sockets_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>basic/defines.h</label>
        <link refid="defines_8h"/>
      </node>
      <node id="17">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lowlevel.c</label>
        <link refid="lowlevel_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>basic/builtin_integer_functions.h</label>
        <link refid="builtin__integer__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="51">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>basic/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="32">
        <label>basic/builtin_string_functions.h</label>
        <link refid="builtin__string__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>basic/console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>basic/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="33">
        <label>basic/builtin_file_io_functions.h</label>
        <link refid="builtin__file__io__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>scsi.h</label>
        <link refid="scsi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>basic/lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="21">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>basic/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>basic/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lowlevel_8c_1a19c0d5d102db5c468f8f07bfed33ce3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx, int leaf)</argsstring>
        <name>write_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leaf</declname>
        </param>
        <briefdescription>
<para>Writes the CPUID information into the provided context for a specific leaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the CPUID information for a given leaf and stores the results in the <computeroutput>last_cpuid_result</computeroutput> field of the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPUID leaf to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="8" column="6" bodyfile="src/basic/lowlevel.c" bodystart="8" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a5f6f5e32c9a01fab0b640a11b59334d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_cpuidex</definition>
        <argsstring>(struct basic_ctx *ctx, int leaf, int subleaf)</argsstring>
        <name>write_cpuidex</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leaf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subleaf</declname>
        </param>
        <briefdescription>
<para>Writes the CPUID information into the provided context for a specific leaf and subleaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the CPUID information for a given leaf and subleaf and stores the results in the <computeroutput>last_cpuid_result</computeroutput> field of the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPUID leaf to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subleaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPUID subleaf to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="18" column="6" bodyfile="src/basic/lowlevel.c" bodystart="18" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1af80c26826e9de2d0deac499b7397747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t get_cpuid_reg</definition>
        <argsstring>(struct basic_ctx *ctx, int64_t reg)</argsstring>
        <name>get_cpuid_reg</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Retrieves a specific CPUID register value from the context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the value of a specific CPUID register (eax, ebx, ecx, edx) from the <computeroutput>last_cpuid_result</computeroutput> in the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register to retrieve (0 = eax, 1 = ebx, 2 = ecx, 3 = edx). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the specified CPUID register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="29" column="9" bodyfile="src/basic/lowlevel.c" bodystart="29" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a988befdafcb2491d0f07b5f5ded58e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_legacy_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_legacy_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Executes a legacy CPUID instruction for a specific leaf and subleaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes the CPUID instruction with a specified leaf and subleaf and stores the result in the context&apos;s <computeroutput>last_cpuid_result</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the subleaf is not -1, 0 if it is. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="46" column="9" bodyfile="src/basic/lowlevel.c" bodystart="46" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1afeefd46448bebfea73954e6b48448fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_legacy_getlastcpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_legacy_getlastcpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves the last CPUID register value from the context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the most recent CPUID register value stored in the <computeroutput>last_cpuid_result</computeroutput> from the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the last CPUID register queried. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="62" column="9" bodyfile="src/basic/lowlevel.c" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a08bb8fd0c49417b63889e76620e4f810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* basic_cpugetbrand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpugetbrand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Gets the brand of the CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the CPU brand string.</para>
<para>This function returns the brand of the CPU, providing information about the specific CPU model that the system is running.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The brand of the CPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="70" column="6" bodyfile="src/basic/lowlevel.c" bodystart="70" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1afa2ef90f885539364abb5363ccfefbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* basic_cpugetvendor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpugetvendor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Gets the vendor of the CPU. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the CPU vendor string.</para>
<para>This function returns the vendor of the CPU, providing information about the manufacturer of the CPU.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vendor of the CPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="110" column="6" bodyfile="src/basic/lowlevel.c" bodystart="110" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1ab89f69f6260c87b6cc4ee21b5ea35ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* basic_intoasc</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_intoasc</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Converts a number to its ASCII string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>Converts an integer value to a string representation.</para>
<para>This function converts a number into its ASCII equivalent. For example, the number 123 would be converted to the string &quot;123&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ASCII string representation of the number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="126" column="6" bodyfile="src/basic/lowlevel.c" bodystart="126" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1aca68b975022b959caf87e20f9342144e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves the CPUID result for a specific leaf and subleaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes CPUID for a specified leaf and subleaf and returns the value of a specific CPUID register as defined by the <computeroutput>reg</computeroutput> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CPUID result of the specified register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="144" column="9" bodyfile="src/basic/lowlevel.c" bodystart="144" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a68bda39b8e07b882e318231b81cf0998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_inport</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inport</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC function INPORT. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads an 8-bit value from an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">v<sp/>=<sp/>INPORT(port)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>8-bit value (0–255) widened to int64_t.</para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="162" column="9" bodyfile="src/basic/lowlevel.c" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a14bfa78fef509dab742234e90d0d04ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_inportw</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inportw</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC function INPORTW. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads a 16-bit value from an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">v<sp/>=<sp/>INPORTW(port)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value (0–65535) widened to int64_t.</para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="171" column="9" bodyfile="src/basic/lowlevel.c" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a4e4d61af51722aaa21751e7ebf088944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_inportd</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inportd</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC function INPORTD. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads a 32-bit value from an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">v<sp/>=<sp/>INPORTD(port)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value widened to int64_t.</para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="180" column="9" bodyfile="src/basic/lowlevel.c" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a49564bb2e1a5c10d653e219673529508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outport_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>outport_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC statement OUTPORT. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORT<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para>Writes an 8-bit value to the specified I/O port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context (supplies arguments and error reporting).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 8 bits before being written. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the number or type of arguments is invalid.</para>
</simplesect>
Writes an 8-bit value to an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORT<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context (provides parameters and error reporting).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 8 bits before the write. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="189" column="6" bodyfile="src/basic/lowlevel.c" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a4e34074e341fc1b7b50e9873e041e50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outportw_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>outportw_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC statement OUTPORTW. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTW<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para>Writes a 16-bit value to the specified I/O port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 16 bits before being written. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the number or type of arguments is invalid.</para>
</simplesect>
Writes a 16-bit value to an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTW<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 16 bits before the write. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="198" column="6" bodyfile="src/basic/lowlevel.c" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a661ecfc0cf5eb653d0ca95dbde2d0d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outportd_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>outportd_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC statement OUTPORTD. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTD<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para>Writes a 32-bit value to the specified I/O port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 32 bits before being written. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the number or type of arguments is invalid.</para>
</simplesect>
Writes a 32-bit value to an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTD<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 32 bits before the write. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="207" column="6" bodyfile="src/basic/lowlevel.c" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1ae3e385bf39b31e5dc08769d1df967731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITOR(a, b) — bitwise OR. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a | b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="216" column="9" bodyfile="src/basic/lowlevel.c" bodystart="216" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1adba68ed72df80f5b33972d05d365bc86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITAND(a, b) — bitwise AND. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITAND(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a &amp; b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="227" column="9" bodyfile="src/basic/lowlevel.c" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a7919dddeefedf4e79c272f72048bb93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitnot</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitnot</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITNOT(a) — bitwise complement. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITNOT(a)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(~a) as int64_t.</para>
</simplesect>
<simplesect kind="note"><para>Two’s-complement semantics on 64-bit integers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="238" column="9" bodyfile="src/basic/lowlevel.c" bodystart="238" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1aa5f4ba34d30716c6cf5c30f2c736284f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_biteor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_biteor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITEOR(a, b) — bitwise XOR (BBC EOR). </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITEOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a ^ b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="247" column="9" bodyfile="src/basic/lowlevel.c" bodystart="247" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1ab7e0871ca7343f1e8ccac007764bdcfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitnand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitnand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITNAND(a, b) — bitwise NAND. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITNAND(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>~(a &amp; b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="258" column="9" bodyfile="src/basic/lowlevel.c" bodystart="258" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1ac25d6fb5964e9cbceaf30cddaf7e41ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitnor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitnor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITNOR(a, b) — bitwise NOR. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITNOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>~(a | b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="269" column="9" bodyfile="src/basic/lowlevel.c" bodystart="269" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a2676b8258711a7b32375656c7235fb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitxnor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitxnor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITXNOR(a, b) — bitwise equivalence. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITXNOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>~(a ^ b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="280" column="9" bodyfile="src/basic/lowlevel.c" bodystart="280" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a723cd0adaa4b0f8a9ab0756ce6764372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitshl</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitshl</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITSHL(a, n) — logical left shift. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITSHL(a,<sp/>n)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a &lt;&lt; n, computed in 64-bit.</para>
</simplesect>
<simplesect kind="note"><para>Implementations typically clamp n to 0–63. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="291" column="9" bodyfile="src/basic/lowlevel.c" bodystart="291" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a86aef955ef1fdef5ef383591303d207a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitshr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitshr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITSHR(a, n) — logical right shift. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITSHR(a,<sp/>n)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Logical shift right of a by n (uses unsigned semantics), widened to int64_t.</para>
</simplesect>
<simplesect kind="note"><para>Implementations typically clamp n to 0–63. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="308" column="9" bodyfile="src/basic/lowlevel.c" bodystart="308" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1aa3fde9ad31935c521e1d7e98b511b1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitrol</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitrol</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITROL(a, n, width) — rotate left within width bits. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITROL(a,<sp/>n,<sp/>width)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a rotated left by n within the lowest <computeroutput>width</computeroutput> bits.</para>
</simplesect>
<simplesect kind="note"><para>Width is usually 1–64; the result is masked to <computeroutput>width</computeroutput> bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="325" column="9" bodyfile="src/basic/lowlevel.c" bodystart="325" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8c_1a90da121152e2850164a0626aa39d33e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitror</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitror</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITROR(a, n, width) — rotate right within width bits. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITROR(a,<sp/>n,<sp/>width)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a rotated right by n within the lowest <computeroutput>width</computeroutput> bits.</para>
</simplesect>
<simplesect kind="note"><para>Width is usually 1–64; the result is masked to <computeroutput>width</computeroutput> bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/basic/lowlevel.c" line="346" column="9" bodyfile="src/basic/lowlevel.c" bodystart="346" bodyend="365"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>BASIC low level (assembly/machine) functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/basic/lowlevel.c"/>
  </compounddef>
</doxygen>
