<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structbasic__ctx" kind="struct" language="C++" prot="public">
    <compoundname>basic_ctx</compoundname>
    <includes local="no">context.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structbasic__ctx_1a5aa7876a4b91f966f52107b47de39ef0" prot="public" static="no" mutable="no">
        <type>char const  *</type>
        <definition>char const* basic_ctx::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Pointer to the start of the next token. </para>
        </briefdescription>
        <detaileddescription>
<para>This pointer always lies between <computeroutput>program_ptr</computeroutput> and <computeroutput>program_ptr + strlen(program_ptr)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="34" column="12" bodyfile="include/basic/context.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1abbd42e56aa70c8d98d14f961ce7c1023" prot="public" static="no" mutable="no">
        <type>char const  *</type>
        <definition>char const* basic_ctx::nextptr</definition>
        <argsstring></argsstring>
        <name>nextptr</name>
        <briefdescription>
<para>Pointer to the character after the next token. </para>
        </briefdescription>
        <detaileddescription>
<para>This pointer always lies between <computeroutput>program_ptr</computeroutput> and <computeroutput>program_ptr + strlen(program_ptr)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="41" column="12" bodyfile="include/basic/context.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a553b33ad72c2dfe93617d313d74314d8" prot="public" static="no" mutable="no">
        <type>enum <ref refid="tokenizer_8h_1a4ebc26c81c029670805b51af165f9cfe" kindref="member">token_t</ref></type>
        <definition>enum token_t basic_ctx::current_token</definition>
        <argsstring></argsstring>
        <name>current_token</name>
        <briefdescription>
<para>Current token type. </para>
        </briefdescription>
        <detaileddescription>
<para>A numeric representation of the token between <computeroutput>ptr</computeroutput> and <computeroutput>nextptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="41" column="12" bodyfile="include/basic/context.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1aa9c6cb436ab16d8036eb779e01556bc8" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t basic_ctx::current_linenum</definition>
        <argsstring></argsstring>
        <name>current_linenum</name>
        <briefdescription>
<para>Current line number in the program. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="53" column="9" bodyfile="include/basic/context.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1af9f20ba47c7abbaf8b3e1664f3cf4038" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool basic_ctx::errored</definition>
        <argsstring></argsstring>
        <name>errored</name>
        <briefdescription>
<para>True if the program has thrown an error and should terminate. </para>
        </briefdescription>
        <detaileddescription>
<para>This flag might not cause immediate termination if the program is inside an <computeroutput>EVAL</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="60" column="6" bodyfile="include/basic/context.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a4996c445c7fe37e6a9a5d9fc8930eac7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool basic_ctx::ended</definition>
        <argsstring></argsstring>
        <name>ended</name>
        <briefdescription>
<para>True if the program has ended. </para>
        </briefdescription>
        <detaileddescription>
<para>This occurs when the program reaches an explicit <computeroutput>END</computeroutput> statement or falls off the end of the program, triggering termination. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="68" column="6" bodyfile="include/basic/context.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a5fe2868024a71123b721d04be05517d3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* basic_ctx::error_handler</definition>
        <argsstring></argsstring>
        <name>error_handler</name>
        <briefdescription>
<para>If non-null, points at the error handling procedure for the program. In the event of an error, instead of terminating the program, the error handling procedure is called instead. After the error is handled, the line after the error is executed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="76" column="12" bodyfile="include/basic/context.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1af2f7c0563bf30f810cd6d22cfa414674" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool basic_ctx::claimed_flip</definition>
        <argsstring></argsstring>
        <name>claimed_flip</name>
        <briefdescription>
<para>True if the program has &quot;claimed flipping&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>This is relevant to the internal state of the program&apos;s execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="83" column="6" bodyfile="include/basic/context.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a577807427e54773fac869d65d1025b2b" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t basic_ctx::sleep_until</definition>
        <argsstring></argsstring>
        <name>sleep_until</name>
        <briefdescription>
<para>When the current SLEEP instruction will end or 0 if not sleeping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="88" column="9" bodyfile="include/basic/context.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a0675a0370047966ece4a370a7022ec21" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* basic_ctx::program_ptr</definition>
        <argsstring></argsstring>
        <name>program_ptr</name>
        <briefdescription>
<para>Pointer to the program&apos;s entire text (untokenized). </para>
        </briefdescription>
        <detaileddescription>
<para>This may have been processed by a preprocessing phase to remove unnecessary spacing, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="95" column="6" bodyfile="include/basic/context.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a2f23433564f0ebd5d9d719a967fe2107" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t basic_ctx::debug_status</definition>
        <argsstring></argsstring>
        <name>debug_status</name>
        <briefdescription>
<para>Debugging status flag (e.g., <computeroutput>DEBUG_*</computeroutput> values). </para>
        </briefdescription>
        <detaileddescription>
<para>Holds information about the current debugging state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="102" column="9" bodyfile="include/basic/context.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a6c495401b2705b3c0ce8835d155e89b6" prot="public" static="no" mutable="no">
        <type>uint64_t *</type>
        <definition>uint64_t* basic_ctx::debug_breakpoints</definition>
        <argsstring></argsstring>
        <name>debug_breakpoints</name>
        <briefdescription>
<para>Array of active debug breakpoints (line numbers). </para>
        </briefdescription>
        <detaileddescription>
<para>Used during program execution for debugging purposes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="109" column="10" bodyfile="include/basic/context.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a2bb6169f8c460df638920ba7982a42b9" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::debug_breakpoint_count</definition>
        <argsstring></argsstring>
        <name>debug_breakpoint_count</name>
        <briefdescription>
<para>Number of active breakpoints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="114" column="10" bodyfile="include/basic/context.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1add37c368272fb5e346655e7e7200d75c" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char basic_ctx::string[MAX_STRINGLEN]</definition>
        <argsstring>[MAX_STRINGLEN]</argsstring>
        <name>string</name>
        <briefdescription>
<para>Local buffer for parsing function/procedure parameter lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="119" column="6" bodyfile="include/basic/context.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a45eafca15a311592eaf288ed05ac3a90" prot="public" static="no" mutable="no">
        <type><ref refid="structs_8h_1a2279cec37b8a81d5f18e78d7335b1966" kindref="member">ub_return_type</ref></type>
        <definition>ub_return_type basic_ctx::fn_type_stack[MAX_CALL_STACK_DEPTH]</definition>
        <argsstring>[MAX_CALL_STACK_DEPTH]</argsstring>
        <name>fn_type_stack</name>
        <briefdescription>
<para>Return types of the call stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="124" column="16" bodyfile="include/basic/context.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1afd9103d408780dd299a58d2575bcacf9" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::local_int_variables[MAX_CALL_STACK_DEPTH]</definition>
        <argsstring>[MAX_CALL_STACK_DEPTH]</argsstring>
        <name>local_int_variables</name>
        <briefdescription>
<para>Local integer variable stack for function/procedure scopes. </para>
        </briefdescription>
        <detaileddescription>
<para>Each index in this array corresponds to a specific depth in the call stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="131" column="15" bodyfile="include/basic/context.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a121958655e928bf6ba895f9c56138df0" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::local_string_variables[MAX_CALL_STACK_DEPTH]</definition>
        <argsstring>[MAX_CALL_STACK_DEPTH]</argsstring>
        <name>local_string_variables</name>
        <briefdescription>
<para>Local string variable stack for function/procedure scopes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="136" column="15" bodyfile="include/basic/context.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a46055c43d83708d0243eda143e6cdc9d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::local_double_variables[MAX_CALL_STACK_DEPTH]</definition>
        <argsstring>[MAX_CALL_STACK_DEPTH]</argsstring>
        <name>local_double_variables</name>
        <briefdescription>
<para>Local double (real) variable stack for function/procedure scopes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="141" column="15" bodyfile="include/basic/context.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a545d43671e4ee6aeae650e368cda6a6c" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::call_stack[MAX_CALL_STACK_DEPTH]</definition>
        <argsstring>[MAX_CALL_STACK_DEPTH]</argsstring>
        <name>call_stack</name>
        <briefdescription>
<para>Call stack for return line numbers during function, procedure, or <computeroutput>GOSUB</computeroutput> calls. </para>
        </briefdescription>
        <detaileddescription>
<para>Each index corresponds to a call in the stack, with a maximum depth of <computeroutput>MAX_CALL_STACK_DEPTH</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="148" column="10" bodyfile="include/basic/context.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1ac00d4e20a54a8dbf694b3d4b5b3ea4fa" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::call_stack_ptr</definition>
        <argsstring></argsstring>
        <name>call_stack_ptr</name>
        <briefdescription>
<para>Pointer indicating the current position in the call stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Starts at 0 and can go up to <computeroutput>MAX_CALL_STACK_DEPTH - 1</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="155" column="10" bodyfile="include/basic/context.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a58cdec0cff51dffc7f56f8a3479969e1" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::repeat_stack[MAX_LOOP_STACK_DEPTH]</definition>
        <argsstring>[MAX_LOOP_STACK_DEPTH]</argsstring>
        <name>repeat_stack</name>
        <briefdescription>
<para>Repeat stack for handling <computeroutput>REPEAT...UNTIL</computeroutput> loop control. </para>
        </briefdescription>
        <detaileddescription>
<para>Holds the return line numbers for each level of loop nesting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="162" column="10" bodyfile="include/basic/context.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1af0df0c483df2af35521a6ef256685c2c" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::repeat_stack_ptr</definition>
        <argsstring></argsstring>
        <name>repeat_stack_ptr</name>
        <briefdescription>
<para>Pointer indicating the current position in the repeat stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="167" column="10" bodyfile="include/basic/context.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a18ad3c395e1b9920ba62dca6710e43a5" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::while_stack[MAX_LOOP_STACK_DEPTH]</definition>
        <argsstring>[MAX_LOOP_STACK_DEPTH]</argsstring>
        <name>while_stack</name>
        <briefdescription>
<para>While stack for handling <computeroutput>WHILE...ENDWHILE</computeroutput> loop control. </para>
        </briefdescription>
        <detaileddescription>
<para>Holds the return line numbers for each level of loop nesting. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="174" column="10" bodyfile="include/basic/context.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a88c0b0dab90488188e31e958685e5414" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::while_stack_ptr</definition>
        <argsstring></argsstring>
        <name>while_stack_ptr</name>
        <briefdescription>
<para>Pointer indicating the current position in the while stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="179" column="10" bodyfile="include/basic/context.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a674578281de38ae65285c41f7479a8c7" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t basic_ctx::oldlen</definition>
        <argsstring></argsstring>
        <name>oldlen</name>
        <briefdescription>
<para>Previous length of the program text, used to detect an <computeroutput>EVAL</computeroutput> in progress. </para>
        </briefdescription>
        <detaileddescription>
<para>If this value is non-zero, an <computeroutput>EVAL</computeroutput> is in progress, and the program has appended additional lines. If zero, no <computeroutput>EVAL</computeroutput> is executing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="187" column="8" bodyfile="include/basic/context.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1ab396154b9578037640184392da4f4aaf" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t basic_ctx::eval_linenum</definition>
        <argsstring></argsstring>
        <name>eval_linenum</name>
        <briefdescription>
<para>The return line number for an <computeroutput>EVAL</computeroutput> statement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="192" column="9" bodyfile="include/basic/context.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1ac77be6922ca3426764bbfe0b67eb97d3" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structfor__state" kindref="compound">for_state</ref></type>
        <definition>struct for_state basic_ctx::for_stack[MAX_LOOP_STACK_DEPTH]</definition>
        <argsstring>[MAX_LOOP_STACK_DEPTH]</argsstring>
        <name>for_stack</name>
        <briefdescription>
<para>FOR loop stack to handle <computeroutput>FOR...NEXT</computeroutput> loops. </para>
        </briefdescription>
        <detaileddescription>
<para>Contains return line numbers for each level of loop. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="192" column="9" bodyfile="include/basic/context.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a7fedb3eaac1114a3c8f5f5d04d6f6a12" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::for_stack_ptr</definition>
        <argsstring></argsstring>
        <name>for_stack_ptr</name>
        <briefdescription>
<para>Pointer indicating the current position in the FOR loop stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="204" column="10" bodyfile="include/basic/context.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a157282323b4469c50186c57519abbfea" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
        <definition>struct ub_proc_fn_def* basic_ctx::defs</definition>
        <argsstring></argsstring>
        <name>defs</name>
        <briefdescription>
<para>Definitions of procedures and functions in the program. </para>
        </briefdescription>
        <detaileddescription>
<para>Linked list of all function and procedure definitions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="211" column="22" bodyfile="include/basic/context.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a364f10b4f5bb09ee59f6129dd92c639a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::int_variables</definition>
        <argsstring></argsstring>
        <name>int_variables</name>
        <briefdescription>
<para>Global integer variable list. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores all globally scoped integer variables in the program. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="218" column="15" bodyfile="include/basic/context.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1ab6094612eee1763d1c3512bf1f30f132" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::str_variables</definition>
        <argsstring></argsstring>
        <name>str_variables</name>
        <briefdescription>
<para>Global string variable list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="223" column="15" bodyfile="include/basic/context.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1afff479307b1acce86dd6ac5100e55e17" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::double_variables</definition>
        <argsstring></argsstring>
        <name>double_variables</name>
        <briefdescription>
<para>Global double variable list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="228" column="15" bodyfile="include/basic/context.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a1127413b4863f8920fa6570589565116" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structub__var__int__array" kindref="compound">ub_var_int_array</ref> *</type>
        <definition>struct ub_var_int_array* basic_ctx::int_array_variables</definition>
        <argsstring></argsstring>
        <name>int_array_variables</name>
        <briefdescription>
<para>Global integer array variable list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="233" column="24" bodyfile="include/basic/context.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1ac600d49d85d3ea90a651b8048e75671c" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structub__var__string__array" kindref="compound">ub_var_string_array</ref> *</type>
        <definition>struct ub_var_string_array* basic_ctx::string_array_variables</definition>
        <argsstring></argsstring>
        <name>string_array_variables</name>
        <briefdescription>
<para>Global string array variable list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="238" column="27" bodyfile="include/basic/context.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a1d891d5892b28d38c0aa4363a071069b" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structub__var__double__array" kindref="compound">ub_var_double_array</ref> *</type>
        <definition>struct ub_var_double_array* basic_ctx::double_array_variables</definition>
        <argsstring></argsstring>
        <name>double_array_variables</name>
        <briefdescription>
<para>Global double array variable list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="243" column="27" bodyfile="include/basic/context.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1af890048e3ab646719bad1a1f951757c0" prot="public" static="no" mutable="no">
        <type><ref refid="structs_8h_1a2279cec37b8a81d5f18e78d7335b1966" kindref="member">ub_return_type</ref></type>
        <definition>ub_return_type basic_ctx::fn_type</definition>
        <argsstring></argsstring>
        <name>fn_type</name>
        <briefdescription>
<para>Expected return type of the function being executed. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used when executing a function atomically to determine the type of the return value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="250" column="16" bodyfile="include/basic/context.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a8593d346028574faf17b8e0a80152009" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* basic_ctx::fn_return</definition>
        <argsstring></argsstring>
        <name>fn_return</name>
        <briefdescription>
<para>Pointer to the return value of the function being executed. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used for storing the result of a function&apos;s execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="257" column="6" bodyfile="include/basic/context.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a2b20d6976e19478de0616f6a6eb18c0c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int basic_ctx::bracket_depth</definition>
        <argsstring></argsstring>
        <name>bracket_depth</name>
        <briefdescription>
<para>Bracket depth when parsing function or procedure parameter lists. </para>
        </briefdescription>
        <detaileddescription>
<para>Keeps track of nested parentheses during parameter parsing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="264" column="5" bodyfile="include/basic/context.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a6d93bbf399fba5da373879d9889fead3" prot="public" static="no" mutable="no">
        <type>char const  *</type>
        <definition>char const* basic_ctx::item_begin</definition>
        <argsstring></argsstring>
        <name>item_begin</name>
        <briefdescription>
<para>Item start pointer when parsing function or procedure parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="269" column="12" bodyfile="include/basic/context.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a207d939e27d0a1b25d4418971ddd34c3" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structub__param" kindref="compound">ub_param</ref> *</type>
        <definition>struct ub_param* basic_ctx::param</definition>
        <argsstring></argsstring>
        <name>param</name>
        <briefdescription>
<para>Linked list of parameters for functions and procedures. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used when parsing parameter lists in function/procedure calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="276" column="16" bodyfile="include/basic/context.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a53852b59657aa0a3e65fa49357dbf7b0" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t basic_ctx::graphics_colour</definition>
        <argsstring></argsstring>
        <name>graphics_colour</name>
        <briefdescription>
<para>Current graphics color for graphical operations (e.g., drawing lines, shapes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="281" column="9" bodyfile="include/basic/context.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a6bd1fa3ec2d3b4c0b2f33456296e715d" prot="public" static="no" mutable="no">
        <type><ref refid="structcpuid__result__t" kindref="compound">cpuid_result_t</ref></type>
        <definition>cpuid_result_t basic_ctx::last_cpuid_result</definition>
        <argsstring></argsstring>
        <name>last_cpuid_result</name>
        <briefdescription>
<para>The last CPUID instruction result, used for system information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="286" column="16" bodyfile="include/basic/context.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a069084d2fc5fc7c6623473da3b0ff500" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* basic_ctx::lines</definition>
        <argsstring></argsstring>
        <name>lines</name>
        <briefdescription>
<para>Hashmap for quick lookup of line numbers in the program. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides efficient access to the program&apos;s lines for execution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="293" column="15" bodyfile="include/basic/context.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1af193438fa4fb81f516c57824e31f1da0" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t basic_ctx::if_nest_level</definition>
        <argsstring></argsstring>
        <name>if_nest_level</name>
        <briefdescription>
<para>Current depth of block <computeroutput>IF...THEN...ELSE</computeroutput> statements. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used for managing nested <computeroutput>IF</computeroutput> statements and ensuring correct execution flow. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="300" column="10" bodyfile="include/basic/context.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a7e16bb3a99bcff493c581fab6757c88c" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t basic_ctx::highest_line</definition>
        <argsstring></argsstring>
        <name>highest_line</name>
        <briefdescription>
<para>Highest line number in the program. </para>
        </briefdescription>
        <detaileddescription>
<para>Keeps track of the largest line number in the program for reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="307" column="9" bodyfile="include/basic/context.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a7b3df60380a6aad6b61e39594b7b6f6d" prot="public" static="no" mutable="no">
        <type><ref refid="structsprite__t" kindref="compound">sprite_t</ref> *</type>
        <definition>sprite_t* basic_ctx::sprites[MAX_SPRITES]</definition>
        <argsstring>[MAX_SPRITES]</argsstring>
        <name>sprites</name>
        <briefdescription>
<para>Array of sprites used in the program (if any). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="312" column="10" bodyfile="include/basic/context.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a1d0caf2137b596b061c15bfa7788441c" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* basic_ctx::string_gc_storage</definition>
        <argsstring></argsstring>
        <name>string_gc_storage</name>
        <briefdescription>
<para>Storage area for garbage-collected strings. </para>
        </briefdescription>
        <detaileddescription>
<para>This holds strings that are subject to garbage collection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="319" column="6" bodyfile="include/basic/context.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a40047b898748b53fc546db5b73115ab9" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* basic_ctx::string_gc_storage_next</definition>
        <argsstring></argsstring>
        <name>string_gc_storage_next</name>
        <briefdescription>
<para>Pointer to the next free position in the garbage-collected string storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="324" column="6" bodyfile="include/basic/context.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a92747689d9e4685e334c3f94cad5a9dd" prot="public" static="no" mutable="no">
        <type><ref refid="structbuddy__allocator__t" kindref="compound">buddy_allocator_t</ref> *</type>
        <definition>buddy_allocator_t* basic_ctx::allocator</definition>
        <argsstring></argsstring>
        <name>allocator</name>
        <briefdescription>
<para>Buddy allocator used for managing the program&apos;s heap. </para>
        </briefdescription>
        <detaileddescription>
<para>The allocator is used to manage dynamic memory for the program&apos;s variables and data structures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="331" column="19" bodyfile="include/basic/context.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structbasic__ctx_1a3b76328ebab6ec94ebd2451ccd8bcc79" prot="public" static="no" mutable="no">
        <type><ref refid="structqueued__udp__packet" kindref="compound">queued_udp_packet</ref></type>
        <definition>queued_udp_packet basic_ctx::last_packet</definition>
        <argsstring></argsstring>
        <name>last_packet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/context.h" line="333" column="19" bodyfile="include/basic/context.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>BASIC program context. </para>
    </briefdescription>
    <detaileddescription>
<para>Every instance of a BASIC program has one of these contexts. Certain structures, such as functions, will clone the context and run on the clone until the function completes. Cloned contexts share variables, and you should never call <ref refid="context_8h_1af018882ffc2e5fc5f888c4dea3ecf17c" kindref="member">basic_destroy()</ref> on them as they are handled differently. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>size_t</label>
      </node>
      <node id="31">
        <label>ub_param</label>
        <link refid="structub__param"/>
        <childnode refid="13" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>void *</label>
      </node>
      <node id="10">
        <label>ub_var_double_array</label>
        <link refid="structub__var__double__array"/>
        <childnode refid="10" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>values</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>itemcount</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>varname</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>buddy_region_t</label>
        <link refid="structbuddy__region__t"/>
        <childnode refid="4" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>max_order</edgelabel>
          <edgelabel>min_order</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>free_lists</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>pool</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>queued_udp_packet</label>
        <link refid="structqueued__udp__packet"/>
        <childnode refid="12" relation="usage">
          <edgelabel>length</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>data</edgelabel>
          <edgelabel>ip</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>source_port</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>next</edgelabel>
          <edgelabel>prev</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>struct buddy_region *</label>
      </node>
      <node id="17">
        <label>hashmap</label>
        <link refid="structhashmap"/>
        <childnode refid="12" relation="usage">
          <edgelabel>hash</edgelabel>
          <edgelabel>seed0</edgelabel>
          <edgelabel>seed1</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>elfree</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>free</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bucketsz</edgelabel>
          <edgelabel>cap</edgelabel>
          <edgelabel>count</edgelabel>
          <edgelabel>elsize</edgelabel>
          <edgelabel>growat</edgelabel>
          <edgelabel>malloc</edgelabel>
          <edgelabel>mask</edgelabel>
          <edgelabel>nbuckets</edgelabel>
          <edgelabel>realloc</edgelabel>
          <edgelabel>shrinkat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>compare</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>oom</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>buckets</edgelabel>
          <edgelabel>edata</edgelabel>
          <edgelabel>spare</edgelabel>
          <edgelabel>udata</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>int32_t</label>
      </node>
      <node id="2">
        <label>buddy_allocator_t</label>
        <link refid="structbuddy__allocator__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>active_region</edgelabel>
          <edgelabel>regions</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>current_bytes</edgelabel>
          <edgelabel>peak_bytes</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>grow_order</edgelabel>
          <edgelabel>max_order</edgelabel>
          <edgelabel>min_order</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>uint64_t</label>
      </node>
      <node id="7">
        <label>struct buddy_header *</label>
      </node>
      <node id="6">
        <label>buddy_header_t</label>
        <link refid="structbuddy__header__t"/>
        <childnode refid="4" relation="usage">
          <edgelabel>region</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>order</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>void(*)(const void *item, void *udata)</label>
      </node>
      <node id="27">
        <label>sprite_t</label>
        <link refid="structsprite__t"/>
        <childnode refid="28" relation="usage">
          <edgelabel>height</edgelabel>
          <edgelabel>pixels</edgelabel>
          <edgelabel>width</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>cpuid_result_t</label>
        <link refid="structcpuid__result__t"/>
        <childnode refid="5" relation="usage">
          <edgelabel>eax</edgelabel>
          <edgelabel>ebx</edgelabel>
          <edgelabel>ecx</edgelabel>
          <edgelabel>edx</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>ub_fn_type</label>
      </node>
      <node id="14">
        <label>ub_var_string_array</label>
        <link refid="structub__var__string__array"/>
        <childnode refid="14" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>itemcount</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>values</edgelabel>
          <edgelabel>varname</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>ub_var_int_array</label>
        <link refid="structub__var__int__array"/>
        <childnode refid="12" relation="usage">
          <edgelabel>itemcount</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>varname</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>values</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>uint16_t</label>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="11">
        <label>double</label>
      </node>
      <node id="28">
        <label>uint32_t</label>
      </node>
      <node id="8">
        <label>uint8_t</label>
      </node>
      <node id="32">
        <label>for_state</label>
        <link refid="structfor__state"/>
        <childnode refid="13" relation="usage">
          <edgelabel>for_variable</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>line_after_for</edgelabel>
          <edgelabel>step</edgelabel>
          <edgelabel>to</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>ub_proc_fn_def</label>
        <link refid="structub__proc__fn__def"/>
        <childnode refid="30" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>line</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>params</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>void(*)(const void *ptr, void *udata)</label>
      </node>
      <node id="1">
        <label>basic_ctx</label>
        <link refid="structbasic__ctx"/>
        <childnode refid="2" relation="usage">
          <edgelabel>allocator</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>double_array_variables</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>string_array_variables</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>fn_type</edgelabel>
          <edgelabel>fn_type_stack</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>call_stack</edgelabel>
          <edgelabel>call_stack_ptr</edgelabel>
          <edgelabel>debug_breakpoint_count</edgelabel>
          <edgelabel>debug_breakpoints</edgelabel>
          <edgelabel>for_stack_ptr</edgelabel>
          <edgelabel>if_nest_level</edgelabel>
          <edgelabel>repeat_stack</edgelabel>
          <edgelabel>repeat_stack_ptr</edgelabel>
          <edgelabel>while_stack</edgelabel>
          <edgelabel>while_stack_ptr</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>current_token</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>error_handler</edgelabel>
          <edgelabel>item_begin</edgelabel>
          <edgelabel>nextptr</edgelabel>
          <edgelabel>program_ptr</edgelabel>
          <edgelabel>ptr</edgelabel>
          <edgelabel>string</edgelabel>
          <edgelabel>string_gc_storage</edgelabel>
          <edgelabel>string_gc_storage_next</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>double_variables</edgelabel>
          <edgelabel>int_variables</edgelabel>
          <edgelabel>lines</edgelabel>
          <edgelabel>local_double_variables</edgelabel>
          <edgelabel>local_int_variables</edgelabel>
          <edgelabel>local_string_variables</edgelabel>
          <edgelabel>str_variables</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>current_linenum</edgelabel>
          <edgelabel>eval_linenum</edgelabel>
          <edgelabel>highest_line</edgelabel>
          <edgelabel>sleep_until</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>graphics_colour</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>oldlen</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>bracket_depth</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>last_packet</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>int_array_variables</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>debug_status</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>claimed_flip</edgelabel>
          <edgelabel>ended</edgelabel>
          <edgelabel>errored</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>sprites</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>defs</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>fn_return</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>for_stack</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>last_cpuid_result</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>param</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>ub_return_type</label>
      </node>
      <node id="16">
        <label>enum token_t</label>
      </node>
      <node id="20">
        <label>bool</label>
      </node>
      <node id="22">
        <label>int64_t</label>
      </node>
      <node id="13">
        <label>char</label>
      </node>
    </collaborationgraph>
    <location file="include/basic/context.h" line="28" column="1" bodyfile="include/basic/context.h" bodystart="28" bodyend="334"/>
    <listofallmembers>
      <member refid="structbasic__ctx_1a92747689d9e4685e334c3f94cad5a9dd" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>allocator</name></member>
      <member refid="structbasic__ctx_1a2b20d6976e19478de0616f6a6eb18c0c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>bracket_depth</name></member>
      <member refid="structbasic__ctx_1a545d43671e4ee6aeae650e368cda6a6c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>call_stack</name></member>
      <member refid="structbasic__ctx_1ac00d4e20a54a8dbf694b3d4b5b3ea4fa" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>call_stack_ptr</name></member>
      <member refid="structbasic__ctx_1af2f7c0563bf30f810cd6d22cfa414674" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>claimed_flip</name></member>
      <member refid="structbasic__ctx_1aa9c6cb436ab16d8036eb779e01556bc8" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>current_linenum</name></member>
      <member refid="structbasic__ctx_1a553b33ad72c2dfe93617d313d74314d8" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>current_token</name></member>
      <member refid="structbasic__ctx_1a2bb6169f8c460df638920ba7982a42b9" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>debug_breakpoint_count</name></member>
      <member refid="structbasic__ctx_1a6c495401b2705b3c0ce8835d155e89b6" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>debug_breakpoints</name></member>
      <member refid="structbasic__ctx_1a2f23433564f0ebd5d9d719a967fe2107" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>debug_status</name></member>
      <member refid="structbasic__ctx_1a157282323b4469c50186c57519abbfea" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>defs</name></member>
      <member refid="structbasic__ctx_1a1d891d5892b28d38c0aa4363a071069b" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>double_array_variables</name></member>
      <member refid="structbasic__ctx_1afff479307b1acce86dd6ac5100e55e17" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>double_variables</name></member>
      <member refid="structbasic__ctx_1a4996c445c7fe37e6a9a5d9fc8930eac7" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>ended</name></member>
      <member refid="structbasic__ctx_1a5fe2868024a71123b721d04be05517d3" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>error_handler</name></member>
      <member refid="structbasic__ctx_1af9f20ba47c7abbaf8b3e1664f3cf4038" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>errored</name></member>
      <member refid="structbasic__ctx_1ab396154b9578037640184392da4f4aaf" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>eval_linenum</name></member>
      <member refid="structbasic__ctx_1a8593d346028574faf17b8e0a80152009" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>fn_return</name></member>
      <member refid="structbasic__ctx_1af890048e3ab646719bad1a1f951757c0" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>fn_type</name></member>
      <member refid="structbasic__ctx_1a45eafca15a311592eaf288ed05ac3a90" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>fn_type_stack</name></member>
      <member refid="structbasic__ctx_1ac77be6922ca3426764bbfe0b67eb97d3" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>for_stack</name></member>
      <member refid="structbasic__ctx_1a7fedb3eaac1114a3c8f5f5d04d6f6a12" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>for_stack_ptr</name></member>
      <member refid="structbasic__ctx_1a53852b59657aa0a3e65fa49357dbf7b0" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>graphics_colour</name></member>
      <member refid="structbasic__ctx_1a7e16bb3a99bcff493c581fab6757c88c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>highest_line</name></member>
      <member refid="structbasic__ctx_1af193438fa4fb81f516c57824e31f1da0" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>if_nest_level</name></member>
      <member refid="structbasic__ctx_1a1127413b4863f8920fa6570589565116" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>int_array_variables</name></member>
      <member refid="structbasic__ctx_1a364f10b4f5bb09ee59f6129dd92c639a" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>int_variables</name></member>
      <member refid="structbasic__ctx_1a6d93bbf399fba5da373879d9889fead3" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>item_begin</name></member>
      <member refid="structbasic__ctx_1a6bd1fa3ec2d3b4c0b2f33456296e715d" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>last_cpuid_result</name></member>
      <member refid="structbasic__ctx_1a3b76328ebab6ec94ebd2451ccd8bcc79" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>last_packet</name></member>
      <member refid="structbasic__ctx_1a069084d2fc5fc7c6623473da3b0ff500" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>lines</name></member>
      <member refid="structbasic__ctx_1a46055c43d83708d0243eda143e6cdc9d" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>local_double_variables</name></member>
      <member refid="structbasic__ctx_1afd9103d408780dd299a58d2575bcacf9" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>local_int_variables</name></member>
      <member refid="structbasic__ctx_1a121958655e928bf6ba895f9c56138df0" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>local_string_variables</name></member>
      <member refid="structbasic__ctx_1abbd42e56aa70c8d98d14f961ce7c1023" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>nextptr</name></member>
      <member refid="structbasic__ctx_1a674578281de38ae65285c41f7479a8c7" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>oldlen</name></member>
      <member refid="structbasic__ctx_1a207d939e27d0a1b25d4418971ddd34c3" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>param</name></member>
      <member refid="structbasic__ctx_1a0675a0370047966ece4a370a7022ec21" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>program_ptr</name></member>
      <member refid="structbasic__ctx_1a5aa7876a4b91f966f52107b47de39ef0" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>ptr</name></member>
      <member refid="structbasic__ctx_1a58cdec0cff51dffc7f56f8a3479969e1" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>repeat_stack</name></member>
      <member refid="structbasic__ctx_1af0df0c483df2af35521a6ef256685c2c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>repeat_stack_ptr</name></member>
      <member refid="structbasic__ctx_1a577807427e54773fac869d65d1025b2b" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>sleep_until</name></member>
      <member refid="structbasic__ctx_1a7b3df60380a6aad6b61e39594b7b6f6d" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>sprites</name></member>
      <member refid="structbasic__ctx_1ab6094612eee1763d1c3512bf1f30f132" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>str_variables</name></member>
      <member refid="structbasic__ctx_1add37c368272fb5e346655e7e7200d75c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>string</name></member>
      <member refid="structbasic__ctx_1ac600d49d85d3ea90a651b8048e75671c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>string_array_variables</name></member>
      <member refid="structbasic__ctx_1a1d0caf2137b596b061c15bfa7788441c" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>string_gc_storage</name></member>
      <member refid="structbasic__ctx_1a40047b898748b53fc546db5b73115ab9" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>string_gc_storage_next</name></member>
      <member refid="structbasic__ctx_1a18ad3c395e1b9920ba62dca6710e43a5" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>while_stack</name></member>
      <member refid="structbasic__ctx_1a88c0b0dab90488188e31e958685e5414" prot="public" virt="non-virtual"><scope>basic_ctx</scope><name>while_stack_ptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
