<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="modules" kind="page">
    <compoundname>modules</compoundname>
    <title>Writing Kernel Modules for Retro Rocket</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Retro Rocket supports dynamically loadable kernel modules (<computeroutput>.ko</computeroutput> files). Modules let you extend the kernel at run-time without rebuilding or rebooting, using a simple ELF64 relocation and symbol resolution system.</para>
<para><hruler/>
</para>
<sect2 id="modules_1autotoc_md1291">
<title>Module ABI</title>
<para>Each kernel build exports a single <bold>module ABI version</bold>:</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>KMOD_ABI<sp/>100</highlight></codeline>
</programlisting></para>
<para>Modules must define ABI-versioned entry points:</para>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EXPORTED<sp/>mod_init_v100(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EXPORTED<sp/>mod_exit_v100(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>The loader enforces this naming convention. If the expected <computeroutput>mod_init_v&lt;ABI&gt;</computeroutput> symbol cannot be found, the module is rejected.</para>
<para><emphasis>No forward/backward compatibility is provided.</emphasis> If the ABI number changes, modules must be rebuilt.</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1293">
<title>Minimal Module Example</title>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>include<sp/>this<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EXPORTED<sp/>MOD_INIT_SYM(KMOD_ABI)(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dprintf(</highlight><highlight class="stringliteral">&quot;example.ko:<sp/>mod_init<sp/>called!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EXPORTED<sp/>MOD_EXIT_SYM(KMOD_ABI)(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dprintf(</highlight><highlight class="stringliteral">&quot;example.ko:<sp/>mod_exit<sp/>called!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1295">
<title>Using Kernel Symbols</title>
<para>All kernel symbols intended for modules are exported via <computeroutput>kernel.h</computeroutput>. Modules should <bold>only ever</bold> include:</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;kernel.h&gt;</highlight></codeline>
</programlisting></para>
<para>After that, you can call any exported kernel function directly:</para>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EXPORTED<sp/>MOD_INIT_SYM(KMOD_ABI)(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/>kmalloc(128);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dprintf(</highlight><highlight class="stringliteral">&quot;allocated<sp/>128<sp/>bytes<sp/>at<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>There is <bold>no need</bold> for <computeroutput>extern</computeroutput> declarations or additional headers. The loader resolves undefined globals against the kernel’s symbol index (<computeroutput>kernel.sym</computeroutput>) at load time.</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1297">
<title>Memory Model</title>
<para>The Retro Rocket kernel itself is linked into the <bold>higher half</bold> of the address space. Modules, however, are loaded into the <bold>kernel heap</bold>, which resides in the <bold>lower half</bold>.</para>
<para><itemizedlist>
<listitem><para>Key implications:<itemizedlist>
<listitem><para>Modules are relocated into an arbitrary heap allocation block.</para>
</listitem><listitem><para>They must <bold>not</bold> assume a fixed or “higher-half” load address.</para>
</listitem><listitem><para>Absolute addresses in module code are always patched by relocations.</para>
</listitem><listitem><para>Pointers into the module’s own image are valid only while the module remains loaded.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1299">
<title>Build System</title>
<para>Modules are compiled as <bold>relocatable ELF objects</bold>:</para>
<para><itemizedlist>
<listitem><para><computeroutput>ld -r</computeroutput> (ET_REL output)</para>
</listitem><listitem><para>Flags: <computeroutput>-ffreestanding -fno-pic -mcmodel=large -mno-red-zone</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>CMake support exists in the Retro Rocket tree: any sources under <computeroutput>modules/&lt;name&gt;/*.c</computeroutput> are built into <computeroutput>iso/system/modules/&lt;name&gt;.ko</computeroutput>.</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1301">
<title>Loader Pipeline</title>
<para>The in-kernel loader performs:</para>
<para><orderedlist>
<listitem><para>Parse ELF header and section table (<computeroutput>ET_REL</computeroutput>, <computeroutput>EM_X86_64</computeroutput> only).</para>
</listitem><listitem><para>Allocate one contiguous block for all <computeroutput>SHF_ALLOC</computeroutput> sections with proper alignment.</para>
</listitem><listitem><para>Copy <computeroutput>PROGBITS</computeroutput> data, zero <computeroutput>NOBITS</computeroutput>.</para>
</listitem><listitem><para>Load <computeroutput>.symtab</computeroutput>/<computeroutput>.strtab</computeroutput> for the module.</para>
</listitem><listitem><para>Apply relocations (<computeroutput>R_X86_64_64</computeroutput>, <computeroutput>PC32</computeroutput>, <computeroutput>PLT32</computeroutput>, <computeroutput>32</computeroutput>, <computeroutput>32S</computeroutput>).</para>
</listitem><listitem><para>Resolve externals against <computeroutput>kernel.sym</computeroutput>.</para>
</listitem><listitem><para>Locate <computeroutput>mod_init_v&lt;ABI&gt;</computeroutput>/<computeroutput>mod_exit_v&lt;ABI&gt;</computeroutput>.</para>
</listitem><listitem><para>Call <computeroutput>mod_init_v&lt;ABI&gt;</computeroutput>.</para>
</listitem></orderedlist>
</para>
<para>On unload, the loader calls <computeroutput>mod_exit_v&lt;ABI&gt;</computeroutput>, frees the section block, and removes the module from the registry.</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1303">
<title>Module Lifecycle</title>
<para><itemizedlist>
<listitem><para><bold>Load</bold>: <computeroutput>load_module(&quot;example&quot;);</computeroutput> → Calls <computeroutput>mod_init_v100()</computeroutput></para>
</listitem><listitem><para><bold>Unload</bold>: <computeroutput>unload_module(&quot;example&quot;);</computeroutput> → Calls <computeroutput>mod_exit_v100()</computeroutput> and frees resources</para>
</listitem></itemizedlist>
</para>
<para>All modules are tracked in a kernel hashmap keyed by <computeroutput>name</computeroutput>.</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1305">
<title>Safety Notes</title>
<para><itemizedlist>
<listitem><para>A failed symbol resolution or relocation aborts load cleanly.</para>
</listitem><listitem><para>After unload, the loader nulls entry points and section pointers. Any stale use will dereference <computeroutput>NULL</computeroutput> rather than executing freed code.</para>
</listitem><listitem><para>Modules must not assume persistence of pointers returned by <computeroutput>module_section_base()</computeroutput> after unload.</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
<sect2 id="modules_1autotoc_md1307">
<title>Writing Good Modules</title>
<para><itemizedlist>
<listitem><para>Always check the current <computeroutput>KMOD_ABI</computeroutput> in <computeroutput>module.h</computeroutput> before building.</para>
</listitem><listitem><para>Keep module entry points minimal; heavy initialisation should be factored out.</para>
</listitem><listitem><para>Use kernel APIs via <computeroutput>kernel.h</computeroutput> rather than re-implementing libc.</para>
</listitem><listitem><para>Clean up everything you allocate in <computeroutput>mod_exit_v&lt;ABI&gt;()</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <location file="docpages/kernel-dev/MODULES.md"/>
  </compounddef>
</doxygen>
