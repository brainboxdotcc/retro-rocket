<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="taskswitch_8c" kind="file" language="C++">
    <compoundname>taskswitch.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <incdepgraph>
      <node id="32">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="20">
        <label>basic.h</label>
        <link refid="basic_8h"/>
      </node>
      <node id="35">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="47">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>taskswitch.c</label>
        <link refid="taskswitch_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="59">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>basic_tokenizer.h</label>
        <link refid="basic__tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="23">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="41">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="42">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="60">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="55">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="27">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
      </node>
      <node id="40">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="53">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="30">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="19">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="taskswitch_8c_1aec02a136f8c68158ceecb321db083fe7" prot="public" static="no" mutable="no">
        <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
        <definition>process_t* proc_current[MAX_CPUS]</definition>
        <argsstring>[MAX_CPUS]</argsstring>
        <name>proc_current</name>
        <initializer>= { NULL }</initializer>
        <briefdescription>
<para>The currently running process on each CPU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="6" column="11" bodyfile="src/taskswitch.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1a61f2432ddea8c570469210d4f0813b46" prot="public" static="no" mutable="no">
        <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
        <definition>process_t* proc_list[MAX_CPUS]</definition>
        <argsstring>[MAX_CPUS]</argsstring>
        <name>proc_list</name>
        <initializer>= { NULL }</initializer>
        <briefdescription>
<para>Doubly linked list of processes running on each CPU. We store the doubly linked list for fast iteration from one process to the next for the round robin scheduler of processes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="12" column="11" bodyfile="src/taskswitch.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1af39c2d6e299e3e3c2184a6420cd85fbb" prot="public" static="no" mutable="no">
        <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
        <definition>process_t* combined_proc_list</definition>
        <argsstring></argsstring>
        <name>combined_proc_list</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Combined process list for all CPUs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="16" column="11" bodyfile="src/taskswitch.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1ad95aac4b5cf5e07580b1fcb1fffc5749" prot="public" static="no" mutable="no">
        <type><ref refid="spinlock_8h_1af82eed01f0304d83276dda764b213779" kindref="member">spinlock_t</ref></type>
        <definition>spinlock_t combined_proc_lock</definition>
        <argsstring></argsstring>
        <name>combined_proc_lock</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>spinlock to guard the combined list </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="20" column="12" bodyfile="src/taskswitch.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1aee3f41827e667c2d0dcd74dae45051c2" prot="public" static="no" mutable="no">
        <type><ref refid="spinlock_8h_1af82eed01f0304d83276dda764b213779" kindref="member">spinlock_t</ref></type>
        <definition>spinlock_t proc_lock[MAX_CPUS]</definition>
        <argsstring>[MAX_CPUS]</argsstring>
        <name>proc_lock</name>
        <initializer>= { 0 }</initializer>
        <briefdescription>
<para>Spinlocks for each CPU to protect its lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="24" column="12" bodyfile="src/taskswitch.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1a6ecfe70963a36f1fc74ce7c5f5479e11" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* process_by_pid</definition>
        <argsstring></argsstring>
        <name>process_by_pid</name>
        <briefdescription>
<para>A hash map of processes by PID on all CPUs. We use this when we want to find a process by PID (which we do quite often whenever a process waits on another process). This makes it faster to look up a process by PID instead of having to iteate the doubly linked list we use for scheduling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="32" column="15" bodyfile="src/taskswitch.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1a98348e79b1c16f9af43ef7e8fc278c22" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t nextid</definition>
        <argsstring></argsstring>
        <name>nextid</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Next process ID number we will give out for the next process. This increments by one, but will not reuse &quot;holes&quot;, so it behaves in a generally posix-like manner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="38" column="10" bodyfile="src/taskswitch.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1aa56fabba3ca96349f6e8cde48042e1b4" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t process_count</definition>
        <argsstring></argsstring>
        <name>process_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>A counter of the number of active processes, we use this to find out how many processes are running and iterate it or decrement it as processes are killed or started so that to find out the total count we do not need to iterate either the hash map or the doubly linked list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="45" column="10" bodyfile="src/taskswitch.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1a8461048be5ed2ffb92c3a1fd67759f08" prot="public" static="no" mutable="no">
        <type><ref refid="structidle__timer__t" kindref="compound">idle_timer_t</ref> *</type>
        <definition>idle_timer_t* task_idles</definition>
        <argsstring></argsstring>
        <name>task_idles</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Lists of &quot;idle tasks&quot;, idle tasks are simple kernel functions that execute once per cycle around the process loop, used for things that we do not want to put into an interrupt, but still need to run often. timer idles on the other hand are inserted into the LAPIC timer, and need to be written to be friendly within an interrupt context. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="54" column="14" bodyfile="src/taskswitch.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1ac655479725c9e7ef12d2b4ca97b85c62" prot="public" static="no" mutable="no">
        <type><ref refid="structidle__timer__t" kindref="compound">idle_timer_t</ref> *</type>
        <definition>idle_timer_t * timer_idles</definition>
        <argsstring></argsstring>
        <name>timer_idles</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="54" column="26" bodyfile="src/taskswitch.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="taskswitch_8c_1ab83248c0daa174a8ca16df53a7ab8b7f" prot="public" static="no" mutable="no">
        <type><ref refid="structsimple__cv__t" kindref="compound">simple_cv_t</ref></type>
        <definition>simple_cv_t boot_condition</definition>
        <argsstring></argsstring>
        <name>boot_condition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="56" column="20" bodyfile="src/ap.c" bodystart="16" bodyend="-1" declfile="src/taskswitch.c" declline="56" declcolumn="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="taskswitch_8c_1aa489f46acde8e80831f0432a1da6e695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
        <definition>process_t* proc_load</definition>
        <argsstring>(const char *fullpath, struct console *cons, pid_t parent_pid, const char *csd)</argsstring>
        <name>proc_load</name>
        <param>
          <type>const char *</type>
          <declname>fullpath</declname>
        </param>
        <param>
          <type>struct <ref refid="structconsole" kindref="compound">console</ref> *</type>
          <declname>cons</declname>
        </param>
        <param>
          <type><ref refid="taskswitch_8h_1a7a26cb7f5678736cec66712d6df1d4ed" kindref="member">pid_t</ref></type>
          <declname>parent_pid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>csd</declname>
        </param>
        <briefdescription>
<para>Load and start a new BASIC process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullpath</parametername>
</parameternamelist>
<parameterdescription>
<para>Fully qualified path to file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cons</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated console </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent_pid</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent PID, or 0 for none </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csd</parametername>
</parameternamelist>
<parameterdescription>
<para>Current selected directory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>process_t* Pointer to new process details </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="58" column="11" bodyfile="src/taskswitch.c" bodystart="58" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1aa8769acde79d259426e68e9e4fba6544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
        <definition>process_t* proc_cur</definition>
        <argsstring>(uint8_t logical_cpu)</argsstring>
        <name>proc_cur</name>
        <param>
          <type>uint8_t</type>
          <declname>logical_cpu</declname>
        </param>
        <briefdescription>
<para>Get current process for a logical CPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logical_cpu</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>process_t* Current process or NULL if none </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="143" column="11" bodyfile="src/taskswitch.c" bodystart="143" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1abb94173794194e3382dc5482b7e0aa62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_run</definition>
        <argsstring>(process_t *proc)</argsstring>
        <name>proc_run</name>
        <param>
          <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
<para>Execute one atomic BASIC cycle for a process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process to run </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="151" column="6" bodyfile="src/taskswitch.c" bodystart="151" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1ab5a40192ac7fb47cf38c7e803ccd0efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
        <definition>process_t* proc_find</definition>
        <argsstring>(pid_t pid)</argsstring>
        <name>proc_find</name>
        <param>
          <type><ref refid="taskswitch_8h_1a7a26cb7f5678736cec66712d6df1d4ed" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <briefdescription>
<para>Find a process by PID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>Process ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>process_t* Pointer to process detail or NULL if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="164" column="11" bodyfile="src/taskswitch.c" bodystart="164" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a7b25ff76590322d996a0cb108665cedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool proc_kill_id</definition>
        <argsstring>(pid_t id)</argsstring>
        <name>proc_kill_id</name>
        <param>
          <type><ref refid="taskswitch_8h_1a7a26cb7f5678736cec66712d6df1d4ed" kindref="member">pid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Kill a process by PID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Cannot be used to kill the current process from itself. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Process ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if process found and killed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="172" column="6" bodyfile="src/taskswitch.c" bodystart="172" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a8b2b24e480bc2b9188e720c028795cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_wait</definition>
        <argsstring>(process_t *proc, pid_t otherpid)</argsstring>
        <name>proc_wait</name>
        <param>
          <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type><ref refid="taskswitch_8h_1a7a26cb7f5678736cec66712d6df1d4ed" kindref="member">pid_t</ref></type>
          <declname>otherpid</declname>
        </param>
        <briefdescription>
<para>Mark a process as waiting for another to complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process to mark as waiting </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>otherpid</parametername>
</parameternamelist>
<parameterdescription>
<para>PID to wait on (must exist) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="186" column="6" bodyfile="src/taskswitch.c" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1aa0340f929d97ebceb2e0d7eaa9d4d3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* proc_set_csd</definition>
        <argsstring>(process_t *proc, const char *csd)</argsstring>
        <name>proc_set_csd</name>
        <param>
          <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>csd</declname>
        </param>
        <briefdescription>
<para>Change the CSD (current selected directory) of a process. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>No validation of the path is performed here; external VFS checks must be applied before calling. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csd</parametername>
</parameternamelist>
<parameterdescription>
<para>New current directory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* Updated current directory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="195" column="12" bodyfile="src/taskswitch.c" bodystart="195" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a949bb14b82e340cdc2a49f9ecc53b086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* proc_get_csd</definition>
        <argsstring>(process_t *proc)</argsstring>
        <name>proc_get_csd</name>
        <param>
          <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="219" column="12" bodyfile="src/taskswitch.c" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a8951b9dab6452cf831a751d0cda64a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_kill</definition>
        <argsstring>(process_t *proc)</argsstring>
        <name>proc_kill</name>
        <param>
          <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
<para>Kill a process immediately. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process to terminate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="227" column="6" bodyfile="src/taskswitch.c" bodystart="227" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a01a99ff8bacb9f2f0509b21f45fc7217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t proc_total</definition>
        <argsstring>()</argsstring>
        <name>proc_total</name>
        <briefdescription>
<para>Get total number of running processes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int64_t Number of running processes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="297" column="9" bodyfile="src/taskswitch.c" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a98ea5946e6a5a7a69b87f081ddf0b1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="taskswitch_8h_1a7a26cb7f5678736cec66712d6df1d4ed" kindref="member">pid_t</ref></type>
        <definition>pid_t proc_id</definition>
        <argsstring>(int64_t index)</argsstring>
        <name>proc_id</name>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the PID of a process by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Process index, between 0 and <ref refid="taskswitch_8h_1a01a99ff8bacb9f2f0509b21f45fc7217" kindref="member">proc_total()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pid_t Process ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="302" column="7" bodyfile="src/taskswitch.c" bodystart="302" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1af07a4cb6343c2ca5228d36287bd60a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_run_next</definition>
        <argsstring>()</argsstring>
        <name>proc_run_next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="317" column="6" bodyfile="src/taskswitch.c" bodystart="317" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a52e01dc185bad0060a679bb691f0f908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t process_hash</definition>
        <argsstring>(const void *item, uint64_t seed0, uint64_t seed1)</argsstring>
        <name>process_hash</name>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="333" column="10" bodyfile="src/taskswitch.c" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a66a5b7697b004c2f36dfd98efc5bee1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int process_compare</definition>
        <argsstring>(const void *a, const void *b, void *udata)</argsstring>
        <name>process_compare</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>udata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="338" column="5" bodyfile="src/taskswitch.c" bodystart="338" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a891b299b6b04305ac2665e45ce591204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wakeup_callback</definition>
        <argsstring>([[maybe_unused]] uint8_t isr, [[maybe_unused]] uint64_t errorcode, [[maybe_unused]] uint64_t irq, [[maybe_unused]] void *opaque)</argsstring>
        <name>wakeup_callback</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] uint8_t</type>
          <declname>isr</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] uint64_t</type>
          <declname>errorcode</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] uint64_t</type>
          <declname>irq</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] void *</type>
          <declname>opaque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="344" column="6" bodyfile="src/taskswitch.c" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1ab25d44702b6e10e723714c368c4a7520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_process</definition>
        <argsstring>()</argsstring>
        <name>init_process</name>
        <briefdescription>
<para>Initialise the process subsystem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="348" column="6" bodyfile="src/taskswitch.c" bodystart="348" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1af57a1ba1649626d231502d6c23bbac49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_loop</definition>
        <argsstring>()</argsstring>
        <name>proc_loop</name>
        <briefdescription>
<para>Run the process scheduling loop. </para>
        </briefdescription>
        <detaileddescription>
<para>Each logical CPU has its own scheduling loop. <simplesect kind="note"><para>This function does not return. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="363" column="6" bodyfile="src/taskswitch.c" bodystart="363" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a1ec64ff3e1bbf088a6611d7304cf72e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_timer</definition>
        <argsstring>()</argsstring>
        <name>proc_timer</name>
        <briefdescription>
<para>Switch to the next scheduled process. </para>
        </briefdescription>
        <detaileddescription>
<para>Implements a round-robin scheduling algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="387" column="6" bodyfile="src/taskswitch.c" bodystart="387" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1a7844baa5edadb538de03bc3494e947cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int proc_ended</definition>
        <argsstring>(process_t *proc)</argsstring>
        <name>proc_ended</name>
        <param>
          <type><ref refid="structprocess__t" kindref="compound">process_t</ref> *</type>
          <declname>proc</declname>
        </param>
        <briefdescription>
<para>Determine if a program has ended. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc</parametername>
</parameternamelist>
<parameterdescription>
<para>Process to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Non-zero if ended, zero otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="405" column="5" bodyfile="src/taskswitch.c" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="taskswitch_8c_1ad2dd4ffab2aaabd37998ec3b3216af48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_register_idle</definition>
        <argsstring>(proc_idle_timer_t handler, idle_type_t type)</argsstring>
        <name>proc_register_idle</name>
        <param>
          <type><ref refid="taskswitch_8h_1a82c77e5c902b86503a57e02bb4314bad" kindref="member">proc_idle_timer_t</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="taskswitch_8h_1ab6c8a1a3016b13baf9af7476cceac7d4" kindref="member">idle_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Register an idle callback function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer, void(void) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Foreground or background idle type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/taskswitch.c" line="410" column="6" bodyfile="src/taskswitch.c" bodystart="410" bodyend="422"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/taskswitch.c"/>
  </compounddef>
</doxygen>
