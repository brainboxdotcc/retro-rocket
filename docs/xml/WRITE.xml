<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="WRITE" kind="page">
    <compoundname>WRITE</compoundname>
    <title>WRITE Keyword</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><programlisting filename=".basic"><codeline><highlight class="normal">WRITE<sp/>integer-variable,<sp/>printable</highlight></codeline>
</programlisting></para>
<para>Writes text to an <bold>open file</bold>. <linebreak/>
 The first parameter must be an <bold>integer variable</bold> containing a <bold>file handle</bold> obtained from <ulink url="https://github.com/brainboxdotcc/retro-rocket/wiki/OPENOUT"><computeroutput>OPENOUT</computeroutput></ulink> or <ulink url="https://github.com/brainboxdotcc/retro-rocket/wiki/OPENUP"><computeroutput>OPENUP</computeroutput></ulink>. <linebreak/>
 The second parameter, <computeroutput>printable</computeroutput>, follows the <bold>same formatting semantics as <computeroutput>PRINT</computeroutput></bold>.</para>
<para><hruler/>
</para>
<sect3 id="WRITE_1autotoc_md523">
<title>Formatting semantics (same as &lt;tt&gt;PRINT&lt;/tt&gt;)</title>
<para><itemizedlist>
<listitem><para>You may pass <bold>strings</bold> and <bold>numeric expressions</bold>; numbers are converted to text.</para>
</listitem><listitem><para>Multiple items can be separated by **<computeroutput>;</computeroutput>** or **<computeroutput>,</computeroutput>**:<itemizedlist>
<listitem><para><computeroutput>;</computeroutput> writes the next item <bold>immediately</bold> with <bold>no extra spacing</bold>.</para>
</listitem><listitem><para><computeroutput>,</computeroutput> advances to the next <bold>print zone</bold> (tab stop) before writing the next item. This inserts <bold>spaces</bold>, not a literal comma.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>If the line <bold>does not</bold> end with <computeroutput>;</computeroutput> or <computeroutput>,</computeroutput>, a <bold>newline</bold> is written automatically.</para>
</listitem><listitem><para>To control line endings explicitly (for example CRLF), append them yourself with <computeroutput>CHR$(13) + CHR$(10)</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para><blockquote><para>A comma in <computeroutput>WRITE</computeroutput> does <bold>not</bold> emit the character <computeroutput>,</computeroutput>. <linebreak/>
 If you want actual commas (for CSV), include them in the string: <programlisting filename=".basic"><codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;A,B,C&quot;</highlight></codeline>
</programlisting> </para>
</blockquote></para>
<para><blockquote><para>To include a double quote inside a string, insert it with <computeroutput>CHR$(34)</computeroutput>: <programlisting filename=".basic"><codeline><highlight class="normal">WRITE<sp/>FH,<sp/>CHR$(34)<sp/>+<sp/>&quot;quoted&quot;<sp/>+<sp/>CHR$(34)</highlight></codeline>
</programlisting> </para>
</blockquote></para>
</sect3>
<sect2 id="WRITE_1autotoc_md524">
<title>&lt;/blockquote&gt;</title>
<sect3 id="WRITE_1autotoc_md525">
<title>Examples</title>
<para><bold>Create a file and write two lines</bold> <programlisting filename=".basic"><codeline><highlight class="normal">FH<sp/>=<sp/>OPENOUT(&quot;log.txt&quot;)</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;Hello&quot;</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;World&quot;</highlight></codeline>
<codeline><highlight class="normal">CLOSE<sp/>FH</highlight></codeline>
</programlisting></para>
<para><bold>Build a line without the implicit newline, then add CRLF</bold> <programlisting filename=".basic"><codeline><highlight class="normal">FH<sp/>=<sp/>OPENOUT(&quot;proto.txt&quot;)</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;USER<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;guest&quot;;</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>CHR$(13)<sp/>+<sp/>CHR$(10)</highlight></codeline>
<codeline><highlight class="normal">CLOSE<sp/>FH</highlight></codeline>
</programlisting></para>
<para><bold>Numbers and strings together</bold> <programlisting filename=".basic"><codeline><highlight class="normal">FH<sp/>=<sp/>OPENOUT(&quot;stats.txt&quot;)</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;X=&quot;;<sp/>42;<sp/>&quot;<sp/>Y=&quot;;<sp/>99</highlight></codeline>
<codeline><highlight class="normal">CLOSE<sp/>FH</highlight></codeline>
</programlisting></para>
<para><bold>Avoid print zones when you mean CSV</bold> <programlisting filename=".basic"><codeline><highlight class="normal">FH<sp/>=<sp/>OPENOUT(&quot;data.csv&quot;)</highlight></codeline>
<codeline><highlight class="normal">REM<sp/>not:<sp/>WRITE<sp/>FH,<sp/>&quot;alpha&quot;,<sp/>&quot;beta&quot;,<sp/>&quot;gamma&quot;</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;alpha,beta,gamma&quot;</highlight></codeline>
<codeline><highlight class="normal">CLOSE<sp/>FH</highlight></codeline>
</programlisting></para>
<para><bold>Error handling around a write</bold> <programlisting filename=".basic"><codeline><highlight class="normal">ON<sp/>ERROR<sp/>PROCfile_err</highlight></codeline>
<codeline><highlight class="normal">FH<sp/>=<sp/>OPENOUT(&quot;out.txt&quot;)</highlight></codeline>
<codeline><highlight class="normal">WRITE<sp/>FH,<sp/>&quot;line&quot;</highlight></codeline>
<codeline><highlight class="normal">CLOSE<sp/>FH</highlight></codeline>
<codeline><highlight class="normal">END</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">DEF<sp/>PROCfile_err</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRINT<sp/>&quot;Write<sp/>failed:<sp/>&quot;;<sp/>ERR$</highlight></codeline>
<codeline><highlight class="normal">ENDPROC</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
<sect3 id="WRITE_1autotoc_md527">
<title>Notes</title>
<para><itemizedlist>
<listitem><para><computeroutput>integer-variable</computeroutput> must be a <bold>variable</bold> holding a valid handle; do not pass a literal or expression.</para>
</listitem><listitem><para>After <computeroutput>CLOSE</computeroutput>, the handle is invalid for further <computeroutput>WRITE</computeroutput> calls.</para>
</listitem><listitem><para><computeroutput>WRITE</computeroutput> does not flush independently; closing the handle ensures data is written.</para>
</listitem></itemizedlist>
</para>
<para><bold>See also:</bold> <linebreak/>
 <ulink url="https://github.com/brainboxdotcc/retro-rocket/wiki/PRINT"><computeroutput>PRINT</computeroutput></ulink> · <ulink url="https://github.com/brainboxdotcc/retro-rocket/wiki/OPENOUT"><computeroutput>OPENOUT</computeroutput></ulink> · <ulink url="https://github.com/brainboxdotcc/retro-rocket/wiki/OPENUP"><computeroutput>OPENUP</computeroutput></ulink> · <ulink url="https://github.com/brainboxdotcc/retro-rocket/wiki/CLOSE"><computeroutput>CLOSE</computeroutput></ulink> </para>
</sect3>
</sect2>
    </detaileddescription>
    <location file="docpages/basic-language-reference/keywords/WRITE.md"/>
  </compounddef>
</doxygen>
