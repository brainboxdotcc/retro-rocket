<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="tcp_8c" kind="file" language="C++">
    <compoundname>tcp.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <incdepgraph>
      <node id="57">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>basic/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>stdarg.h</label>
      </node>
      <node id="60">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="29">
        <label>basic/validation.h</label>
        <link refid="validation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>basic/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>basic/structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>stdnoreturn.h</label>
      </node>
      <node id="27">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>basic/peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="84">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>basic/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="47">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="90">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>basic/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>basic/flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="66">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>basic/builtin_real_functions.h</label>
        <link refid="builtin__real__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="68">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="85">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="87">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>basic/sockets.h</label>
        <link refid="sockets_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>basic/defines.h</label>
        <link refid="defines_8h"/>
      </node>
      <node id="17">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>basic/builtin_integer_functions.h</label>
        <link refid="builtin__integer__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="51">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>basic/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="32">
        <label>basic/builtin_string_functions.h</label>
        <link refid="builtin__string__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tcp.c</label>
        <link refid="tcp_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>basic/console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>basic/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="33">
        <label>basic/builtin_file_io_functions.h</label>
        <link refid="builtin__file__io__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>scsi.h</label>
        <link refid="scsi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>basic/lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="21">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>basic/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>basic/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="tcp_8c_1a6f8f49bc3c11eb24ddb9df2b777d1767" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* tcb</definition>
        <argsstring></argsstring>
        <name>tcb</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="3" column="22" bodyfile="src/net/tcp.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tcp_8c_1a81e9011a484999b346bdd1c85e26ba97" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t isn_rand_base</definition>
        <argsstring></argsstring>
        <name>isn_rand_base</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="5" column="17" bodyfile="src/net/tcp.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tcp_8c_1a18d0f3d97e3f13b56d8ce3c40d73f5ed" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t isn_tick_base</definition>
        <argsstring></argsstring>
        <name>isn_tick_base</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="6" column="17" bodyfile="src/net/tcp.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tcp_8c_1a0c9b5d9f7b9b8b0360a9cc2a9db5a904" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int isn_init</definition>
        <argsstring></argsstring>
        <name>isn_init</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="7" column="12" bodyfile="src/net/tcp.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tcp_8c_1a79cda015c79ff2b4c1444e3070f0bb5d" prot="public" static="yes" mutable="no">
        <type><ref refid="spinlock_8h_1af82eed01f0304d83276dda764b213779" kindref="member">spinlock_t</ref></type>
        <definition>spinlock_t lock</definition>
        <argsstring></argsstring>
        <name>lock</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="8" column="19" bodyfile="src/net/tcp.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="tcp_8c_1a04d6c5aa1480297be289c658666c01f1" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* error_messages[]</definition>
        <argsstring>[]</argsstring>
        <name>error_messages</name>
        <initializer>= {
	&quot;Socket is already closing&quot;,
	&quot;Port in use&quot;,
	&quot;Network is down&quot;,
	&quot;Invalid connection&quot;,
	&quot;Write too large&quot;,
	&quot;Socket not connected&quot;,
	&quot;Out of socket descriptors&quot;,
	&quot;Out of memory&quot;,
	&quot;Invalid socket descriptor&quot;,
	&quot;Connection failed&quot;,
	&quot;Socket not listening&quot;,
	&quot;Accept would block&quot;,
	&quot;Connection timed out&quot;,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="11" column="19" bodyfile="src/net/tcp.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tcp_8c_1a214f25b568d9efd3d0a86bdcfe0d2616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_receive_fin</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_receive_fin</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when we receive FIN. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="769" column="6" bodyfile="src/net/tcp.c" bodystart="769" bodyend="804" declfile="src/net/tcp.c" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a0a5ac590e0a9088bc8ddf519e8e0967d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* socket_error</definition>
        <argsstring>(int error_code)</argsstring>
        <name>socket_error</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Return the error description associated with an error code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Invalid error codes return the constant &quot;No error&quot;.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* description </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="29" column="12" bodyfile="src/net/tcp.c" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ac9a8537cdc0fd4f4356add3b523391e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t get_isn</definition>
        <argsstring>()</argsstring>
        <name>get_isn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="38" column="10" bodyfile="src/net/tcp.c" bodystart="38" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ae675f3df7ce9d5ddea9050443f6f6dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool seq_lt</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>seq_lt</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="54" column="6" bodyfile="src/net/tcp.c" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1aeb3de4fe04475c09b292bf71bf0a175a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool seq_lte</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>seq_lte</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="59" column="6" bodyfile="src/net/tcp.c" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a5d69668a0bae4e57c41f3657840a0956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool seq_gt</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>seq_gt</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="64" column="6" bodyfile="src/net/tcp.c" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a473b7dd1cb0588bb1057164a02fc47e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool seq_gte</definition>
        <argsstring>(uint32_t x, uint32_t y)</argsstring>
        <name>seq_gte</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="69" column="6" bodyfile="src/net/tcp.c" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ab876210b35fe5bed3553bffff11dd349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_conn_compare</definition>
        <argsstring>(const void *a, const void *b, void *udata)</argsstring>
        <name>tcp_conn_compare</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>udata</declname>
        </param>
        <briefdescription>
<para>Comparison function for hash table of tcp connections. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>first object to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>second object to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>udata</parametername>
</parameternamelist>
<parameterdescription>
<para>user data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 for equal, 1 for not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="82" column="5" bodyfile="src/net/tcp.c" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a16c33212152620295382813f3d2f31ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t tcp_conn_hash</definition>
        <argsstring>(const void *item, uint64_t seed0, uint64_t seed1)</argsstring>
        <name>tcp_conn_hash</name>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed1</declname>
        </param>
        <briefdescription>
<para>Hash an ip connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to hash </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed0</parametername>
</parameternamelist>
<parameterdescription>
<para>first seed from hashmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed1</parametername>
</parameternamelist>
<parameterdescription>
<para>second seed from hashmap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t hash bucket value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="97" column="10" bodyfile="src/net/tcp.c" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1abc3ee20119efcc93a842946fba1ce561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_free</definition>
        <argsstring>(tcp_conn_t *conn, bool with_lock)</argsstring>
        <name>tcp_free</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>with_lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="103" column="6" bodyfile="src/net/tcp.c" bodystart="103" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1aa386730f497701efce8f9dd8f01c235e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t tcp_calculate_checksum</definition>
        <argsstring>(ip_packet_t *packet, tcp_segment_t *segment, size_t len)</argsstring>
        <name>tcp_calculate_checksum</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="133" column="10" bodyfile="src/net/tcp.c" bodystart="133" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a4feb883d196783f849a6372099d4a508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_byte_order_in</definition>
        <argsstring>(tcp_segment_t *const segment)</argsstring>
        <name>tcp_byte_order_in</name>
        <param>
          <type>tcp_segment_t *const</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Swap byte order of an inbound packet fields to host byte order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>segment to swap byte order for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="168" column="6" bodyfile="src/net/tcp.c" bodystart="168" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ad33bd38a1aa07d7b8ea65ab309027b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_byte_order_out</definition>
        <argsstring>(tcp_segment_t *const segment)</argsstring>
        <name>tcp_byte_order_out</name>
        <param>
          <type>tcp_segment_t *const</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="179" column="6" bodyfile="src/net/tcp.c" bodystart="179" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1af8102b39384be502290c55c6d9c89923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t tcp_parse_options</definition>
        <argsstring>(tcp_segment_t *const segment, tcp_options_t *options)</argsstring>
        <name>tcp_parse_options</name>
        <param>
          <type>tcp_segment_t *const</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Parse the options fields of a tcp segment into a <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>segment to parse </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options struct to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of recognised options found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="203" column="9" bodyfile="src/net/tcp.c" bodystart="203" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ace43d7dd2f9763f7a906bcf3c3114deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
        <definition>tcp_conn_t* tcp_find</definition>
        <argsstring>(uint32_t source_addr, uint32_t dest_addr, uint16_t source_port, uint16_t dest_port)</argsstring>
        <name>tcp_find</name>
        <param>
          <type>uint32_t</type>
          <declname>source_addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>source_port</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dest_port</declname>
        </param>
        <briefdescription>
<para>Find a TCP TCB by source and destination address/port pairs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>source address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>destination addres </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_port</parametername>
</parameternamelist>
<parameterdescription>
<para>source port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_port</parametername>
</parameternamelist>
<parameterdescription>
<para>destination port </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tcp_conn_t* TCB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="233" column="12" bodyfile="src/net/tcp.c" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1aa0f00d4a8ff9158f6a4138b531ab1379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
        <definition>tcp_conn_t* tcp_set_state</definition>
        <argsstring>(tcp_conn_t *conn, tcp_state_t new_state)</argsstring>
        <name>tcp_set_state</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type><ref refid="tcp_8h_1a30a6f4a8caaf05f882c7c7ecb1e8d83f" kindref="member">tcp_state_t</ref></type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
<para>Set the state for a TCB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_state</parametername>
</parameternamelist>
<parameterdescription>
<para>new state to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tcp_conn_t* modified TCB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="249" column="12" bodyfile="src/net/tcp.c" bodystart="249" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1aee8a39ec6745c9f2b765820dce977185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t tcp_build_options</definition>
        <argsstring>(uint8_t *options, const tcp_options_t *opt)</argsstring>
        <name>tcp_build_options</name>
        <param>
          <type>uint8_t *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Build the options for a segment before sending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options pointer to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>options values to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t number of bytes filled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="265" column="9" bodyfile="src/net/tcp.c" bodystart="265" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1aac3e5a924fc67e6eb8b2d2d58a7f4d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
        <definition>tcp_conn_t* tcp_send_segment</definition>
        <argsstring>(tcp_conn_t *conn, uint32_t seq, uint8_t flags, const void *data, size_t count)</argsstring>
        <name>tcp_send_segment</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Send a segment to the peer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seq</parametername>
</parameternamelist>
<parameterdescription>
<para>send sequence number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>header flags </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of octets of data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tcp_conn_t* modified TCB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="287" column="12" bodyfile="src/net/tcp.c" bodystart="287" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a74284b0a11634f10e384e95bc9ebd803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tcp_header_size</definition>
        <argsstring>(tcp_segment_t *s)</argsstring>
        <name>tcp_header_size</name>
        <param>
          <type>tcp_segment_t *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Calculate size of header for a segment using the payload offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t size of header </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="352" column="8" bodyfile="src/net/tcp.c" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a75032ffbabb54edf804b6103fb0c510c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_write</definition>
        <argsstring>(tcp_conn_t *conn, const void *data, size_t count)</argsstring>
        <name>tcp_write</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write data to an open connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of octets to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int zero on success, negative value on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="365" column="5" bodyfile="src/net/tcp.c" bodystart="365" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a9fae714621be602167d457c62e33c85f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tcp_segment_t *</type>
        <definition>tcp_segment_t* tcp_ord_list_insert</definition>
        <argsstring>(tcp_conn_t *conn, tcp_segment_t *segment, size_t len)</argsstring>
        <name>tcp_ord_list_insert</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Insert segment into list of segments ordered by sequence number. If this segment partially overlaps a segment in the list, that segment will be adjusted in size and this segment will overwrite it. If however the current segment&apos;s sequence number exists exactly in the list this is a duplicate segment and will be dropped. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>tcp connection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>tcp segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of tcp segment payload </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tcp_segment_t* newly inserted copy of segment on success, or NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="390" column="15" bodyfile="src/net/tcp.c" bodystart="390" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a1c672351b81d20e4c461651505752727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_process_queue</definition>
        <argsstring>(tcp_conn_t *conn, tcp_segment_t *segment, size_t len)</argsstring>
        <name>tcp_process_queue</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Send completed sequences of segments to the recv buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="490" column="6" bodyfile="src/net/tcp.c" bodystart="490" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a21c3e7df05a0c2e84587e765f4b43909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_listen</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_listen</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="546" column="6" bodyfile="src/net/tcp.c" bodystart="546" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a024b4a8b3ea818c47577a130b899fdbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_send_ack</definition>
        <argsstring>(tcp_conn_t *conn)</argsstring>
        <name>tcp_send_ack</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Send an ACK for the segments we have received so far. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on successfully queueing the segment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="558" column="6" bodyfile="src/net/tcp.c" bodystart="558" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a338f973fea7653505864976cdb77199a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_send_fin_ack</definition>
        <argsstring>(tcp_conn_t *conn)</argsstring>
        <name>tcp_send_fin_ack</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="569" column="6" bodyfile="src/net/tcp.c" bodystart="569" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a1a22ad65359d60c3d9563313ea07c004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_syn_sent</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_syn_sent</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is SYN-SENT. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="591" column="6" bodyfile="src/net/tcp.c" bodystart="591" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1add6d3ca65551b99722275ec5890f16d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_syn_received</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_syn_received</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is SYN-RECEIVED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="666" column="6" bodyfile="src/net/tcp.c" bodystart="666" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a04dd6209768f1bfebe055e5aa222f177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_receive_rst</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_receive_rst</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when we receive RST. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="684" column="6" bodyfile="src/net/tcp.c" bodystart="684" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a745219f2cfc3cff881b8b6d441aace20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_handle_data_in</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_handle_data_in</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called for general data IN that we need to ACK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="723" column="6" bodyfile="src/net/tcp.c" bodystart="723" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a383e5b445608621d0ec2805660fcf10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_set_conn_msl_time</definition>
        <argsstring>(tcp_conn_t *conn)</argsstring>
        <name>tcp_set_conn_msl_time</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
<para>Set connection timeout (12 seconds) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="754" column="6" bodyfile="src/net/tcp.c" bodystart="754" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ac7c0f2bbb73bca358db4c8ef67084559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_established</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_established</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is ESTABLISHED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="816" column="6" bodyfile="src/net/tcp.c" bodystart="816" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1af061b7b3b7a648a863124f700ca0b0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_fin_wait_1</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_fin_wait_1</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is FIN-WAIT-1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="837" column="6" bodyfile="src/net/tcp.c" bodystart="837" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a0a315555828672675f3ce51faac160ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_fin_wait_2</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_fin_wait_2</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is FIN-WAIT-2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="867" column="6" bodyfile="src/net/tcp.c" bodystart="867" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a533348445846649da136d821ffa438e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_close_wait</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_close_wait</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is CLOSE-WAIT. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="883" column="6" bodyfile="src/net/tcp.c" bodystart="883" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a6035542bb9e0ba654143f88f59425acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_closing</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_closing</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is CLOSING. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="900" column="6" bodyfile="src/net/tcp.c" bodystart="900" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ad5d4343279c0056cbfd3f6409ebb1256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_last_ack</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_last_ack</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is LAST-ACK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="915" column="6" bodyfile="src/net/tcp.c" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a44df86a0659fcbe27f20609f888cad57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_time_wait</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_time_wait</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Called when state is TIME-WAIT. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="930" column="6" bodyfile="src/net/tcp.c" bodystart="930" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a5cf351cb80d4c8cc2512ad0f490893c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_state_machine</definition>
        <argsstring>(ip_packet_t *encap_packet, tcp_segment_t *segment, tcp_conn_t *conn, const tcp_options_t *options, size_t len)</argsstring>
        <name>tcp_state_machine</name>
        <param>
          <type>ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>const <ref refid="structtcp__options__t" kindref="compound">tcp_options_t</ref> *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Finite state machine to route segments based on current state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn</parametername>
</parameternamelist>
<parameterdescription>
<para>TCB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>options, e.g. MSS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if we are to continue processing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="948" column="6" bodyfile="src/net/tcp.c" bodystart="948" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a8d4611b68b5ca398ee9bc373573afab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_handle_packet</definition>
        <argsstring>([[maybe_unused]] ip_packet_t *encap_packet, tcp_segment_t *segment, size_t len)</argsstring>
        <name>tcp_handle_packet</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] ip_packet_t *</type>
          <declname>encap_packet</declname>
        </param>
        <param>
          <type>tcp_segment_t *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Handle inbound packet from IP layer. </para>
        </briefdescription>
        <detaileddescription>
<para>TCP handler called by the IP layer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encap_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>encapsulating IP packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="983" column="6" bodyfile="src/net/tcp.c" bodystart="983" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a5505c46ddfafecad526d12d4d1666050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_idle</definition>
        <argsstring>()</argsstring>
        <name>tcp_idle</name>
        <briefdescription>
<para>ISR idle task. </para>
        </briefdescription>
        <detaileddescription>
<para>Idle loop ran from timer ISR. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="999" column="6" bodyfile="src/net/tcp.c" bodystart="999" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a0e048a052cd5ec7a0bfe8734751990f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_init</definition>
        <argsstring>()</argsstring>
        <name>tcp_init</name>
        <briefdescription>
<para>Initialise TCP. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialise TCP protocol, must happen after IP. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1044" column="6" bodyfile="src/net/tcp.c" bodystart="1044" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a249d5d94734e90a3fd51b70fe4810343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tcp_port_in_use</definition>
        <argsstring>(uint32_t addr, uint16_t port, tcp_port_type_t type)</argsstring>
        <name>tcp_port_in_use</name>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="tcp_8h_1aee0c1c2ac9ad5818e178340cf8812c8e" kindref="member">tcp_port_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return true if port is in use on this local address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>local address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>port number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>port type, local or remote </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if port is in use </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1058" column="6" bodyfile="src/net/tcp.c" bodystart="1058" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a4f402771111ada0834a98e599c0bd313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t tcp_alloc_port</definition>
        <argsstring>(uint32_t source_addr, uint16_t port, tcp_port_type_t type)</argsstring>
        <name>tcp_alloc_port</name>
        <param>
          <type>uint32_t</type>
          <declname>source_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="tcp_8h_1aee0c1c2ac9ad5818e178340cf8812c8e" kindref="member">tcp_port_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Allocate a free port &gt;= 1024. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>source address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>port, 0 to let the system choose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of port, local or remote </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t selected port, or 0 if none available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1084" column="10" bodyfile="src/net/tcp.c" bodystart="1084" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ac4ed2cdd1c291c5083404950e916c98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_connect</definition>
        <argsstring>(uint32_t target_addr, uint16_t target_port, uint16_t source_port)</argsstring>
        <name>tcp_connect</name>
        <param>
          <type>uint32_t</type>
          <declname>target_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>target_port</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>source_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1105" column="5" bodyfile="src/net/tcp.c" bodystart="1105" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a616706131cb20d379279872ca4af8e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_close</definition>
        <argsstring>(tcp_conn_t *conn)</argsstring>
        <name>tcp_close</name>
        <param>
          <type><ref refid="structtcp__conn__t" kindref="compound">tcp_conn_t</ref> *</type>
          <declname>conn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1178" column="5" bodyfile="src/net/tcp.c" bodystart="1178" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a5787e23039c4a2243cbc968a48431d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int send</definition>
        <argsstring>(int socket, const void *buffer, uint32_t length)</argsstring>
        <name>send</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send data to an open socket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>socket descriptor from <ref refid="tcp_8h_1a4a95723a63184d3eb69a619853f560da" kindref="member">connect()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int number of bytes written </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1224" column="5" bodyfile="src/net/tcp.c" bodystart="1224" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a4a95723a63184d3eb69a619853f560da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int connect</definition>
        <argsstring>(uint32_t target_addr, uint16_t target_port, uint16_t source_port, bool blocking)</argsstring>
        <name>connect</name>
        <param>
          <type>uint32_t</type>
          <declname>target_addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>target_port</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>source_port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <briefdescription>
<para>Connect to a TCP port at a given IPv4 address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Target address to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Target port to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Our source port to use, or 0 to choose automatically </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if this call is to block until the connection is established or errors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero or positive file descriptor number on success, negative for error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1245" column="5" bodyfile="src/net/tcp.c" bodystart="1245" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ad4725afcb96cfe437fd7a748129b1f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int closesocket</definition>
        <argsstring>(int socket)</argsstring>
        <name>closesocket</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
<para>Close a TCP connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>socket descriptor to close </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero on success, error code on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1265" column="5" bodyfile="src/net/tcp.c" bodystart="1265" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a39bac2a3c55fa01613ed4a5579a5ca67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_connected</definition>
        <argsstring>(int socket)</argsstring>
        <name>is_connected</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
<para>Returns true if the socket is connected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>socket descriptor from <ref refid="tcp_8h_1a4a95723a63184d3eb69a619853f560da" kindref="member">connect()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if socket is connected, false if not. This will return false if <ref refid="tcp_8h_1a4a95723a63184d3eb69a619853f560da" kindref="member">connect()</ref> hasn&apos;t succeeded yet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1275" column="6" bodyfile="src/net/tcp.c" bodystart="1275" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1a6df7b901b1a9f3ec7046f958f9e7cf36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int recv</definition>
        <argsstring>(int socket, void *buffer, uint32_t maxlen, bool blocking, uint32_t timeout)</argsstring>
        <name>recv</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxlen</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive data from an open socket. The data is buffered, and this function will fill the buffer when there is data in the buffer to read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>socket descriptor from <ref refid="tcp_8h_1a4a95723a63184d3eb69a619853f560da" kindref="member">connect()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to receive data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum size of data to receive to buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>true if this call should block until the buffer has data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>read timeout when blocking (seconds) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int number of bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1286" column="5" bodyfile="src/net/tcp.c" bodystart="1286" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ae4013d43c90be7603c80e7224765d830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sock_ready_to_read</definition>
        <argsstring>(int socket)</argsstring>
        <name>sock_ready_to_read</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
<para>Check if a socket has data ready to be read. </para>
        </briefdescription>
        <detaileddescription>
<para>Non-blocking check for buffered data on the given socket. Does not consume any data or modify the recv buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if there is data available to read, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1331" column="6" bodyfile="src/net/tcp.c" bodystart="1331" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1ab30a0d5f82ac8f116897d82578ae25eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_listen</definition>
        <argsstring>(uint32_t addr, uint16_t port, int backlog)</argsstring>
        <name>tcp_listen</name>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>backlog</declname>
        </param>
        <briefdescription>
<para>Create a listening TCP socket. </para>
        </briefdescription>
        <detaileddescription>
<para>Binds a TCP connection control block (TCB) to the given local address and port, and transitions it into the LISTEN state. A pending connection queue is created to hold half‑open connections until they are accepted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Local IPv4 address to bind to (network byte order). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Local TCP port to listen on (host byte order). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backlog</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of pending connections that may be queued.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>File descriptor for the listening socket on success, or a negative TCP_ERROR code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1340" column="5" bodyfile="src/net/tcp.c" bodystart="1340" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="tcp_8c_1aeb880bf940312acdf8a48c4d4dfa0b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tcp_accept</definition>
        <argsstring>(int socket)</argsstring>
        <name>tcp_accept</name>
        <param>
          <type>int</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
<para>Accept an incoming connection on a listening socket. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes one pending connection from the listening socket’s queue and allocates a new file descriptor for it. The connection will be in the ESTABLISHED state upon return.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>socket</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor of a socket previously placed in the LISTEN state using <ref refid="tcp_8h_1ab30a0d5f82ac8f116897d82578ae25eb" kindref="member">tcp_listen()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>File descriptor for the accepted connection on success, or a negative TCP_ERROR code on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/net/tcp.c" line="1389" column="5" bodyfile="src/net/tcp.c" bodystart="1389" bodyend="1439"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/net/tcp.c"/>
  </compounddef>
</doxygen>
