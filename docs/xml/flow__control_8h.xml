<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="flow__control_8h" kind="file" language="C++">
    <compoundname>flow_control.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="basic_8h" local="yes">basic.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="150">
        <label>memcpy.c</label>
        <link refid="memcpy_8c"/>
      </node>
      <node id="11">
        <label>console.c</label>
        <link refid="console_8c"/>
      </node>
      <node id="99">
        <label>reflection.c</label>
        <link refid="reflection_8c"/>
      </node>
      <node id="137">
        <label>main.c</label>
        <link refid="fs_2fat32_2main_8c"/>
      </node>
      <node id="133">
        <label>createfile.c</label>
        <link refid="fat32_2createfile_8c"/>
      </node>
      <node id="69">
        <label>helpers.c</label>
        <link refid="fs_2retrofs_2helpers_8c"/>
      </node>
      <node id="2">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>tokenizer.c</label>
        <link refid="tokenizer_8c"/>
      </node>
      <node id="9">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>errorhandler.c</label>
        <link refid="errorhandler_8c"/>
      </node>
      <node id="61">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>cluster.c</label>
        <link refid="cluster_8c"/>
      </node>
      <node id="18">
        <label>filesystem.c</label>
        <link refid="filesystem_8c"/>
      </node>
      <node id="110">
        <label>main.c</label>
        <link refid="block_2ahci_2main_8c"/>
      </node>
      <node id="104">
        <label>variable.c</label>
        <link refid="variable_8c"/>
      </node>
      <node id="74">
        <label>unlinkdirectory.c</label>
        <link refid="unlinkdirectory_8c"/>
      </node>
      <node id="40">
        <label>helpers.c</label>
        <link refid="installer_2helpers_8c"/>
      </node>
      <node id="4">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="165">
        <label>random.c</label>
        <link refid="random_8c"/>
      </node>
      <node id="6">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>net.c</label>
        <link refid="net_8c"/>
      </node>
      <node id="7">
        <label>peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>interrupt.c</label>
        <link refid="interrupt_8c"/>
      </node>
      <node id="83">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="164">
        <label>printf.c</label>
        <link refid="printf_8c"/>
      </node>
      <node id="92">
        <label>function.c</label>
        <link refid="function_8c"/>
      </node>
      <node id="48">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>taskswitch.c</label>
        <link refid="taskswitch_8c"/>
      </node>
      <node id="160">
        <label>queue.c</label>
        <link refid="queue_8c"/>
      </node>
      <node id="23">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>block_cache.h</label>
        <link refid="block__cache_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>main.c</label>
        <link refid="installer_2main_8c"/>
      </node>
      <node id="67">
        <label>fsmap.c</label>
        <link refid="fsmap_8c"/>
      </node>
      <node id="26">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>input.c</label>
        <link refid="input_8c"/>
      </node>
      <node id="66">
        <label>format.c</label>
        <link refid="format_8c"/>
      </node>
      <node id="166">
        <label>stdlib.c</label>
        <link refid="stdlib_8c"/>
      </node>
      <node id="174">
        <label>test.c</label>
        <link refid="test_8c"/>
      </node>
      <node id="37">
        <label>installer.h</label>
        <link refid="installer_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>writefile.c</label>
        <link refid="fat32_2writefile_8c"/>
      </node>
      <node id="96">
        <label>maths.c</label>
        <link refid="basic_2maths_8c"/>
      </node>
      <node id="157">
        <label>icmp.c</label>
        <link refid="icmp_8c"/>
      </node>
      <node id="116">
        <label>ramdisk.c</label>
        <link refid="ramdisk_8c"/>
      </node>
      <node id="117">
        <label>buddy_allocator.c</label>
        <link refid="buddy__allocator_8c"/>
      </node>
      <node id="158">
        <label>ip.c</label>
        <link refid="ip_8c"/>
      </node>
      <node id="44">
        <label>tui.c</label>
        <link refid="tui_8c"/>
      </node>
      <node id="147">
        <label>keyboard.c</label>
        <link refid="keyboard_8c"/>
      </node>
      <node id="151">
        <label>module_loader.c</label>
        <link refid="module__loader_8c"/>
      </node>
      <node id="90">
        <label>debugger.c</label>
        <link refid="basic_2debugger_8c"/>
      </node>
      <node id="65">
        <label>createfile.c</label>
        <link refid="retrofs_2createfile_8c"/>
      </node>
      <node id="91">
        <label>file_io.c</label>
        <link refid="file__io_8c"/>
      </node>
      <node id="72">
        <label>truncatefile.c</label>
        <link refid="retrofs_2truncatefile_8c"/>
      </node>
      <node id="121">
        <label>debug_ringbuffer.c</label>
        <link refid="debug__ringbuffer_8c"/>
      </node>
      <node id="131">
        <label>devfs.c</label>
        <link refid="devfs_8c"/>
      </node>
      <node id="130">
        <label>debuglog.c</label>
        <link refid="debuglog_8c"/>
      </node>
      <node id="154">
        <label>descriptor.c</label>
        <link refid="descriptor_8c"/>
      </node>
      <node id="100">
        <label>sockets.c</label>
        <link refid="sockets_8c"/>
      </node>
      <node id="170">
        <label>video.c</label>
        <link refid="video_8c"/>
      </node>
      <node id="56">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>unlink.c</label>
        <link refid="unlink_8c"/>
      </node>
      <node id="84">
        <label>acpi.c</label>
        <link refid="acpi_8c"/>
      </node>
      <node id="39">
        <label>gpt_writer.c</label>
        <link refid="gpt__writer_8c"/>
      </node>
      <node id="93">
        <label>graphics.c</label>
        <link refid="graphics_8c"/>
      </node>
      <node id="113">
        <label>storage_device.c</label>
        <link refid="storage__device_8c"/>
      </node>
      <node id="149">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="70">
        <label>main.c</label>
        <link refid="fs_2retrofs_2main_8c"/>
      </node>
      <node id="1">
        <label>flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>debugger.c</label>
        <link refid="debugger_8c"/>
      </node>
      <node id="12">
        <label>double_expression.c</label>
        <link refid="double__expression_8c"/>
      </node>
      <node id="55">
        <label>e1000.c</label>
        <link refid="e1000_8c"/>
      </node>
      <node id="171">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>timer.c</label>
        <link refid="timer_8c"/>
      </node>
      <node id="112">
        <label>sense.c</label>
        <link refid="sense_8c"/>
      </node>
      <node id="172">
        <label>rtl8139.c</label>
        <link refid="rtl8139_8c"/>
      </node>
      <node id="173">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>flanterm.c</label>
        <link refid="flanterm_8c"/>
      </node>
      <node id="163">
        <label>pci.c</label>
        <link refid="pci_8c"/>
      </node>
      <node id="97">
        <label>peekpoke.c</label>
        <link refid="peekpoke_8c"/>
      </node>
      <node id="14">
        <label>int_expression.c</label>
        <link refid="int__expression_8c"/>
      </node>
      <node id="107">
        <label>enquiry.c</label>
        <link refid="enquiry_8c"/>
      </node>
      <node id="60">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="153">
        <label>debug.c</label>
        <link refid="debug_8c"/>
      </node>
      <node id="88">
        <label>array.c</label>
        <link refid="array_8c"/>
      </node>
      <node id="115">
        <label>write.c</label>
        <link refid="write_8c"/>
      </node>
      <node id="34">
        <label>initialisation-functions.h</label>
        <link refid="initialisation-functions_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="152">
        <label>arp.c</label>
        <link refid="arp_8c"/>
      </node>
      <node id="29">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>lfn.c</label>
        <link refid="lfn_8c"/>
      </node>
      <node id="77">
        <label>serial.c</label>
        <link refid="serial_8c"/>
      </node>
      <node id="76">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>fpu.c</label>
        <link refid="fpu_8c"/>
      </node>
      <node id="126">
        <label>fb.c</label>
        <link refid="fb_8c"/>
      </node>
      <node id="101">
        <label>statement.c</label>
        <link refid="statement_8c"/>
      </node>
      <node id="146">
        <label>ioapic.c</label>
        <link refid="ioapic_8c"/>
      </node>
      <node id="33">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>kmalloc.c</label>
        <link refid="kmalloc_8c"/>
      </node>
      <node id="143">
        <label>gdt.c</label>
        <link refid="gdt_8c"/>
      </node>
      <node id="16">
        <label>unified_expression.c</label>
        <link refid="unified__expression_8c"/>
      </node>
      <node id="54">
        <label>mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="155">
        <label>dhcp.c</label>
        <link refid="dhcp_8c"/>
      </node>
      <node id="53">
        <label>mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>vector.c</label>
        <link refid="vector_8c"/>
      </node>
      <node id="94">
        <label>lowlevel.c</label>
        <link refid="lowlevel_8c"/>
      </node>
      <node id="87">
        <label>ata.c</label>
        <link refid="ata_8c"/>
      </node>
      <node id="129">
        <label>block_cache.c</label>
        <link refid="block__cache_8c"/>
      </node>
      <node id="68">
        <label>getdirectory.c</label>
        <link refid="getdirectory_8c"/>
      </node>
      <node id="15">
        <label>string_expression.c</label>
        <link refid="string__expression_8c"/>
      </node>
      <node id="82">
        <label>tinyalloc.c</label>
        <link refid="tinyalloc_8c"/>
      </node>
      <node id="106">
        <label>eject.c</label>
        <link refid="eject_8c"/>
      </node>
      <node id="89">
        <label>datetime.c</label>
        <link refid="datetime_8c"/>
      </node>
      <node id="13">
        <label>flow_control.c</label>
        <link refid="flow__control_8c"/>
      </node>
      <node id="51">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="144">
        <label>idt.c</label>
        <link refid="idt_8c"/>
      </node>
      <node id="42">
        <label>os_detection.c</label>
        <link refid="os__detection_8c"/>
      </node>
      <node id="35">
        <label>init.c</label>
        <link refid="init_8c"/>
      </node>
      <node id="105">
        <label>description.c</label>
        <link refid="description_8c"/>
      </node>
      <node id="80">
        <label>tinyalloc.h</label>
        <link refid="tinyalloc_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>iso9660.c</label>
        <link refid="iso9660_8c"/>
      </node>
      <node id="161">
        <label>tcp.c</label>
        <link refid="tcp_8c"/>
      </node>
      <node id="111">
        <label>read.c</label>
        <link refid="read_8c"/>
      </node>
      <node id="64">
        <label>createdirectory.c</label>
        <link refid="createdirectory_8c"/>
      </node>
      <node id="38">
        <label>crc32.c</label>
        <link refid="crc32_8c"/>
      </node>
      <node id="162">
        <label>udp.c</label>
        <link refid="udp_8c"/>
      </node>
      <node id="135">
        <label>fat.c</label>
        <link refid="fat_8c"/>
      </node>
      <node id="27">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>apic.c</label>
        <link refid="apic_8c"/>
      </node>
      <node id="52">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>error.c</label>
        <link refid="error_8c"/>
      </node>
      <node id="118">
        <label>clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="21">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>ap.c</label>
        <link refid="ap_8c"/>
      </node>
      <node id="32">
        <label>devicename.c</label>
        <link refid="devicename_8c"/>
      </node>
      <node id="142">
        <label>partition.c</label>
        <link refid="partition_8c"/>
      </node>
      <node id="78">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>unlinkfile.c</label>
        <link refid="unlinkfile_8c"/>
      </node>
      <node id="98">
        <label>process.c</label>
        <link refid="process_8c"/>
      </node>
      <node id="102">
        <label>string.c</label>
        <link refid="basic_2string_8c"/>
      </node>
      <node id="30">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>main.c</label>
        <link refid="basic_2main_8c"/>
      </node>
      <node id="134">
        <label>directory.c</label>
        <link refid="directory_8c"/>
      </node>
      <node id="138">
        <label>readfile.c</label>
        <link refid="fat32_2readfile_8c"/>
      </node>
      <node id="109">
        <label>identify.c</label>
        <link refid="identify_8c"/>
      </node>
      <node id="45">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="125">
        <label>ethernet.c</label>
        <link refid="ethernet_8c"/>
      </node>
      <node id="139">
        <label>truncatefile.c</label>
        <link refid="fat32_2truncatefile_8c"/>
      </node>
      <node id="156">
        <label>dns.c</label>
        <link refid="dns_8c"/>
      </node>
      <node id="114">
        <label>trim.c</label>
        <link refid="trim_8c"/>
      </node>
      <node id="8">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="119">
        <label>map.c</label>
        <link refid="map_8c"/>
      </node>
      <node id="59">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="24">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>string.c</label>
        <link refid="string_8c"/>
      </node>
      <node id="148">
        <label>lapic_timer.c</label>
        <link refid="lapic__timer_8c"/>
      </node>
      <node id="10">
        <label>unified_expression.h</label>
        <link refid="unified__expression_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>recursive_file_copy.c</label>
        <link refid="recursive__file__copy_8c"/>
      </node>
      <node id="123">
        <label>drawing.c</label>
        <link refid="drawing_8c"/>
      </node>
      <node id="63">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>writefile.c</label>
        <link refid="retrofs_2writefile_8c"/>
      </node>
      <node id="71">
        <label>readfile.c</label>
        <link refid="retrofs_2readfile_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="flow__control_8h_1a5c11e3d5030f995bd246a57cc0ab5cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void def_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>def_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the DEF statement in BASIC, used for function or procedure definitions. </para>
        </briefdescription>
        <detaileddescription>
<para>The DEF statement is used to define a function or a procedure in BASIC. It processes the definition and parameter list.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="15" column="6" bodyfile="src/basic/function.c" bodystart="626" bodyend="636" declfile="include/basic/flow_control.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1adeda5bab28da3cd45cffea5d21407903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void proc_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>proc_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the PROC statement in BASIC, used for calling a procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>The PROC statement calls a procedure that has been previously defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="24" column="6" bodyfile="src/basic/function.c" bodystart="578" bodyend="624" declfile="include/basic/flow_control.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a01598501745286d4bf0f372672e9063a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void endproc_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>endproc_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the ENDPROC statement in BASIC, used for returning from a procedure. </para>
        </briefdescription>
        <detaileddescription>
<para>The ENDPROC statement is used to return control from a procedure to the calling location.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="33" column="6" bodyfile="src/basic/function.c" bodystart="664" bodyend="689" declfile="include/basic/flow_control.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1ae64f409fce646c35026a2f3c376601fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void begin_comma_list</definition>
        <argsstring>(struct ub_proc_fn_def *def, struct basic_ctx *ctx)</argsstring>
        <name>begin_comma_list</name>
        <param>
          <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Begins parsing a function&apos;s comma-separated parameter list. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the context for parsing a list of parameters, setting up necessary variables to process function arguments passed to a procedure or function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>def</parametername>
</parameternamelist>
<parameterdescription>
<para>The function definition containing the parameter list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="44" column="6" bodyfile="src/basic/function.c" bodystart="156" bodyend="160" declfile="include/basic/flow_control.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a98495ca274489e72135a13df2a16caca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t extract_comma_list</definition>
        <argsstring>(struct ub_proc_fn_def *def, struct basic_ctx *ctx)</argsstring>
        <name>extract_comma_list</name>
        <param>
          <type>struct <ref refid="structub__proc__fn__def" kindref="compound">ub_proc_fn_def</ref> *</type>
          <declname>def</declname>
        </param>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Extracts a parameter from a comma-separated list in a function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function extracts individual parameters from a function&apos;s comma-separated argument list and processes them based on their type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>def</parametername>
</parameternamelist>
<parameterdescription>
<para>The function definition containing the parameter list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t 1 if more parameters are present, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="56" column="9" bodyfile="src/basic/function.c" bodystart="163" bodyend="220" declfile="include/basic/flow_control.h" declline="56" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a1066dbd361fdf3e3ee94c502348abb87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eq_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>eq_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the = statement in BASIC, used to return a value from a FN. </para>
        </briefdescription>
        <detaileddescription>
<para>The = character as a statement returns a value from a function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="65" column="6" bodyfile="src/basic/function.c" bodystart="638" bodyend="662" declfile="include/basic/flow_control.h" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a74a2cb553e82e778dfd7a2c3cd39fa37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool conditional</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>conditional</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Evaluates a conditional expression in BASIC, used in IF statements. </para>
        </briefdescription>
        <detaileddescription>
<para>This function evaluates a condition for an IF or other conditional statements in BASIC. It checks the boolean result of the condition and returns it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if the condition is met, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="76" column="6" bodyfile="src/basic/flow_control.c" bodystart="10" bodyend="14" declfile="include/basic/flow_control.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a5c2b65ab1d1749489a08e52f572824db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void else_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>else_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the ELSE statement in BASIC, used for branching after an IF condition. </para>
        </briefdescription>
        <detaileddescription>
<para>The ELSE statement is used to execute a block of code if the corresponding IF condition is not met.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="85" column="6" bodyfile="src/basic/flow_control.c" bodystart="16" bodyend="31" declfile="include/basic/flow_control.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1ab14de683d192b4d11f91a47deea7fc7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void if_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>if_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the IF statement in BASIC, used for conditional execution. </para>
        </briefdescription>
        <detaileddescription>
<para>The IF statement checks a condition and, based on the result, executes either the THEN block or an ELSE block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="95" column="6" bodyfile="src/basic/flow_control.c" bodystart="79" bodyend="174" declfile="include/basic/flow_control.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1aa739b2352b3c0ab06fef1924eef65819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gosub_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>gosub_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the GOSUB statement in BASIC, used for subroutine calls. </para>
        </briefdescription>
        <detaileddescription>
<para>The GOSUB statement calls a subroutine and pushes the return address to the call stack.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="104" column="6" bodyfile="src/basic/flow_control.c" bodystart="176" bodyend="193" declfile="include/basic/flow_control.h" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a9155587fe9dd2137324d4c29673d5612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void return_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>return_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the RETURN statement in BASIC, used to return from a GOSUB. </para>
        </briefdescription>
        <detaileddescription>
<para>The RETURN statement pops the return address from the call stack and returns control to that point.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="113" column="6" bodyfile="src/basic/flow_control.c" bodystart="195" bodyend="205" declfile="include/basic/flow_control.h" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1ae1239d2b4023bbaa8a8b1d3e1ba255cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void next_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>next_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the NEXT statement in BASIC, used for loop iteration in FOR...NEXT. </para>
        </briefdescription>
        <detaileddescription>
<para>The NEXT statement increments the loop variable in a FOR...NEXT loop and continues the loop if the condition is met, or terminates it otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="123" column="6" bodyfile="src/basic/flow_control.c" bodystart="207" bodyend="238" declfile="include/basic/flow_control.h" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1aa5385d1217fac2c289687952e2c3394e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void for_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>for_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the FOR statement in BASIC, used to start a loop. </para>
        </briefdescription>
        <detaileddescription>
<para>The FOR statement initializes a loop with a start value, end value, and step, and jumps to the corresponding loop body.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="133" column="6" bodyfile="src/basic/flow_control.c" bodystart="240" bodyend="283" declfile="include/basic/flow_control.h" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a6e49ec283da5e1e2034ce0eba3fe0f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void repeat_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>repeat_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the REPEAT statement in BASIC, used to start a loop. </para>
        </briefdescription>
        <detaileddescription>
<para>The REPEAT statement starts a loop that continues until the condition in the UNTIL statement is true.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="142" column="6" bodyfile="src/basic/flow_control.c" bodystart="285" bodyend="296" declfile="include/basic/flow_control.h" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1ac1c2636efc012daa7b6353fc1ba11f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void until_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>until_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the UNTIL statement in BASIC, used to end a REPEAT loop. </para>
        </briefdescription>
        <detaileddescription>
<para>The UNTIL statement checks the loop condition and, if true, exits the REPEAT loop.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="151" column="6" bodyfile="src/basic/flow_control.c" bodystart="298" bodyend="314" declfile="include/basic/flow_control.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1aec700f9d4e9379775488fa8ebe885896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void while_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>while_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the WHILE statement in BASIC, used to start a loop. </para>
        </briefdescription>
        <detaileddescription>
<para>The WHILE statement starts a loop that continues until its condition is false.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="160" column="6" bodyfile="src/basic/flow_control.c" bodystart="368" bodyend="395" declfile="include/basic/flow_control.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1ab685ec088ca32e56148aa4b0dd9db090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void endwhile_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>endwhile_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the ENDWHILE statement in BASIC, used to end a WHILE loop. </para>
        </briefdescription>
        <detaileddescription>
<para>The ENDWHILE statement loops back to its corresponding WHILE loop</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="169" column="6" bodyfile="src/basic/flow_control.c" bodystart="397" bodyend="405" declfile="include/basic/flow_control.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1ad986c439ccafd354c73c65c4ad1f8a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void endif_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>endif_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the ENDIF statement in BASIC, used to close an IF...THEN block. </para>
        </briefdescription>
        <detaileddescription>
<para>The ENDIF statement closes a block started with an IF statement, ending the conditional execution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="178" column="6" bodyfile="src/basic/flow_control.c" bodystart="316" bodyend="320" declfile="include/basic/flow_control.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a74a931514b48a5c2b109777f27e0b298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void end_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>end_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the END statement in BASIC, used to terminate a program. </para>
        </briefdescription>
        <detaileddescription>
<para>The END statement halts the program&apos;s execution. If inside an IF statement, it checks for a corresponding ENDIF to terminate the block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="188" column="6" bodyfile="src/basic/flow_control.c" bodystart="322" bodyend="326" declfile="include/basic/flow_control.h" declline="188" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1adb9c78bacd0d5a8262ce1604fedb56d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void panic_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>panic_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Handles the PANIC statement in BASIC, used for forceful termination of the program. </para>
        </briefdescription>
        <detaileddescription>
<para>The PANIC statement halts the execution of the program abruptly, often used for error situations.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="197" column="6" declfile="include/basic/flow_control.h" declline="197" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a978cd0a306639177cb02c2f12549916c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_in_eval</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_in_eval</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Checks if the program is currently inside an EVAL statement. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the program is inside an EVAL block, which modifies the program at runtime.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current BASIC program context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if the program is inside an EVAL, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="207" column="6" bodyfile="src/basic/main.c" bodystart="642" bodyend="644" declfile="include/basic/flow_control.h" declline="207" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a2f998df8ec705260396caec448a1dc2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void on_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>on_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="209" column="6" bodyfile="src/basic/flow_control.c" bodystart="33" bodyend="64" declfile="include/basic/flow_control.h" declline="209" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a907324f64699e7b2ddc1510500937176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void off_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>off_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="211" column="6" bodyfile="src/basic/flow_control.c" bodystart="66" bodyend="70" declfile="include/basic/flow_control.h" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1a19d127d5577882e3e0ad90a784d9f1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>error_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="213" column="6" bodyfile="src/basic/flow_control.c" bodystart="72" bodyend="77" declfile="include/basic/flow_control.h" declline="213" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="flow__control_8h_1aaae3d2bf12d39489fecfca009dc7c1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void continue_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>continue_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/flow_control.h" line="215" column="6" bodyfile="src/basic/flow_control.c" bodystart="407" bodyend="450" declfile="include/basic/flow_control.h" declline="215" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/basic/flow_control.h"/>
  </compounddef>
</doxygen>
