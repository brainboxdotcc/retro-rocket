<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="module__loader_8c" kind="file" language="C++">
    <compoundname>module_loader.c</compoundname>
    <includes refid="kernel_8h" local="no">kernel.h</includes>
    <incdepgraph>
      <node id="57">
        <label>ata.h</label>
        <link refid="ata_8h"/>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>basic/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>stdarg.h</label>
      </node>
      <node id="60">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="29">
        <label>basic/validation.h</label>
        <link refid="validation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>basic/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>basic/structs.h</label>
        <link refid="structs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>stdnoreturn.h</label>
      </node>
      <node id="27">
        <label>buddy_allocator.h</label>
        <link refid="buddy__allocator_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>basic/peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rwlock.h</label>
        <link refid="rwlock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>spinlock.h</label>
        <link refid="spinlock_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>idt.h</label>
        <link refid="idt_8h"/>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="82">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>basic/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>module_loader.c</label>
        <link refid="module__loader_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>stdlib.h</label>
        <link refid="stdlib_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>x86intrin.h</label>
      </node>
      <node id="47">
        <label>ioapic.h</label>
        <link refid="ioapic_8h"/>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="88">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>basic/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>basic/flow_control.h</label>
        <link refid="flow__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="66">
        <label>keyboard.h</label>
        <link refid="keyboard_8h"/>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.h</label>
        <link refid="io_8h"/>
      </node>
      <node id="15">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>basic/builtin_real_functions.h</label>
        <link refid="builtin__real__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>limine.h</label>
      </node>
      <node id="68">
        <label>input.h</label>
        <link refid="input_8h"/>
      </node>
      <node id="83">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>video.h</label>
        <link refid="video_8h"/>
      </node>
      <node id="85">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>basic/sockets.h</label>
        <link refid="sockets_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>basic/defines.h</label>
        <link refid="defines_8h"/>
      </node>
      <node id="17">
        <label>vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>basic/builtin_integer_functions.h</label>
        <link refid="builtin__integer__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>filesystem.h</label>
        <link refid="filesystem_8h"/>
      </node>
      <node id="51">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>basic/expression.h</label>
        <link refid="expression_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>errorhandler.h</label>
        <link refid="errorhandler_8h"/>
      </node>
      <node id="32">
        <label>basic/builtin_string_functions.h</label>
        <link refid="builtin__string__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>basic/console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>timer.h</label>
        <link refid="timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>basic/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>debugger.h</label>
        <link refid="debugger_8h"/>
      </node>
      <node id="33">
        <label>basic/builtin_file_io_functions.h</label>
        <link refid="builtin__file__io__functions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>kmalloc.h</label>
        <link refid="kmalloc_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>scsi.h</label>
        <link refid="scsi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>basic/lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>apic.h</label>
        <link refid="apic_8h"/>
      </node>
      <node id="21">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>basic/process.h</label>
        <link refid="process_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>basic/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="module__loader_8c_1a7dda0e62ebe085b929c6f0abc5b4cb6e" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structhashmap" kindref="compound">hashmap</ref> *</type>
        <definition>struct hashmap* modules</definition>
        <argsstring></argsstring>
        <name>modules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="3" column="22" bodyfile="src/module_loader.c" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="module__loader_8c_1ac88094e7162162520268fa6ba739d0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* kernel_dlsym</definition>
        <argsstring>(const char *name)</argsstring>
        <name>kernel_dlsym</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Resolve a kernel global by name via the kernel dynamic symbol table. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the kernel to be linked with <ndash/>export-dynamic and to KEEP .dynsym and .dynstr</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>NUL-terminated symbol name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>symbol address on success, NULL if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="5" column="12" bodyfile="src/module_loader.c" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a748f56ff56028b04ef9efb3aa5867bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parse_elf_rel_headers</definition>
        <argsstring>(const uint8_t *file, size_t len, const elf_ehdr **eh, const elf_shdr **sh, size_t *shnum, const char **shstr)</argsstring>
        <name>parse_elf_rel_headers</name>
        <param>
          <type>const uint8_t *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="structelf__ehdr" kindref="compound">elf_ehdr</ref> **</type>
          <declname>eh</declname>
        </param>
        <param>
          <type>const <ref refid="structelf__shdr" kindref="compound">elf_shdr</ref> **</type>
          <declname>sh</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>shnum</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>shstr</declname>
        </param>
        <briefdescription>
<para>Parse and validate the ELF64 ET_REL header and section table. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs basic structural checks and returns pointers into the provided buffer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ELF bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eh</parametername>
</parameternamelist>
<parameterdescription>
<para>out: pointer to the ELF header inside <computeroutput>file</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sh</parametername>
</parameternamelist>
<parameterdescription>
<para>out: pointer to the section header table inside <computeroutput>file</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shnum</parametername>
</parameternamelist>
<parameterdescription>
<para>out: number of section headers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shstr</parametername>
</parameternamelist>
<parameterdescription>
<para>out: pointer to the section-name string table inside <computeroutput>file</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the buffer looks like a valid ELF64 ET_REL object, else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="13" column="6" bodyfile="src/module_loader.c" bodystart="13" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a348c318528095cc8bef01b82c2b8f629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_alloc_section</definition>
        <argsstring>(const elf_shdr *h)</argsstring>
        <name>is_alloc_section</name>
        <param>
          <type>const <ref refid="structelf__shdr" kindref="compound">elf_shdr</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Predicate for sections that must be placed in memory at load time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>section header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if SHF_ALLOC is set, else false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="47" column="6" bodyfile="src/module_loader.c" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1ac45722ccf0f29f40e2ed529472931889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t address_align_up</definition>
        <argsstring>(size_t v, size_t a)</argsstring>
        <name>address_align_up</name>
        <param>
          <type>size_t</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="54" column="8" bodyfile="src/module_loader.c" bodystart="54" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a88b1f613b0a3bf4d48fd84541c8cbf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool module_place_sections</definition>
        <argsstring>(const uint8_t *file, const elf_shdr *sh, size_t shnum, module *m)</argsstring>
        <name>module_place_sections</name>
        <param>
          <type>const uint8_t *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structelf__shdr" kindref="compound">elf_shdr</ref> *</type>
          <declname>sh</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>shnum</declname>
        </param>
        <param>
          <type><ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Allocate one contiguous block and place all SHF_ALLOC sections into it. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes total size with per-section alignment, allocates with kmalloc_aligned, copies SHT_PROGBITS contents, zeros SHT_NOBITS, and records the run-time base of each placed section</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ELF bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sh</parametername>
</parameternamelist>
<parameterdescription>
<para>section header table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shnum</parametername>
</parameternamelist>
<parameterdescription>
<para>number of section headers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor to populate (base, size, placed[], placed_count) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="65" column="6" bodyfile="src/module_loader.c" bodystart="65" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1ab32eb89028a8c29886649817d0b4a4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* module_section_base</definition>
        <argsstring>(const module *m, uint16_t shndx)</argsstring>
        <name>module_section_base</name>
        <param>
          <type>const <ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>shndx</declname>
        </param>
        <briefdescription>
<para>Return the run-time base address for a placed section. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shndx</parametername>
</parameternamelist>
<parameterdescription>
<para>section index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>base address where that section was placed, or NULL if unknown </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="135" column="9" bodyfile="src/module_loader.c" bodystart="135" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1aefbf1531980c0e423e6867779128e640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool module_load_symbols</definition>
        <argsstring>(const uint8_t *file, const elf_shdr *sh, size_t shnum, module *m)</argsstring>
        <name>module_load_symbols</name>
        <param>
          <type>const uint8_t *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structelf__shdr" kindref="compound">elf_shdr</ref> *</type>
          <declname>sh</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>shnum</declname>
        </param>
        <param>
          <type><ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Locate the module’s static symbol table and its associated string table. </para>
        </briefdescription>
        <detaileddescription>
<para>Populates m-&gt;symtab, m-&gt;sym_count and m-&gt;strtab</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ELF bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sh</parametername>
</parameternamelist>
<parameterdescription>
<para>section header table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shnum</parametername>
</parameternamelist>
<parameterdescription>
<para>number of section headers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor to populate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if tables are missing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="148" column="6" bodyfile="src/module_loader.c" bodystart="148" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1ac1292b98065118e4db5cd53825447dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structelf__sym" kindref="compound">elf_sym</ref> *</type>
        <definition>const elf_sym* module_sym_by_index</definition>
        <argsstring>(const module *m, uint32_t idx)</argsstring>
        <name>module_sym_by_index</name>
        <param>
          <type>const <ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Index into the module symbol table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol index (0..sym_count-1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the symbol, or NULL if out of range </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="174" column="15" bodyfile="src/module_loader.c" bodystart="174" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a9f3eb51447ffd8caf8c5fb0c17691e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t module_resolve_symbol_addr</definition>
        <argsstring>(const module *m, const elf_sym *s)</argsstring>
        <name>module_resolve_symbol_addr</name>
        <param>
          <type>const <ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structelf__sym" kindref="compound">elf_sym</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Compute a symbol’s absolute run-time address post-relocation. </para>
        </briefdescription>
        <detaileddescription>
<para>For SHN_UNDEF symbols resolves against the kernel via kernel_dlsym For defined symbols returns placed_section_base + st_value</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol entry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>absolute address on success, 0 on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="181" column="11" bodyfile="src/module_loader.c" bodystart="181" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1ab21876dfa87c1afbb9f531ad99144e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool module_apply_relocations</definition>
        <argsstring>(const uint8_t *file, const elf_shdr *sh, size_t shnum, module *m)</argsstring>
        <name>module_apply_relocations</name>
        <param>
          <type>const uint8_t *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structelf__shdr" kindref="compound">elf_shdr</ref> *</type>
          <declname>sh</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>shnum</declname>
        </param>
        <param>
          <type><ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Apply all SHT_RELA relocations for the module. </para>
        </briefdescription>
        <detaileddescription>
<para>Supports R_X86_64_64, R_X86_64_PC32, R_X86_64_32 and R_X86_64_32S Undefined globals are resolved via kernel_dlsym; overflows cause failure</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ELF bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sh</parametername>
</parameternamelist>
<parameterdescription>
<para>section header table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shnum</parametername>
</parameternamelist>
<parameterdescription>
<para>number of section headers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on error</para>
</simplesect>
<simplesect kind="warning"><para>R_X86_64_PC32 must only target intra-module references externals should appear as R_X86_64_64 when modules are built with -mcmodel=large -fno-pic -fno-plt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="203" column="6" bodyfile="src/module_loader.c" bodystart="203" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a459c858923fceddb8c5661e0c0221619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* module_dlsym_local</definition>
        <argsstring>(const module *m, const char *name)</argsstring>
        <name>module_dlsym_local</name>
        <param>
          <type>const <ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Resolve a symbol by name within a loaded module after relocation. </para>
        </briefdescription>
        <detaileddescription>
<para>Looks up the symbol in the module’s own SHT_SYMTAB/STRTAB and computes its run-time address</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>loaded module descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>NUL-terminated symbol name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address within the module image, or NULL if not found or undefined </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="300" column="6" bodyfile="src/module_loader.c" bodystart="300" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a5d05b267ec7e869c1c585de127bfe31b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool module_load_from_memory</definition>
        <argsstring>(const void *file, size_t len, module *out)</argsstring>
        <name>module_load_from_memory</name>
        <param>
          <type>const void *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Load and relocate a module from an in-memory ELF64 ET_REL buffer, then call its initialiser. </para>
        </briefdescription>
        <detaileddescription>
<para>Validates the ELF header, allocates a single contiguous region for all SHF_ALLOC sections, copies/zeros contents with correct alignment, applies all SHT_RELA relocations, resolves undefined globals against the kernel dynamic symbol table (from kernel.sym), resolves versioned mod_init/mod_exit, then calls mod_init</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the ELF bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the ELF buffer in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output descriptor populated on success; zeroed on entry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on error</para>
</simplesect>
<simplesect kind="note"><para>the input buffer is not retained and may be freed after return </para>
</simplesect>
<simplesect kind="warning"><para>fails if any relocation overflows or an undefined symbol cannot be resolved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="330" column="6" bodyfile="src/module_loader.c" bodystart="330" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1ad7daba93a2e3fedd9bdb43b872fe60dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool module_internal_unload</definition>
        <argsstring>(module *m)</argsstring>
        <name>module_internal_unload</name>
        <param>
          <type><ref refid="structmodule" kindref="compound">module</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Unload a module by calling its finaliser and freeing its memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls mod_exit if present, frees the contiguous allocation, and clears the descriptor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>module descriptor previously returned by module_load_from_memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if <computeroutput>m</computeroutput> is NULL or teardown fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="384" column="6" bodyfile="src/module_loader.c" bodystart="384" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a94766ccf512fca2b0b6439405fa11d1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int module_compare</definition>
        <argsstring>(const void *a, const void *b, void *udata)</argsstring>
        <name>module_compare</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>udata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="406" column="12" bodyfile="src/module_loader.c" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a4130b7374d60ecd2d8107673690a5cd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t module_hash</definition>
        <argsstring>(const void *item, uint64_t seed0, uint64_t seed1)</argsstring>
        <name>module_hash</name>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="412" column="17" bodyfile="src/module_loader.c" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a25e130fb91ca7b60a404c4895e30baac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void module_hash_free</definition>
        <argsstring>(const void *item, void *udata)</argsstring>
        <name>module_hash_free</name>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>udata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="417" column="13" bodyfile="src/module_loader.c" bodystart="417" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a8251bb24540fe5fbb7bf067a0b92f0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_modules</definition>
        <argsstring>(void)</argsstring>
        <name>init_modules</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialise the module registry and loader state. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates the in-kernel hashmap used to track loaded modules keyed by name Must be called once before any other module operations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="423" column="6" bodyfile="src/module_loader.c" bodystart="423" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a62097018dccfec9d20febd55b0aa97a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool load_module</definition>
        <argsstring>(const char *name)</argsstring>
        <name>load_module</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Load and start a module by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs the path /system/modules/&lt;name&gt;.ko, reads the file, relocates it, resolves externals against the kernel symbol index, and calls mod_init Returns false if the module is already loaded or on any failure</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>NUL-terminated module base name without extension or path </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="430" column="6" bodyfile="src/module_loader.c" bodystart="430" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="module__loader_8c_1a849f237422418802d3ad3d32af5eb9b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool unload_module</definition>
        <argsstring>(const char *name)</argsstring>
        <name>unload_module</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Stop and unload a loaded module by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Locates the module in the registry, calls mod_exit if present, frees all allocations associated with the image, and removes the entry from the registry</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>NUL-terminated module base name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false if not found or unload failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/module_loader.c" line="472" column="6" bodyfile="src/module_loader.c" bodystart="472" bodyend="483"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/module_loader.c"/>
  </compounddef>
</doxygen>
