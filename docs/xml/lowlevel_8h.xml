<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lowlevel_8h" kind="file" language="C++">
    <compoundname>lowlevel.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="basic_8h" local="yes">basic.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="152">
        <label>memcpy.c</label>
        <link refid="memcpy_8c"/>
      </node>
      <node id="11">
        <label>console.c</label>
        <link refid="console_8c"/>
      </node>
      <node id="101">
        <label>reflection.c</label>
        <link refid="reflection_8c"/>
      </node>
      <node id="139">
        <label>main.c</label>
        <link refid="fs_2fat32_2main_8c"/>
      </node>
      <node id="135">
        <label>createfile.c</label>
        <link refid="fat32_2createfile_8c"/>
      </node>
      <node id="70">
        <label>helpers.c</label>
        <link refid="fs_2retrofs_2helpers_8c"/>
      </node>
      <node id="2">
        <label>basic.h</label>
        <link refid="basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>tokenizer.c</label>
        <link refid="tokenizer_8c"/>
      </node>
      <node id="9">
        <label>context.h</label>
        <link refid="context_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>errorhandler.c</label>
        <link refid="errorhandler_8c"/>
      </node>
      <node id="62">
        <label>ramdisk.h</label>
        <link refid="ramdisk_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>cluster.c</label>
        <link refid="cluster_8c"/>
      </node>
      <node id="18">
        <label>filesystem.c</label>
        <link refid="filesystem_8c"/>
      </node>
      <node id="112">
        <label>main.c</label>
        <link refid="block_2ahci_2main_8c"/>
      </node>
      <node id="106">
        <label>variable.c</label>
        <link refid="variable_8c"/>
      </node>
      <node id="75">
        <label>unlinkdirectory.c</label>
        <link refid="unlinkdirectory_8c"/>
      </node>
      <node id="41">
        <label>helpers.c</label>
        <link refid="installer_2helpers_8c"/>
      </node>
      <node id="4">
        <label>acpi.h</label>
        <link refid="acpi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>random.c</label>
        <link refid="random_8c"/>
      </node>
      <node id="6">
        <label>arp.h</label>
        <link refid="arp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>dns.h</label>
        <link refid="dns_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>net.c</label>
        <link refid="net_8c"/>
      </node>
      <node id="7">
        <label>peekpoke.h</label>
        <link refid="peekpoke_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>fat32.h</label>
        <link refid="fat32_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>interrupt.c</label>
        <link refid="interrupt_8c"/>
      </node>
      <node id="85">
        <label>udp.h</label>
        <link refid="udp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>printf.c</label>
        <link refid="printf_8c"/>
      </node>
      <node id="94">
        <label>function.c</label>
        <link refid="function_8c"/>
      </node>
      <node id="49">
        <label>iso9660.h</label>
        <link refid="iso9660_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>tcp.h</label>
        <link refid="tcp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="171">
        <label>taskswitch.c</label>
        <link refid="taskswitch_8c"/>
      </node>
      <node id="162">
        <label>queue.c</label>
        <link refid="queue_8c"/>
      </node>
      <node id="23">
        <label>devicename.h</label>
        <link refid="devicename_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>block_cache.h</label>
        <link refid="block__cache_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>main.c</label>
        <link refid="installer_2main_8c"/>
      </node>
      <node id="68">
        <label>fsmap.c</label>
        <link refid="fsmap_8c"/>
      </node>
      <node id="26">
        <label>drawing.h</label>
        <link refid="drawing_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>input.c</label>
        <link refid="input_8c"/>
      </node>
      <node id="67">
        <label>format.c</label>
        <link refid="format_8c"/>
      </node>
      <node id="169">
        <label>stdlib.c</label>
        <link refid="stdlib_8c"/>
      </node>
      <node id="38">
        <label>installer.h</label>
        <link refid="installer_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>writefile.c</label>
        <link refid="fat32_2writefile_8c"/>
      </node>
      <node id="98">
        <label>maths.c</label>
        <link refid="basic_2maths_8c"/>
      </node>
      <node id="159">
        <label>icmp.c</label>
        <link refid="icmp_8c"/>
      </node>
      <node id="118">
        <label>ramdisk.c</label>
        <link refid="ramdisk_8c"/>
      </node>
      <node id="119">
        <label>buddy_allocator.c</label>
        <link refid="buddy__allocator_8c"/>
      </node>
      <node id="77">
        <label>rtl8139.h</label>
        <link refid="rtl8139_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>ip.c</label>
        <link refid="ip_8c"/>
      </node>
      <node id="45">
        <label>tui.c</label>
        <link refid="tui_8c"/>
      </node>
      <node id="149">
        <label>keyboard.c</label>
        <link refid="keyboard_8c"/>
      </node>
      <node id="153">
        <label>module_loader.c</label>
        <link refid="module__loader_8c"/>
      </node>
      <node id="92">
        <label>debugger.c</label>
        <link refid="basic_2debugger_8c"/>
      </node>
      <node id="66">
        <label>createfile.c</label>
        <link refid="retrofs_2createfile_8c"/>
      </node>
      <node id="93">
        <label>file_io.c</label>
        <link refid="file__io_8c"/>
      </node>
      <node id="73">
        <label>truncatefile.c</label>
        <link refid="retrofs_2truncatefile_8c"/>
      </node>
      <node id="123">
        <label>debug_ringbuffer.c</label>
        <link refid="debug__ringbuffer_8c"/>
      </node>
      <node id="133">
        <label>devfs.c</label>
        <link refid="devfs_8c"/>
      </node>
      <node id="132">
        <label>debuglog.c</label>
        <link refid="debuglog_8c"/>
      </node>
      <node id="156">
        <label>descriptor.c</label>
        <link refid="descriptor_8c"/>
      </node>
      <node id="102">
        <label>sockets.c</label>
        <link refid="sockets_8c"/>
      </node>
      <node id="173">
        <label>video.c</label>
        <link refid="video_8c"/>
      </node>
      <node id="57">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>unlink.c</label>
        <link refid="unlink_8c"/>
      </node>
      <node id="86">
        <label>acpi.c</label>
        <link refid="acpi_8c"/>
      </node>
      <node id="40">
        <label>gpt_writer.c</label>
        <link refid="gpt__writer_8c"/>
      </node>
      <node id="95">
        <label>graphics.c</label>
        <link refid="graphics_8c"/>
      </node>
      <node id="115">
        <label>storage_device.c</label>
        <link refid="storage__device_8c"/>
      </node>
      <node id="151">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="71">
        <label>main.c</label>
        <link refid="fs_2retrofs_2main_8c"/>
      </node>
      <node id="55">
        <label>e1000.c</label>
        <link refid="e1000_8c"/>
      </node>
      <node id="124">
        <label>debugger.c</label>
        <link refid="debugger_8c"/>
      </node>
      <node id="12">
        <label>double_expression.c</label>
        <link refid="double__expression_8c"/>
      </node>
      <node id="172">
        <label>timer.c</label>
        <link refid="timer_8c"/>
      </node>
      <node id="114">
        <label>sense.c</label>
        <link refid="sense_8c"/>
      </node>
      <node id="20">
        <label>cv.h</label>
        <link refid="cv_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>flanterm.c</label>
        <link refid="flanterm_8c"/>
      </node>
      <node id="165">
        <label>pci.c</label>
        <link refid="pci_8c"/>
      </node>
      <node id="99">
        <label>peekpoke.c</label>
        <link refid="peekpoke_8c"/>
      </node>
      <node id="14">
        <label>int_expression.c</label>
        <link refid="int__expression_8c"/>
      </node>
      <node id="109">
        <label>enquiry.c</label>
        <link refid="enquiry_8c"/>
      </node>
      <node id="61">
        <label>printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>e1000.h</label>
        <link refid="e1000_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>lapic_timer.h</label>
        <link refid="lapic__timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>debug.c</label>
        <link refid="debug_8c"/>
      </node>
      <node id="90">
        <label>array.c</label>
        <link refid="array_8c"/>
      </node>
      <node id="117">
        <label>write.c</label>
        <link refid="write_8c"/>
      </node>
      <node id="35">
        <label>initialisation-functions.h</label>
        <link refid="initialisation-functions_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>arp.c</label>
        <link refid="arp_8c"/>
      </node>
      <node id="30">
        <label>fpu.h</label>
        <link refid="fpu_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>lfn.c</label>
        <link refid="lfn_8c"/>
      </node>
      <node id="79">
        <label>serial.c</label>
        <link refid="serial_8c"/>
      </node>
      <node id="78">
        <label>serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>fpu.c</label>
        <link refid="fpu_8c"/>
      </node>
      <node id="128">
        <label>fb.c</label>
        <link refid="fb_8c"/>
      </node>
      <node id="103">
        <label>statement.c</label>
        <link refid="statement_8c"/>
      </node>
      <node id="148">
        <label>ioapic.c</label>
        <link refid="ioapic_8c"/>
      </node>
      <node id="34">
        <label>icmp.h</label>
        <link refid="icmp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>kmalloc.c</label>
        <link refid="kmalloc_8c"/>
      </node>
      <node id="145">
        <label>gdt.c</label>
        <link refid="gdt_8c"/>
      </node>
      <node id="16">
        <label>unified_expression.c</label>
        <link refid="unified__expression_8c"/>
      </node>
      <node id="56">
        <label>mmio.c</label>
        <link refid="mmio_8c"/>
      </node>
      <node id="157">
        <label>dhcp.c</label>
        <link refid="dhcp_8c"/>
      </node>
      <node id="54">
        <label>mmio.h</label>
        <link refid="mmio_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>ip.h</label>
        <link refid="ip_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>vector.c</label>
        <link refid="vector_8c"/>
      </node>
      <node id="96">
        <label>lowlevel.c</label>
        <link refid="lowlevel_8c"/>
      </node>
      <node id="89">
        <label>ata.c</label>
        <link refid="ata_8c"/>
      </node>
      <node id="131">
        <label>block_cache.c</label>
        <link refid="block__cache_8c"/>
      </node>
      <node id="69">
        <label>getdirectory.c</label>
        <link refid="getdirectory_8c"/>
      </node>
      <node id="15">
        <label>string_expression.c</label>
        <link refid="string__expression_8c"/>
      </node>
      <node id="84">
        <label>tinyalloc.c</label>
        <link refid="tinyalloc_8c"/>
      </node>
      <node id="108">
        <label>eject.c</label>
        <link refid="eject_8c"/>
      </node>
      <node id="91">
        <label>datetime.c</label>
        <link refid="datetime_8c"/>
      </node>
      <node id="168">
        <label>rtl8139.c</label>
        <link refid="rtl8139_8c"/>
      </node>
      <node id="13">
        <label>flow_control.c</label>
        <link refid="flow__control_8c"/>
      </node>
      <node id="52">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>devfs.h</label>
        <link refid="devfs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="146">
        <label>idt.c</label>
        <link refid="idt_8c"/>
      </node>
      <node id="43">
        <label>os_detection.c</label>
        <link refid="os__detection_8c"/>
      </node>
      <node id="36">
        <label>init.c</label>
        <link refid="init_8c"/>
      </node>
      <node id="107">
        <label>description.c</label>
        <link refid="description_8c"/>
      </node>
      <node id="82">
        <label>tinyalloc.h</label>
        <link refid="tinyalloc_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>iso9660.c</label>
        <link refid="iso9660_8c"/>
      </node>
      <node id="163">
        <label>tcp.c</label>
        <link refid="tcp_8c"/>
      </node>
      <node id="113">
        <label>read.c</label>
        <link refid="read_8c"/>
      </node>
      <node id="65">
        <label>createdirectory.c</label>
        <link refid="createdirectory_8c"/>
      </node>
      <node id="39">
        <label>crc32.c</label>
        <link refid="crc32_8c"/>
      </node>
      <node id="164">
        <label>udp.c</label>
        <link refid="udp_8c"/>
      </node>
      <node id="137">
        <label>fat.c</label>
        <link refid="fat_8c"/>
      </node>
      <node id="28">
        <label>ethernet.h</label>
        <link refid="ethernet_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>apic.c</label>
        <link refid="apic_8c"/>
      </node>
      <node id="53">
        <label>memcpy.h</label>
        <link refid="memcpy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>random.h</label>
        <link refid="random_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>error.c</label>
        <link refid="error_8c"/>
      </node>
      <node id="120">
        <label>clock.c</label>
        <link refid="clock_8c"/>
      </node>
      <node id="21">
        <label>debug_ringbuffer.h</label>
        <link refid="debug__ringbuffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>ap.c</label>
        <link refid="ap_8c"/>
      </node>
      <node id="33">
        <label>devicename.c</label>
        <link refid="devicename_8c"/>
      </node>
      <node id="144">
        <label>partition.c</label>
        <link refid="partition_8c"/>
      </node>
      <node id="80">
        <label>taskswitch.h</label>
        <link refid="taskswitch_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>unlinkfile.c</label>
        <link refid="unlinkfile_8c"/>
      </node>
      <node id="100">
        <label>process.c</label>
        <link refid="process_8c"/>
      </node>
      <node id="104">
        <label>string.c</label>
        <link refid="basic_2string_8c"/>
      </node>
      <node id="31">
        <label>hashmap.h</label>
        <link refid="hashmap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>main.c</label>
        <link refid="basic_2main_8c"/>
      </node>
      <node id="136">
        <label>directory.c</label>
        <link refid="directory_8c"/>
      </node>
      <node id="140">
        <label>readfile.c</label>
        <link refid="fat32_2readfile_8c"/>
      </node>
      <node id="111">
        <label>identify.c</label>
        <link refid="identify_8c"/>
      </node>
      <node id="46">
        <label>interrupt.h</label>
        <link refid="interrupt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>ethernet.c</label>
        <link refid="ethernet_8c"/>
      </node>
      <node id="141">
        <label>truncatefile.c</label>
        <link refid="fat32_2truncatefile_8c"/>
      </node>
      <node id="158">
        <label>dns.c</label>
        <link refid="dns_8c"/>
      </node>
      <node id="116">
        <label>trim.c</label>
        <link refid="trim_8c"/>
      </node>
      <node id="8">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>kernel.c</label>
        <link refid="kernel_8c"/>
      </node>
      <node id="1">
        <label>lowlevel.h</label>
        <link refid="lowlevel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>map.c</label>
        <link refid="map_8c"/>
      </node>
      <node id="60">
        <label>pci.h</label>
        <link refid="pci_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ahci.h</label>
        <link refid="ahci_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>hashmap.c</label>
        <link refid="hashmap_8c"/>
      </node>
      <node id="24">
        <label>dhcp.h</label>
        <link refid="dhcp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>string.c</label>
        <link refid="string_8c"/>
      </node>
      <node id="150">
        <label>lapic_timer.c</label>
        <link refid="lapic__timer_8c"/>
      </node>
      <node id="10">
        <label>unified_expression.h</label>
        <link refid="unified__expression_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>recursive_file_copy.c</label>
        <link refid="recursive__file__copy_8c"/>
      </node>
      <node id="125">
        <label>drawing.c</label>
        <link refid="drawing_8c"/>
      </node>
      <node id="64">
        <label>retrofs.h</label>
        <link refid="retrofs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>clock.h</label>
        <link refid="clock_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>writefile.c</label>
        <link refid="retrofs_2writefile_8c"/>
      </node>
      <node id="72">
        <label>readfile.c</label>
        <link refid="retrofs_2readfile_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lowlevel_8h_1a19c0d5d102db5c468f8f07bfed33ce3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx, int leaf)</argsstring>
        <name>write_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leaf</declname>
        </param>
        <briefdescription>
<para>Writes the CPUID information into the provided context for a specific leaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the CPUID information for a given leaf and stores the results in the <computeroutput>last_cpuid_result</computeroutput> field of the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPUID leaf to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="16" column="6" bodyfile="src/basic/lowlevel.c" bodystart="8" bodyend="16" declfile="include/basic/lowlevel.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a5f6f5e32c9a01fab0b640a11b59334d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_cpuidex</definition>
        <argsstring>(struct basic_ctx *ctx, int leaf, int subleaf)</argsstring>
        <name>write_cpuidex</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>leaf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subleaf</declname>
        </param>
        <briefdescription>
<para>Writes the CPUID information into the provided context for a specific leaf and subleaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the CPUID information for a given leaf and subleaf and stores the results in the <computeroutput>last_cpuid_result</computeroutput> field of the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput> context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPUID leaf to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subleaf</parametername>
</parameternamelist>
<parameterdescription>
<para>The CPUID subleaf to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="28" column="6" bodyfile="src/basic/lowlevel.c" bodystart="18" bodyend="27" declfile="include/basic/lowlevel.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1af80c26826e9de2d0deac499b7397747d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t get_cpuid_reg</definition>
        <argsstring>(struct basic_ctx *ctx, int64_t reg)</argsstring>
        <name>get_cpuid_reg</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Retrieves a specific CPUID register value from the context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the value of a specific CPUID register (eax, ebx, ecx, edx) from the <computeroutput>last_cpuid_result</computeroutput> in the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register to retrieve (0 = eax, 1 = ebx, 2 = ecx, 3 = edx). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the specified CPUID register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="40" column="9" bodyfile="src/basic/lowlevel.c" bodystart="29" bodyend="44" declfile="include/basic/lowlevel.h" declline="40" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a988befdafcb2491d0f07b5f5ded58e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_legacy_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_legacy_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Executes a legacy CPUID instruction for a specific leaf and subleaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes the CPUID instruction with a specified leaf and subleaf and stores the result in the context&apos;s <computeroutput>last_cpuid_result</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the subleaf is not -1, 0 if it is. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="51" column="9" bodyfile="src/basic/lowlevel.c" bodystart="46" bodyend="60" declfile="include/basic/lowlevel.h" declline="51" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1afeefd46448bebfea73954e6b48448fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_legacy_getlastcpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_legacy_getlastcpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves the last CPUID register value from the context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the most recent CPUID register value stored in the <computeroutput>last_cpuid_result</computeroutput> from the provided <computeroutput><ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context where the CPUID result is stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the last CPUID register queried. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="62" column="9" bodyfile="src/basic/lowlevel.c" bodystart="62" bodyend="68" declfile="include/basic/lowlevel.h" declline="62" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a08bb8fd0c49417b63889e76620e4f810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* basic_cpugetbrand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpugetbrand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves the CPU brand string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the CPU brand string by executing CPUID with leaf values 0x80000002, 0x80000003, and 0x80000004 and concatenating the result.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CPU brand string.</para>
</simplesect>
Retrieves the CPU brand string.</para>
<para>This function returns the brand of the CPU, providing information about the specific CPU model that the system is running.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The brand of the CPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="73" column="6" bodyfile="src/basic/lowlevel.c" bodystart="70" bodyend="108" declfile="include/basic/lowlevel.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1afa2ef90f885539364abb5363ccfefbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* basic_cpugetvendor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpugetvendor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves the CPU vendor string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the CPU vendor string by executing CPUID with leaf value 0 and storing the result in the <computeroutput>last_cpuid_result</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CPU vendor string.</para>
</simplesect>
Retrieves the CPU vendor string.</para>
<para>This function returns the vendor of the CPU, providing information about the manufacturer of the CPU.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vendor of the CPU </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="84" column="6" bodyfile="src/basic/lowlevel.c" bodystart="110" bodyend="124" declfile="include/basic/lowlevel.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1ab89f69f6260c87b6cc4ee21b5ea35ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* basic_intoasc</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_intoasc</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Converts an integer value to a string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts the specified integer value into its ASCII representation as a string, with a specified length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The string representation of the integer value.</para>
</simplesect>
Converts an integer value to a string representation.</para>
<para>This function converts a number into its ASCII equivalent. For example, the number 123 would be converted to the string &quot;123&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>BASIC interpreter context </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ASCII string representation of the number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="95" column="6" bodyfile="src/basic/lowlevel.c" bodystart="126" bodyend="142" declfile="include/basic/lowlevel.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1aca68b975022b959caf87e20f9342144e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_cpuid</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_cpuid</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Retrieves the CPUID result for a specific leaf and subleaf. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes CPUID for a specified leaf and subleaf and returns the value of a specific CPUID register as defined by the <computeroutput>reg</computeroutput> parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The BASIC context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The CPUID result of the specified register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="106" column="9" bodyfile="src/basic/lowlevel.c" bodystart="144" bodyend="160" declfile="include/basic/lowlevel.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a49564bb2e1a5c10d653e219673529508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outport_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>outport_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC statement OUTPORT. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORT<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para>Writes an 8-bit value to the specified I/O port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context (supplies arguments and error reporting).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 8 bits before being written. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the number or type of arguments is invalid.</para>
</simplesect>
Writes an 8-bit value to an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORT<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context (provides parameters and error reporting).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 8 bits before the write. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="123" column="6" bodyfile="src/basic/lowlevel.c" bodystart="189" bodyend="196" declfile="include/basic/lowlevel.h" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a4e34074e341fc1b7b50e9873e041e50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outportw_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>outportw_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC statement OUTPORTW. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTW<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para>Writes a 16-bit value to the specified I/O port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 16 bits before being written. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the number or type of arguments is invalid.</para>
</simplesect>
Writes a 16-bit value to an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTW<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 16 bits before the write. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="140" column="6" bodyfile="src/basic/lowlevel.c" bodystart="198" bodyend="205" declfile="include/basic/lowlevel.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a661ecfc0cf5eb653d0ca95dbde2d0d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void outportd_statement</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>outportd_statement</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC statement OUTPORTD. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTD<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para>Writes a 32-bit value to the specified I/O port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 32 bits before being written. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the number or type of arguments is invalid.</para>
</simplesect>
Writes a 32-bit value to an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">OUTPORTD<sp/>port,<sp/>value</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The value is truncated to 32 bits before the write. </para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="157" column="6" bodyfile="src/basic/lowlevel.c" bodystart="207" bodyend="214" declfile="include/basic/lowlevel.h" declline="157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a68bda39b8e07b882e318231b81cf0998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_inport</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inport</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC function INPORT. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads an 8-bit value from an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">v<sp/>=<sp/>INPORT(port)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>8-bit value (0–255) widened to int64_t.</para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="225" column="9" bodyfile="src/basic/lowlevel.c" bodystart="162" bodyend="169" declfile="include/basic/lowlevel.h" declline="225" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a14bfa78fef509dab742234e90d0d04ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_inportw</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inportw</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC function INPORTW. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads a 16-bit value from an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">v<sp/>=<sp/>INPORTW(port)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>16-bit value (0–65535) widened to int64_t.</para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="242" column="9" bodyfile="src/basic/lowlevel.c" bodystart="171" bodyend="178" declfile="include/basic/lowlevel.h" declline="242" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a4e4d61af51722aaa21751e7ebf088944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_inportd</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_inportd</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements the BASIC function INPORTD. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads a 32-bit value from an I/O port.</para>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">v<sp/>=<sp/>INPORTD(port)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit value widened to int64_t.</para>
</simplesect>
<simplesect kind="warning"><para>Raises a runtime error if the argument count or types are invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="259" column="9" bodyfile="src/basic/lowlevel.c" bodystart="180" bodyend="187" declfile="include/basic/lowlevel.h" declline="259" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1ae3e385bf39b31e5dc08769d1df967731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITOR(a, b) — bitwise OR. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a | b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="272" column="9" bodyfile="src/basic/lowlevel.c" bodystart="216" bodyend="225" declfile="include/basic/lowlevel.h" declline="272" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1adba68ed72df80f5b33972d05d365bc86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITAND(a, b) — bitwise AND. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITAND(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a &amp; b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="285" column="9" bodyfile="src/basic/lowlevel.c" bodystart="227" bodyend="236" declfile="include/basic/lowlevel.h" declline="285" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a7919dddeefedf4e79c272f72048bb93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitnot</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitnot</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITNOT(a) — bitwise complement. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITNOT(a)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(~a) as int64_t.</para>
</simplesect>
<simplesect kind="note"><para>Two’s-complement semantics on 64-bit integers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="300" column="9" bodyfile="src/basic/lowlevel.c" bodystart="238" bodyend="245" declfile="include/basic/lowlevel.h" declline="300" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1aa5f4ba34d30716c6cf5c30f2c736284f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_biteor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_biteor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITEOR(a, b) — bitwise XOR (BBC EOR). </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITEOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a ^ b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="313" column="9" bodyfile="src/basic/lowlevel.c" bodystart="247" bodyend="256" declfile="include/basic/lowlevel.h" declline="313" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1ab7e0871ca7343f1e8ccac007764bdcfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitnand</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitnand</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITNAND(a, b) — bitwise NAND. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITNAND(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>~(a &amp; b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="326" column="9" bodyfile="src/basic/lowlevel.c" bodystart="258" bodyend="267" declfile="include/basic/lowlevel.h" declline="326" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1ac25d6fb5964e9cbceaf30cddaf7e41ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitnor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitnor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITNOR(a, b) — bitwise NOR. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITNOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>~(a | b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="339" column="9" bodyfile="src/basic/lowlevel.c" bodystart="269" bodyend="278" declfile="include/basic/lowlevel.h" declline="339" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a2676b8258711a7b32375656c7235fb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitxnor</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitxnor</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITXNOR(a, b) — bitwise equivalence. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITXNOR(a,<sp/>b)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>~(a ^ b) as int64_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="352" column="9" bodyfile="src/basic/lowlevel.c" bodystart="280" bodyend="289" declfile="include/basic/lowlevel.h" declline="352" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a723cd0adaa4b0f8a9ab0756ce6764372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitshl</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitshl</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITSHL(a, n) — logical left shift. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITSHL(a,<sp/>n)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a &lt;&lt; n, computed in 64-bit.</para>
</simplesect>
<simplesect kind="note"><para>Implementations typically clamp n to 0–63. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="367" column="9" bodyfile="src/basic/lowlevel.c" bodystart="291" bodyend="306" declfile="include/basic/lowlevel.h" declline="367" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a86aef955ef1fdef5ef383591303d207a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitshr</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitshr</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITSHR(a, n) — logical right shift. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITSHR(a,<sp/>n)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Logical shift right of a by n (uses unsigned semantics), widened to int64_t.</para>
</simplesect>
<simplesect kind="note"><para>Implementations typically clamp n to 0–63. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="382" column="9" bodyfile="src/basic/lowlevel.c" bodystart="308" bodyend="323" declfile="include/basic/lowlevel.h" declline="382" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1aa3fde9ad31935c521e1d7e98b511b1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitrol</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitrol</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITROL(a, n, width) — rotate left within width bits. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITROL(a,<sp/>n,<sp/>width)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a rotated left by n within the lowest <computeroutput>width</computeroutput> bits.</para>
</simplesect>
<simplesect kind="note"><para>Width is usually 1–64; the result is masked to <computeroutput>width</computeroutput> bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="397" column="9" bodyfile="src/basic/lowlevel.c" bodystart="325" bodyend="344" declfile="include/basic/lowlevel.h" declline="397" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="lowlevel_8h_1a90da121152e2850164a0626aa39d33e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t basic_bitror</definition>
        <argsstring>(struct basic_ctx *ctx)</argsstring>
        <name>basic_bitror</name>
        <param>
          <type>struct <ref refid="structbasic__ctx" kindref="compound">basic_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Implements BITROR(a, n, width) — rotate right within width bits. </para>
        </briefdescription>
        <detaileddescription>
<para>BASIC syntax: <programlisting><codeline><highlight class="normal">r<sp/>=<sp/>BITROR(a,<sp/>n,<sp/>width)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpreter context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a rotated right by n within the lowest <computeroutput>width</computeroutput> bits.</para>
</simplesect>
<simplesect kind="note"><para>Width is usually 1–64; the result is masked to <computeroutput>width</computeroutput> bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/basic/lowlevel.h" line="412" column="9" bodyfile="src/basic/lowlevel.c" bodystart="346" bodyend="365" declfile="include/basic/lowlevel.h" declline="412" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/basic/lowlevel.h"/>
  </compounddef>
</doxygen>
