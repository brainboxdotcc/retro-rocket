DEF PROChttp
ENDPROC

REM ---- scheme --------------------------------
DEF FN_url_scheme$(url$)
_http_ok = 0
_http_s$ = ""
MATCH _http_ok, "^([A-Za-z][A-Za-z0-9+.-]*)://", url$, _http_s$

IF _http_ok = 1 THEN
  = _http_s$
ENDIF
= ""

REM ---- anchor --------------------------------
DEF FN_url_anchor$(url$)
_http_ok = 0
_http_a$ = ""
MATCH _http_ok, "#(.*)$", url$, _http_a$
IF _http_ok = 1 THEN
  = _http_a$
ENDIF
= ""

REM ---- query (raw) ---------------------------
DEF FN_url_query$(url$)
_http_ok = 0
_http_q$ = ""
REM scheme or protocol-relative or bare host/path
MATCH _http_ok, "^\w+://[^?#]*\?([^#]*)", url$, _http_q$
IF _http_ok = 1 THEN
  = _http_q$
ENDIF
MATCH _http_ok, "^//[^?#]*\?([^#]*)", url$, _http_q$
IF _http_ok = 1 THEN
  = _http_q$
ENDIF
MATCH _http_ok, "^[^?#]*\?([^#]*)", url$, _http_q$
IF _http_ok = 1 THEN
  = _http_q$
ENDIF
= ""

DEF FN_url_path$(url$)
_http_ok = 0
_http_path$ = ""
MATCH _http_ok, "^[[:alpha:]][[:alnum:]+.-]*://[^/?#]*/([^?#]*)", url$, _http_path$
IF _http_ok = 1 THEN
  = "/" + _http_path$
ENDIF
_http_ok = 0
_http_path$ = ""
MATCH _http_ok, "^//[^/?#]*/([^?#]*)", url$, _http_path$
IF _http_ok = 1 THEN
  = "/" + _http_path$
ENDIF
_http_ok = 0
_http_path$ = ""
MATCH _http_ok, "^(/[^?#]*)", url$, _http_path$
IF _http_ok = 1 THEN
  = _http_path$
ENDIF
_http_ok = 0
_http_path$ = ""
MATCH _http_ok, "^((\[[^]]+\])|([^/?#:]+(\.[^/?#:]+)+))(:[0-9]+)?/([^?#]*)", url$, _http_tmp1$, _http_tmp2$, _http_tmp3$, _http_tmp4$, _http_tmp5$, _http_path$
IF _http_ok = 1 THEN
  = "/" + _http_path$
ENDIF
_http_ok = 0
MATCH _http_ok, "^[[:alpha:]][[:alnum:]+.-]*://[^/?#]+$", url$, _http_tmp1$
IF _http_ok = 1 THEN
  = "/"
ENDIF
_http_ok = 0
MATCH _http_ok, "^//[^/?#]+$", url$, _http_tmp1$
IF _http_ok = 1 THEN
  = "/"
ENDIF
= ""

DEF FN__authority$(url$)
_http_ok = 0
_http_auth$ = ""
MATCH _http_ok, "^[[:alpha:]][[:alnum:]+.-]*://([^/?#]*)", url$, _http_auth$
IF _http_ok = 1 THEN
  = _http_auth$
ENDIF

_http_ok = 0
_http_auth$ = ""
MATCH _http_ok, "^//([^/?#]*)", url$, _http_auth$
IF _http_ok = 1 THEN
  = _http_auth$
ENDIF

REM bare host (requires dot or bracketed IPv6), optional :port; capture the whole authority
_http_ok = 0
_http_auth$ = ""
MATCH _http_ok, "^((\[[^]]+\]|[^/?#:]+(\.[^/?#:]+)+)(:[0-9]+)?)", url$, _http_auth$
IF _http_ok = 1 THEN
  = _http_auth$
ENDIF
= ""

REM ---- host ----------------------------------
DEF FN_url_host$(url$)
_http_auth$ = FN__authority$(url$)
IF _http_auth$ = "" THEN
  = ""
ENDIF
_http_ok = 0
_http_user$ = ""
_http_host$ = ""
_http_colon$ = ""
_http_port$ = ""
MATCH _http_ok, "^(.*@)?(\[[^]]+\]|[^:]+)(:([0-9]+))?$", _http_auth$, _http_user$, _http_host$, _http_colon$, _http_port$
IF _http_ok = 1 THEN
  = _http_host$
ENDIF
= ""

REM ---- port (explicit or default) ------------
DEF FN_url_port(url$)
_http_auth$ = FN__authority$(url$)
IF _http_auth$ <> "" THEN
  _http_ok = 0
  _http_user$ = ""
  _http_host$ = ""
  _http_colon$ = ""
  _http_port$ = ""
  MATCH _http_ok, "^(.*@)?(\[[^]]+\]|[^:]+)(:([0-9]+))?$", _http_auth$, _http_user$, _http_host$, _http_colon$, _http_port$
  IF _http_ok = 1 THEN
    IF _http_port$ <> "" THEN
      = VAL(_http_port$)
    ENDIF
  ENDIF
ENDIF
_http_s$ = FN_url_scheme$(url$)
IF _http_s$ = "http" THEN
  = 80
ENDIF
IF _http_s$ = "https" THEN
  = 443
ENDIF
IF _http_s$ = "ws" THEN
  = 80
ENDIF
IF _http_s$ = "wss" THEN
  = 443
ENDIF
IF _http_s$ = "ftp" THEN
  = 21
ENDIF
= 0

REM ---- query param lookup --------------------
DEF FN_url_param$(url$, key$)
_http_q$ = FN_url_query$(url$)
IF _http_q$ = "" THEN
  = ""
ENDIF
_http_ok = 0
_http_val$ = ""
_http_rx$ = "((^|&)" + key$ + "=)([^&]*)(&|$)"
MATCH _http_ok, _http_rx$, _http_q$, _http_tmp1$, _http_tmp2$, _http_val$, _http_tmp3$
IF _http_ok = 1 THEN
  = _http_val$
ENDIF
_http_ok = 0
MATCH _http_ok, "(^|&)" + key$ + "(&|$)", _http_q$, _http_tmp1$, _http_tmp2$
IF _http_ok = 1 THEN
  = ""
ENDIF
= ""

