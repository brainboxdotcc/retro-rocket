registered = FALSE
rawlog = FALSE
REM HOST$ = ARGS$
HOST$ = "ip222.ip-141-95-6.eu"
NICK$ = "Test0001"
GECOS$ = "Retro Rocket OS IRC Client"
IDENT$ = "test"
PORT = 6667
SCROLLBACK = 512
currentLine$ = ""
DIM lineParts$, 255
DIM scrollback$, SCROLLBACK
DIM lineColour, SCROLLBACK
scrollptr = TERMHEIGHT - 2
curChannel$ = "-"
networkName$ = "-"
top = 0
currentx = 0
in$ = ""

PROCconnect
PROCmainLoop
END

DEF PROCmainLoop
	CLS
	PROCdraw
	REPEAT
		IF registered = FALSE THEN PROCregister
		char$ = INSOCKET$(FD)
		IF char$ > "" THEN PROCprocess(char$)
		IF char$ = "" THEN PROCkeyScan
	UNTIL SOCKSTATUS(FD) = 0
	CLS
ENDPROC

DEF PROCkeyScan
	key$ = INKEY$
	IF key$ > "" THEN PROCprocessKey(ASC(key$))
ENDPROC

REM handle keypress
DEF PROCprocessKey(in)
	ctrl = CTRLKEY
	IF ctrl = TRUE THEN PROCctrl(CHR$(in))
	IF ctrl = TRUE THEN ENDPROC
	IF in = 27 THEN PROCquit
	IF in = 13 THEN PROCenter
	IF in = 250 THEN PROCup
	IF in = 251 THEN PROCdown
	IF in = 252 THEN PROCleft
	IF in = 253 THEN PROCright
	IF in = 249 THEN PROCend
	IF in = 254 THEN PROChome
	IF in = 245 THEN PROCpageUp
	IF in = 246 THEN PROCpageDown
	IF in = 247 THEN PROCdelete
	IF in = 8 THEN PROCbackSpace
	IF (in < 128) AND (in > 31) THEN PROCinsertChar(in)
	PROCdisplayInput
ENDPROC

DEF PROCdisplayInput
	PROChideCursor
	CURSOR 2, TERMHEIGHT
	COLOR 15
	BACKGROUND 1
	leftX = LEN(curChannel$) + 5
	PRINT "["; curChannel$; "] ";
	CURSOR leftX, TERMHEIGHT
	PRINT in$;
	PROCclearLineFromCursor
	CURSOR leftX + currentx, TERMHEIGHT
	PROCshowCursor
	BACKGROUND 0
ENDPROC

DEF PROCinsertChar(i)
	start$ = MID$(in$, 0, currentx)
	end$ = MID$(in$, currentx, LEN(in$))
	in$ = start$ + CHR$(i) + end$
	currentx = currentx + 1
ENDPROC


DEF PROCctrl(ctrlkey$)
ENDPROC

DEF PROCquit
	PROCquitCommand("Program ended")
ENDPROC

DEF PROCenter
	IF LEFT$(in$, 1) = "/" THEN PROCslash(MID$(in$, 1, LEN(in$)))
	IF LEFT$(in$, 1) = "/" THEN ENDPROC
	PROCmessageCurrent(in$)
ENDPROC

DEF PROCmessageCurrent(message$)
	in$ = ""
	currentx = 0
ENDPROC

DEF PROCslash(slash$)
	slashSpace = INSTR(slash$, " ")
	slashCommand$ = UPPER$(LEFT$(slash$, slashSpace - 1))
	slashParams$ = MID$(slash$, slashSpace, LEN(slash$))
	IF slashCommand$ = "JOIN" THEN PROCjoinCommand(slashParams$)
	IF slashCommand$ = "PART" THEN PROCpartCommand(slashParams$)
	IF slashCommand$ = "MSG" THEN PROCmessageCommand(slashParams$)
	IF slashCommand$ = "PRIVMSG" THEN PROCmessageCommand(slashParams$)
	IF slashCommand$ = "NOTICE" THEN PROCnoticeCommand(slashParams$)
	IF slashCommand$ = "RAWLOG" THEN PROCrawLogCommand(slashParams$)
	IF slashCommand$ = "QUIT" THEN PROCquitCommand(slashParams$)
	in$ = ""
	currentx = 0
ENDPROC

DEF PROCquitCommand(quitMessage$)
	IF quitMessage$ = "" THEN PROCsend("QUIT :Satellite IRC Client");
	IF quitMessage$ > "" THEN PROCsend("QUIT :" + quitMessage$)
	CLS
	SOCKCLOSE FD
ENDPROC

DEF PROCrawLogCommand(onoff$)
	rawlog = FALSE
	IF UPPER$(onoff$) = "ON" THEN rawlog = TRUE
ENDPROC

DEF PROCjoinCommand(channel$)
	c$ = channel$
	PROCsend("JOIN " + c$)
ENDPROC

DEF PROCpartCommand(channel$)
	c$ = channel$
	PROCsend("PART " + c$)
ENDPROC

DEF PROCmessageCommand(channelAndMessage$)
	msgSpace = INSTR(channelAndMessage$, " ")
	msgChannel$ = LEFT$(channelAndMessage$, msgSpace - 1)
	msgText$ = MID$(channelAndMessage$, msgSpace, LEN(channelAndMessage$))
	PROCsend("PRIVMSG " + msgChannel$ + " :" + msgText$)
ENDPROC

DEF PROCnoticeCommand(channelAndMessage$)
	msgSpace = INSTR(channelAndMessage$, " ")
	msgChannel$ = LEFT$(channelAndMessage$, msgSpace - 1)
	msgText$ = MID$(channelAndMessage$, msgSpace, LEN(channelAndMessage$))
	PROCsend("NOTICE " + msgChannel$ + " :" + msgText$)
ENDPROC

DEF PROCup
ENDPROC

DEF PROCdown
ENDPROC

DEF PROCleft
	currentx = currentx - 1
	IF currentx < 0 THEN currentx = 0
ENDPROC


DEF PROCright
	currentx = currentx + 1
	IF currentx < 0 THEN currentx = 0
ENDPROC

DEF PROCend
	currentx = LEN(in$)
ENDPROC

DEF PROChome
	currentx = 0
ENDPROC

DEF PROCpageUp
	top = top - TERMHEIGHT - 2
	IF top < 0 THEN top = 0
	PROCtext
ENDPROC

DEF PROCpageDown
	top = top + TERMHEIGHT - 2
	IF (top + TERMHEIGHT + 2) > scrollptr THEN top = scrollptr - TERMHEIGHT + 2
	PROCtext
ENDPROC

REM handle delete key
DEF PROCdelete
	len = LEN(in$)
	IF currentx < len THEN PROCdeleteRight
ENDPROC

REM handle backspace
DEF PROCbackSpace
	cx = currentx
	IF cx > 0 THEN PROCdeleteLeft
ENDPROC

REM delete character to left of cursor, advance left
DEF PROCdeleteLeft
	start$ = MID$(in$, 0, currentx - 1)
	end$ = MID$(in$, currentx, LEN(in$))
	in$ = start$ + end$
	currentx = currentx - 1
ENDPROC

REM delete one character to the right
DEF PROCdeleteRight
	start$ = MID$(in$, 0, currentx)
	end$ = MID$(in$, currentx + 1, LEN(in$))
	in$ = start$ + end$
	len = LEN(in$)
	IF currentx > len THEN currentx = len
ENDPROC

REM clear line from cursor to right
DEF PROCclearLineFromCursor
	PRINT CHR$(27) + "[0K";
ENDPROC

REM draw UI around window
DEF PROCdraw
	title$ = "Satellite: IRC Client for Retro Rocket OS"
	BACKGROUND 1
	COLOUR 15
	CURSOR 1, TERMHEIGHT
	PROCclearLineFromCursor
	CURSOR 2, TERMHEIGHT
	PRINT "["; curChannel$; "] ";
	CURSOR TERMWIDTH - 15, TERMHEIGHT
	CURSOR 1, 0
	PROCclearLineFromCursor
	CURSOR TERMWIDTH / 2 - LEN(title$) / 2, 0
	PRINT title$;
	COLOUR 7
	BACKGROUND 0
	CURSOR 1, 2
ENDPROC

REM hide text cursor
DEF PROChideCursor
	PRINT CHR$(27);"[?25l";
ENDPROC

REM show text cursor
DEF PROCshowCursor
	PRINT CHR$(27);"[?25h";
ENDPROC

REM display text to editor window
DEF PROCtext
	PROChideCursor
	PROCdraw
	CURSOR 1, 2
	FOR l = top TO top + TERMHEIGHT - 3
		PROCclearLineFromCursor
		IF l < SCROLLBACK THEN PROCprintLine(l)
	NEXT
	PROCshowCursor
	PROCdisplayInput
ENDPROC

DEF PROCprintLine(lineIndex)
	COLOUR lineColour(lineIndex)
	PRINT scrollback$(lineIndex)
ENDPROC

DEF PROCout(col, text$)
	REPEAT
		scrollback$(scrollptr) = LEFT$(text$, TERMWIDTH - 1)
		LOCAL text$ = MID$(text$, TERMWIDTH - 1, LEN(text$))
		lineColour(scrollptr) = col
		scrollptr = scrollptr + 1
		top = top + 1
		IF scrollptr > SCROLLBACK - 1 THEN PROCdiscard
	UNTIL text$ = ""
	PROCtext
ENDPROC

DEF PROCdiscard
	POP scrollback$,0
	POP lineColour,0
	scrollptr = scrollptr - 1
	top = top - 1
ENDPROC

DEF PROCconnect
	PRINT "Connecting to "; HOST$; " ";
	IP$ = DNS$(HOST$)
	PRINT " (IP: "; IP$; ")... ";
	CONNECT FD, IP$, PORT
	PRINT "Connected!"
ENDPROC

DEF PROCregister
	PROCsend("USER " + IDENT$ + " * * :" + GECOS$)
	PROCsend("NICK :" + NICK$)
	registered = TRUE
ENDPROC

DEF PROCprocess(c$)
	IF c$ = CHR$(10) THEN ENDPROC
	IF c$ = CHR$(13) THEN PROCprocessLine
	IF c$ < CHR$(13) THEN currentLine$ = currentLine$ + c$
	IF c$ > CHR$(13) THEN currentLine$ = currentLine$ + c$
ENDPROC

DEF PROCrawLog
	IF rawlog = FALSE THEN ENDPROC
	PROCout(8, "RAWLOG: " + currentLine$)
ENDPROC

DEF PROCprocessLine
	PROCrawLog
	tokenIndex = 0
	lastToken = FALSE
	lineParts$ = ""
	REPEAT
		space = INSTR(currentLine$, " ")
		oldCurrentLine$ = currentLine$
		IF space = 0 THEN nextToken$ = currentLine$
		IF space = 0 THEN currentLine$ = ""
		IF space > 0 THEN nextToken$ = LEFT$(currentLine$, space - 1)
		IF space > 0 THEN currentLine$ = MID$(currentLine$, space, LEN(currentLine$))
		IF lastToken = FALSE THEN lineParts$(tokenIndex) = nextToken$
		IF lastToken = FALSE THEN tokenIndex = tokenIndex + 1
		IF tokenIndex > 1 THEN IF LEFT$(nextToken$, 1) = ":" THEN IF lastToken = FALSE THEN lastToken = TRUE
		IF lastToken = TRUE THEN lineParts$(tokenIndex - 1) = oldCurrentLine$
		IF lastToken = TRUE THEN currentLine$ = ""
	UNTIL currentLine$ = ""
	IF LEFT$(lineParts$(tokenIndex - 1), 1) = ":" THEN lineParts$(tokenIndex - 1) = MID$(lineParts$(tokenIndex - 1), 1, LEN(lineParts$(tokenIndex - 1)))
	prefix$ = ""
	IF LEFT$(lineParts$(0),1) = ":" THEN PROChandlePrefix
	commands$ = lineParts$(0)
	PROCprocessCommand
ENDPROC

DEF PROCsend(data$)
	SOCKWRITE FD, data$; CHR$(13); CHR$(10);
ENDPROC

DEF PROChandlePrefix
	prefix$ = MID$(lineParts$(0), 1, LEN(lineParts$(0)))
	userNick$ = prefix$
	userIdent$ = ""
	userHost$ = ""
	POP lineParts$,0
	tokenIndex = tokenIndex - 1
	plingPos = INSTR(prefix$, "!")
	IF plingPos > 0 THEN PROCparsePrefixNUH
ENDPROC

DEF PROCparsePrefixNUH
	userHost$ = prefix$
	userNick$ = LEFT$(userHost$, INSTR(userHost$, "!") - 1)
	userHost$ = MID$(userHost$, INSTR(userHost$, "!"), LEN(userHost$))
	userIdent$ = LEFT$(userHost$, INSTR(userHost$, "@") - 1)
	userHost$ = MID$(userHost$, INSTR(userHost$, "@"), LEN(userHost$))
ENDPROC

DEF PROCprocessCommand
	IF commands$ = "PING" THEN PROCping
	IF commands$ = "NOTICE" THEN PROCnotice
	IF commands$ = "PRIVMSG" THEN PROCprivmsg
	IF commands$ = "005" THEN PROCiSupport
	IF commands$ = "372" THEN PROCmotdLine
	IF commands$ = "376" THEN PROCmotdEnd
ENDPROC

DEF PROCiSupport
	FOR x = 2 TO tokenIndex - 2
		st$ = lineParts$(x)
		IF st$ > "" THEN PROCprocessSupportToken(st$)
	NEXT
ENDPROC

DEF PROCprocessSupportToken(supportToken$)
	supportValue$ = ""
	supportKey$ = supportToken$
	supportEquals = INSTR(supportToken$, "=")
	IF supportEquals > 0 THEN supportKey$ = LEFT$(supportToken$, supportEquals - 1)
	IF supportEquals > 0 THEN supportValue$ = MID$(supportToken$, supportEquals, LEN(supportToken$))
	IF supportKey$ = "NETWORK" THEN PROCsaveNetName(supportKey$, supportValue$)
ENDPROC

DEF PROCsaveNetName(key$, value$)
	curChannel$ = value$
	networkName$ = value$
ENDPROC

DEF PROCping
	PROCsend("PONG :" + lineParts$(1))
	PROCout(5, "= PING? PONG!")
ENDPROC

DEF PROCnotice
REM IF INSTR(lineParts$(2), "Found your hostname ") > 0 THEN ENDPROC
	PROCout(12, "-" + userNick$ + "- " + lineParts$(2))
ENDPROC

DEF PROCprivmsg
	COLOR 15
	channel$ = lineParts$(1)
	PROCout(15, "<" + userNick$ + "/" + channel$ + "> " + lineParts$(2))
ENDPROC

DEF PROCmotdLine
	PROCout(2, "-MOTD- " + lineParts$(2))
ENDPROC

DEF PROCmotdEnd
	PROCout(2, "-MOTD ENDS-")
ENDPROC
